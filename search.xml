<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Picgo GitHub自建图床]]></title>
    <url>%2F2019%2F07%2F27%2FPicgo%20Github%E8%87%AA%E5%BB%BA%E5%9B%BE%E5%BA%8A%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[自建原因对于写博客的人来说，图裂是很让人然烦恼的一件事情。后来想到了自建图床，将所有图片上传云，并通过外联https连接用于博客或Markdownd的编写。正好自己用Hexo+Github搭建了博客，就想着用Github来做图片的云存储空间，电脑端使用Picgo传图软件。既使用Picgo+Github的方式自建图床。 GIthub仓库创建及获取token1.注册Github,新建仓库(此处略)。 2.新建仓库后，点击sitting—Developer settings—Personal access tokens—Generate new token—选择相关设置—按Generate token提交生成token码。 Picgo下载安装及设置1.开打Picgo项目站点，下拉页面选择自己对应系统的软件版本。我这边选择下载Windows版本。 2.打开Picgo，选择Github图床进行如下设置： 设置完成后，就可开始图片上传，动图gif（需要先下载到本地在上传）同时粘贴板也会自动粘贴上。 上传成功后，软件既根据选择的外联格式生成对应连接,直接黏贴到想要的地方。我这边选择了Markdown外联格式。]]></content>
      <categories>
        <category>Picgo</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Picgo</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Typroa中文字体美化]]></title>
    <url>%2F2019%2F07%2F27%2FTyproa%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93%E7%BE%8E%E5%8C%96%2F</url>
    <content type="text"><![CDATA[好字体带来好心情 “Typora”这款Markdown编译器，是自己目前使用率最高的在线编译软件，其所见即所得、离线编辑让我觉得十分得心应手。但软件默认所带的中文字体显示为“宋体”，对于有一定审美度的用户来说可能不太美观，考虑到长期使用的缘故，漂亮字体能带给编译者带来好的心情，一个好的编译开始。 那如何更换字体呢？思路如下： 下载使用一款主题在官网选择一款Typora主题，例如主题Catfish,进入主题介绍查看对应主题字体说明，并下载主题。 下载完成主题压缩包后将压缩包里边的几个文件解压到Typora的自定义主题目录，文件包括： catfish.css catfish.styl catfish（文件夹） 重启Typora，在主题选项里将原主题切换为catfish。 下载思源黑体、思源宋体好在官方主题catfish说明中刚好给了两个链接： source-han-sans（思源黑体） source-han-serif（思源宋体） 点击链接进入Github网站，将文件列表上方，将Branch选项由’master’切换为’release’， 对于source-han-sans项目，点击进入OTF文件夹，然后点击进入SourceHanSansSC.zip，再点击download下载这个压缩包，解压后在SourceHanSansSC文件夹下，得到7种不同粗细思源黑体的*.otf格式的字体文件： 对于source-han-serif项目，操作方法类似，进入OTF文件夹后，分别下载SourceHanSerifSC_SB-H.zip与SourceHanSerifSC_EL-M.zip两个压缩包，解压得到7种不同粗细的思源宋体的*.otf格式文件。 对于每个*.otf文件，右键-&gt;安装，或者双击文件打开后，亦有安装按钮。 至此，安装了思源字体，重启Typora，但如此设置在catfish主题下字体是不会呈现出来的。 修改catfish.css字体装好了，catfish主题也是从官网上下载的，打开catfish.css文件，其body部分显示如下： 12345body &#123; background: #fff; font-family: Source Han Sans SC, sans-serif; color: #555;&#125; “font-family”第一默认的字体是”Source Han Sans”，这个肯定是和思源黑体有关的，但貌似不是Windows字体文件夹Font下面的字体名称。 在css文件中搜索下”Source Han Sans”，文档显示如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344@font-face &#123; font-family: Source Han Sans SC; font-weight: normal; src: local('Source Han Sans SC Regular'), url("catfish/SourceHanSansSC-Regular.otf");&#125;@font-face &#123; font-family: Source Han Sans; font-weight: bold; src: local('Source Han Sans SC Bold'), url("catfish/SourceHanSansSC-Bold.otf");&#125;@font-face &#123; font-family: Source Han Serif; font-weight: normal; src: local('Source Han Serif SC Regular'), url("catfish/SourceHanSerifSC-Regular.otf");&#125;@font-face &#123; font-family: Source Han Serif; font-weight: bold; src: local('Source Han Serif SC Bold'), url("catfish/SourceHanSerifSC-Bold.otf");&#125;@font-face &#123; font-family: mononoki; font-style: normal; font-weight: normal; src: local('mononoki Regular'), url("catfish/mononoki-Regular.woff");&#125;@font-face &#123; font-family: mononoki; font-style: italic; font-weight: normal; src: local('mononoki Italic'), url("catfish/mononoki-Italic.woff");&#125;@font-face &#123; font-family: mononoki; font-style: normal; font-weight: bold; src: local('mononoki Bold'), url("catfish/mononoki-Bold.woff");&#125;@font-face &#123; font-family: mononoki; font-style: italic; font-weight: bold; src: local('mononoki Bold Italic'), url("catfish/mononoki-BoldItalic.woff");&#125; 对于第一段设置大胆猜测一下，”font-family: Source Han Sans”以及”font-weight: normal”的字体所在的位置url为”catfish/SourceHanSans-Regular.ttc”。刚好，在自定义主题路径themes中的catfish，找到了”SourceHanSans-Regular.ttc”与”SourceHanSans-Bold.ttc”，但是Windows貌似不识别这种格式。 于是，我把上面下载的思源字体copy到themes/catfish的文件夹下面，然后修改catfish.css文档，修改了’Source Han Sans’与’Source Han Serif’指向的四处url（以下url中是博主字体的安装的路径）： 1234567891011121314151617181920212223242526272829303132333435363738394041424344@font-face &#123; font-family: Source Han Sans SC; font-weight: normal; src: local('Source Han Sans SC Regular'), url("Users\Mayjor_Zmj\AppData\Roaming\Typora\themes\catfish/SourceHanSansSC-Regular.otf");&#125;@font-face &#123; font-family: Source Han Sans; font-weight: bold; src: local('Source Han Sans SC Bold'), url("Users\Mayjor_Zmj\AppData\Roaming\Typora\themes\catfish/SourceHanSansSC-Bold.otf");&#125;@font-face &#123; font-family: Source Han Serif; font-weight: normal; src: local('Source Han Serif SC Regular'), url("Users\Mayjor_Zmj\AppData\Roaming\Typora\themes\catfish/SourceHanSerifSC-Regular.otf");&#125;@font-face &#123; font-family: Source Han Serif; font-weight: bold; src: local('Source Han Serif SC Bold'), url("Users\Mayjor_Zmj\AppData\Roaming\Typora\themes\catfish/SourceHanSerifSC-Bold.otf");&#125;@font-face &#123; font-family: mononoki; font-style: normal; font-weight: normal; src: local('mononoki Regular'), url("Users\Mayjor_Zmj\AppData\Roaming\Typora\themes\catfish/mononoki-Regular.woff");&#125;@font-face &#123; font-family: mononoki; font-style: italic; font-weight: normal; src: local('mononoki Italic'), url("Users\Mayjor_Zmj\AppData\Roaming\Typora\themes\catfish/mononoki-Italic.woff");&#125;@font-face &#123; font-family: mononoki; font-style: normal; font-weight: bold; src: local('mononoki Bold'), url("Users\Mayjor_Zmj\AppData\Roaming\Typora\themes\catfish/mononoki-Bold.woff");&#125;@font-face &#123; font-family: mononoki; font-style: italic; font-weight: bold; src: local('mononoki Bold Italic'), url("Users\Mayjor_Zmj\AppData\Roaming\Typora\themes\catfish/mononoki-BoldItalic.woff");&#125; 保存并重启Typora，主题选择catfish，字体修改成功。]]></content>
      <categories>
        <category>Typroa</category>
      </categories>
      <tags>
        <tag>Typroa</tag>
        <tag>修改</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo aplayer播放器的使用]]></title>
    <url>%2F2019%2F07%2F26%2FHexo%20aplayer%E6%92%AD%E6%94%BE%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[APlayer HTML5 音乐播放器Hexo中安装hexo-tag-aplayer 是APlayer播放器在Hexo 标签插件（现已支持 MetingJS）在站点根目录下安装 1npm install --save hexo-tag-aplayer Aplayer使用方式简单介绍12-- 简单格式 --&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125; 标签参数 title : 曲目标题 author: 曲目作者 url: 音乐文件 URL 地址 picture_url: (可选) 音乐对应的图片地址 narrow: （可选）播放器袖珍风格 autoplay: (可选) 自动播放，移动端浏览器暂时不支持此功能 width:xxx: (可选) 播放器宽度 (默认: 100%) lrc:xxx: （可选）歌词文件 URL 地址 当开启 Hexo 的 文章资源文件夹 功能时，可以将图片、音乐文件、歌词文件放入与文章对应的资源文件夹中，然后直接引用： 1&#123;% aplayer "Caffeine" "Jeff Williams" "caffeine.mp3" "picture.jpg" "lrc:caffeine.txt" %&#125; 歌词标签除了使用标签 lrc 选项来设定歌词，你也可以直接使用 aplayerlrc 标签来直接插入歌词文本在博客中： 123&#123;% aplayerlrc "title" "author" "url" "autoplay" %&#125;[00:00.00]lrc here&#123;% endaplayerlrc %&#125; 播放列表123456789101112131415161718192021222324252627&#123;% aplayerlist %&#125;&#123; "narrow": false, // （可选）播放器袖珍风格 "autoplay": true, // （可选) 自动播放，移动端浏览器暂时不支持此功能 "mode": "random", // （可选）曲目循环类型，有 'random'（随机播放）, 'single' (单曲播放), 'circulation' (循环播放), 'order' (列表播放)， 默认：'circulation' "showlrc": 3, // （可选）歌词显示配置项，可选项有：1,2,3 "mutex": true, // （可选）该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停 "theme": "#e6d0b2", // （可选）播放器风格色彩设置，默认：#b7daff "preload": "metadata", // （可选）音乐文件预载入模式，可选项： 'none' 'metadata' 'auto', 默认: 'auto' "listmaxheight": "513px", // (可选) 该播放列表的最大长度 "music": [ &#123; "title": "CoCo", "author": "Jeff Williams", "url": "caffeine.mp3", "pic": "caffeine.jpeg", "lrc": "caffeine.txt" &#125;, &#123; "title": "アイロニ", "author": "鹿乃", "url": "irony.mp3", "pic": "irony.jpg" &#125; ]&#125;&#123;% endaplayerlist %&#125; MetingJShi使用方式简单介绍MetingJS 是基于Meting API 的 APlayer 衍生播放器，引入 MetingJS 后，播放器将支持对于 QQ音乐、网易云音乐、虾米、酷狗、百度等平台的音乐播放。 如果想在本插件中使用 MetingJS，请在 Hexo 站点配置文件 _config.yml 中设置： 12aplayer: meting: true 接着就可以在文章中使用 MetingJS 播放器了： 12345-- 简单示例 (id, server, type) --&#123;% meting "60198" "netease" "playlist" %&#125;&lt;!-- 进阶示例 --&gt;&#123;% meting "60198" "netease" "playlist" "autoplay" "mutex:false" "listmaxheight:340px" "preload:none" "theme:#ad7a86"%&#125; 有关参数选项注释列表如下: 选项 默认值 描述 id 必须值 歌曲 id / 播放列表 id / 相册 id / 搜索关键字 server 必须值 音乐平台: netease, tencent, kugou, xiami, baidu type 必须值 song, playlist, album, search, artist fixed false 开启固定模式 mini false 开启迷你模式 loop all 列表循环模式：all, one,none order list 列表播放模式： list, random volume 0.7 播放器音量 lrctype 0 歌词格式类型 listfolded false 指定音乐播放列表是否折叠 storagename metingjs LocalStorage 中存储播放器设定的键名 autoplay true 自动播放，移动端浏览器暂时不支持此功能 mutex true 该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停 listmaxheight 340px 播放列表的最大长度 preload auto 音乐文件预载入模式，可选项： none, metadata, auto theme #ad7a86 播放器风格色彩设置]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>aplayer</tag>
        <tag>Hexo</tag>
        <tag>nexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo GitHub搭建博客]]></title>
    <url>%2F2019%2F07%2F24%2FHexo%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[Hexo GitHub搭建博客的好处全是静态文件，访问速度快； 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台； 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于GitHub的； 数据绝对安全，基于GitHub的版本管理，想恢复到哪个历史版本都行； 博客内容可以轻松打包、转移、发布到其它平台； 准备工作有一个GitHub账号，没有的话去注册一个； 安装 node.js环境 安装 git环境 本次安装使用操作系统为：windows 10 搭建Hexo博客创建GitHub仓库注册的邮箱一定要验证，否则不会成功； 仓库名字必须是：username.github.io，其中username是你的用户名； 绑定域名我申请的是 iamzmj.top 域名，pin 域名地址 得到 ip 地址为 ：185.199.108.153 123C:\Users\x0468&gt;ping zmj2020.github.io正在 Ping zmj2020.github.io [185.199.108.153] 具有 32 字节的数据:来自 185.199.108.153 的回复: 字节=32 时间=143ms TTL=49 绑定域名分2种情况：带www和不带www的。 域名配置最常见有2种方式，CNAME和A记录，CNAME填写域名，A记录填写IP，由于不带www方式只能采用A记录，所以必须先ping一下你的用户名.github.io的IP，然后到你的域名DNS设置页，将A记录指向你ping出来的IP，将CNAME指向你的用户名.github.io，这样可以保证无论是否添加www都可以访问。最后在对应仓库内新建一个文档CNAME（无后缀），添加个人域名 保存即可。 本地部署Hexo在电脑的某个地方新建一个名为xxxxx的文件夹（名字可以随便取）,在该文件夹下打开Git Brush开始安装： 123456npm install -g hexo-cli #安装hexo的基础框架hexo init #初始化hexo框架 这个可能会比较慢npm install #安装所需要的组件hexo g #编译生成静态页面hexo s #启动本地服务浏览器上输入 http://localhost:4000/ #查看生成静态页面 本地部署完成 Hexo部署到Github主机中选择 Git Bash打开,输入 12345git config --global user.name "yourname" #注册用户名git config --global user.email "youremail" #注册邮箱可使用下面代码检查输入是否正确git config user.namegit config user.email 123创建SSHssh-keygen -t rsa -C "youremail@qq.com"一路回车，中会让你输入密码啥的，不需要管，一路回车即可，会生成你的ssh key。（如果重新生成的话会覆盖之前的ssh key。） 再ternimal下执行命令： 1234ssh -v git@github.com 最后两句会出现No more authentication methods to try. Permission denied (publickey). 再在ternimal下输入： 12345ssh-agent -s 然后会提示类似的信息：SSH_AUTH_SOCK=/tmp/ssh-GTpABX1a05qH/agent.404; export SSH_AUTH_SOCK; SSH_AGENT_PID=13144; export SSH_AGENT_PID; echo Agent pid 13144; 接着再输入： 1ssh-add ~/.ssh/id_rsa 这时候应该会提示：Identity added: …（这里是一些ssh key文件路径的信息）。如果出现错误提示：Could not open a connection to your authentication agent.。请执行命令： eval ssh-agent -s后继续执行命令ssh-add ~/.ssh/id_rsa ，这时候一般没问题。 再进入你的github账号，将刚刚生成的id_rsa.pub内容复制，在settings下，SSH and GPG keys下绑定。title随便取一个名字，然后将id_rsa.pub里的内容复制到Key中，完成后Add SSH Key。 最后一步，验证Key 12345在ternimal下输入命令：ssh -T git@github.com当出现Hi zmj2020! You've successfully authenticated, but GitHub does not provide shell access.表示验证成功 站点发布上传ssh key肯定要配置好 配置_config.yml中有关deploy的部分 最后站点根目录下安装deployer插件 1234npm install hexo-deployer-git --savehexo clean hexo g #生成hexo d #上传 至此Hexo+Github 个人博客搭建完成]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hello world]]></title>
    <url>%2F2019%2F07%2F21%2Fhello%20world%2F</url>
    <content type="text"><![CDATA[匆匆25年过去了，还记得25年前的自己看狮子王时的情景么？ 最近狮子王真狮版又将这个故事重新映在了我们眼前，当电影落幕时看到很多人哭了。为何这样一部电影能如此深入打人心。 “25年前，父母陪我看狮子王；25年后，我带孩子看狮子王。” 曾今年少，不知何为艰苦，于是对未来充满热情于憧憬。 时间如白驹过隙，渐渐跨入而立之年，曾今的梦想早已偏离轨道，社会如同一片汪洋，一个人是如此的渺小，进去了才真正体会人生五味，挫折削平了自己的棱角。 当这个世界对你不理不睬，你也可以让世界去他的。 曾经的自己愿意独自挑选一个时间，带上耳机隔绝外界的喧嚣穿过城市里一条条长长的小巷，试着将自己的心深深的埋藏起来，无论是步行还是骑车。当自己感觉最孤独，最痛苦的时候，也是自己成长最快的时候。 过去也许是不堪回首，那又如何。不要让自己配不上当初的野心，还辜负了曾经遭遇的苦难。。。所谓的牛逼都是用苦难换来的。这个世界已经有很多人和事让自己失望了，所以最不应该的就是自己还令自己失望。 感谢曾经所经历的，让自己不再遇事大惊小怪，对梦想的追求不在浅尝辄止，越加珍惜亲友对自己的关怀。 多久没有向世界问好了！ 社会很残酷，我仍要活得有温度。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>心情</tag>
      </tags>
  </entry>
</search>
