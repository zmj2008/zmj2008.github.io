<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[windows10安装openssl环境并命令行调用openssl]]></title>
    <url>%2Fposts%2Fac409ae6.html</url>
    <content type="text"><![CDATA[在计算机网络上，OpenSSL是一个开放源代码的软件库包，应用程序可以使用这个包来进行安全通信，避免窃听，同时确认另一端连接者的身份。这个包广泛被应用在互联网的网页服务器上。 下载安装windows平台openssl密钥生成工具 执行安装目录bin下的”openssl.exe”，执行后弹出命令窗口如下 生成私钥，命令行输入 1genrsa -out rsa_private_key.pem 1024 在bin目录下多了一个rsa_private_key.pem文件，将这个文件通过文本编辑器打开，将看到你所需要的私钥，使用时记得把—BEGIN PRIVATE KEY—，—END PRIVATE KEY—字样删掉。 生成公钥，命令行输入 1rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem 在bin目录下多了一个rsa_public_key.pem文件，将这个文件通过文本编辑器打开，将看到你所需要的公钥，使用时记得把—BEGIN PRIVATE KEY—，—END PRIVATE KEY—字样删掉。 RSA私钥转换成 PKCS8 格式，命令行输入 1pkcs8 -topk8 -inform PEM -in rsa_private_key.pem -outform PEM -nocrypt 回车，key直接显示在窗口中 12345678910111213141516-----BEGIN PRIVATE KEY-----MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBALaGPKpNJmgH6oV3tO19bPty3U52ELXQilxRvcXuIQbqWkteK86FUi4W7eM+eK+ldVuuJt3YVsBeSPh72HIFatdzxqbE5oXq7vyuWUj9fi3ldD3i0obN0v52qKBL6gNQqRThQjbRqaf2uix4BORP5DCALVanQKU4QUaL6Tnsy9MPAgMBAAECgYEApFlc2K+dTIEMP9+Y71tHvWYhNZwD0eKUIyqLKWURIgv0//YslcngRJXq3/qJawceFE5MuucovhBnvi6tp4WPPCk0UA1gsEPYN9CC4M7DFy2NV+thY+PLZ5pv/mcNiO/eNMIVoibQK1luNIyH3bKbCQHofkAyk5Ji8/TEfyVphmkCQQDj8HPXEtSe9RtbCkXyrx0Piq+4kF79+ALQJwREisgJLTtABgrOeWkse03gQHp64LgTJG0BgaBQZwsm++hwttONAkEAzP6GhuelN4zElPSJskWApRjQOCTBKUf/5e6g5WH284SO9tjjL4Kb8OetN4XmOijEcsWk7p6cEugVEnBjT4asCwJAa8fOLrujuEo0FjdkXd25wxiUAJSbpkF4qw5X8UUiU1yE8MAqqfk05yii6U/z2liaEcselCDEOmCPIG7rOSjqHQJBALuz/6h9aYog6kveUksbWv1RaC9QcFKFa+q1gzwmZMJ8SY/77qKtPG7tJG2nvLTaaW8STMB2GUEyo0DcCgNitBsCQCbNHgqw/cE//p/qLEuZgLZRBM6xOrsuLYU7ODXc3xL9H48l2iGt3mSnjLkEuW+OjaLMNKRLIujc/0AMhDYfL3w=-----END PRIVATE KEY----- –后续持续更新–]]></content>
      <categories>
        <category>openssl</category>
      </categories>
      <tags>
        <tag>openssl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阿里云之云盾]]></title>
    <url>%2Fposts%2F24ecca15.html</url>
    <content type="text"><![CDATA[阿里云盾介绍为响应2018年6月《中华人民共和国网络安全法》政策的正式实施，提高全民网络安全意识。 阿里云盾功能1、网络防护 网络防护:默认开通，可升级至DDoSa高防IP，主要面向产品 ECS、SLB。监测方式：时实。 2、提醒功能 默认开通，主要面向产品：ECS。监测方式：实时。内容包括：安全规则删除，异地登录，暴力破解，云资源的创建删除提醒。提醒方式：短信、邮件、旺旺（持续更新要看文档）。 3、安全体检 默认不开通，内容包括：WEB漏洞监测，系统漏洞监测，网页挂码监测等。 阿里云盾特点1、免费开通（DDoS基础防护） •无需购买昂贵设备 •无需专业安全团队 •拥有ECS即可免费开通云盾服务 2、简单易用（WEB菜单式选择） 3、专业团队 •完善的监控体系和安全团队，20年安全经验 常见网络攻击类 网络防护_DDoS攻击防护DDoS攻击是什么DDoS攻击：分布式拒绝服务攻击。 DDoS攻击目的：让既定目标，无法提供正常服务。防御难度很大。 DDoS防护功能： 攻击流量的发现，牵引和自动处理 有效抵御基于网络层、传输层及应用层的DDoS攻击。包括但不限于：SYN Flood / UDP Flood / ICMP Flood /ACK Flood/DNS Query Flood / NTP Reply Flood,但不支持防护CC攻击。 攻击分析全自动监测。精准识别攻击，受到该攻击不会影响用户访问速度，妙级开启防护，基础DDoS防护免费（ECS、SLB、EIP、NAT）。 可管理。自动进行异常流量抓包，支持攻击事件、攻击流量的管理统计。 DDoS攻击防护原理 主机防护_安骑士安骑士架构及功能 安骑士特点1、轻量化资源占用 普通状态：安骑士插件占用约1%CPU及50MB内存 峰值状态：安骑士插件占用不超过10%CPU和80MB内存，如果占用资源超过峰值，插件停止工作。 2、实时告警 控制台集中管控，短信实时报警黑客攻击行为及高危漏洞风险。 3、支持非阿里云服务器 腾讯云、青云、AWS、UCloud Web防护—Web应用防火墙（WAF）应用防火墙（WAF）是什么应用防火墙（WAF）功能1、常见Web攻击防护 SQL注入、XSS跨站、Webshell上传、后门隔离保护、命令注入、非法HTTP协议请求、常见Web服务器漏洞攻击、核心文件非授权访问、路径穿越、扫描防护等。 0day补丁定期及时更新。 2、CC恶意攻击防护 对单一来源IP访问频率进行控制。 针对海量慢速请求攻击，根据统计响应码及URL请求分布，异常Referer及User-Agent特征识别，结合网站精准防护规则进行综合性防护。 3、虚拟补丁 在Web应用漏洞补丁发布和修复之前，通过调整Web防护策略实现快速防护。 4、攻击事件管理 支持攻击事件、攻击流量、攻击规模的集中管理统计 应用防火墙（WAF）特点1、配置简单 工作在用户端和网站之间，只需修改DNS记录 2、强大的Web防御功能 内置千条防护规则，每周有规则的新增和优化；Web 0day漏洞补丁修复，24小时内防护，全球同步；专业攻防团队进行漏洞研究；捕获0day漏洞生成防护规则。 3、检测块、防护稳 一毫秒内检测攻击并防护生效，防护无延迟。新的防护规则一分钟内全球同步，全年稳定在线可用。 内容安全—（阿里绿网）内容安全功能 站点监测 OSS违规监测服务 内容监测API 内容安全特点 1、性价比高 节省90%的人力成本，支持妙级返回结果，达到99%以上准确率。 2、接入成本低 一次接入即可提供音视频、图片、文字等形式的内容监测，覆盖恐暴、鉴黄、涉政、广告等风险防范。 3、灵活服务方式 与OSS、ECS等云产品无缝对接，还可通过API方式同用户审核系统集成。]]></content>
      <categories>
        <category>阿里云</category>
      </categories>
      <tags>
        <tag>阿里云</tag>
        <tag>云盾</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阿里云之SLB]]></title>
    <url>%2Fposts%2Fb0f46966.html</url>
    <content type="text"><![CDATA[SLB的由来互联网应用随着业务量的发展、访问量和数据流量的不断增长，单一的服务器设备已经无法承担。 SLB的定义将前台执行的任务分摊到后台多台较低配置的服务器处理，然后返回结果给客户。 传统的SLB在客户端和服务器之间添加负载均衡硬件设备。 好处：1、扩展了网络设备和服务器的带宽，增加了吞吐量。2、增强了网络数据处理能力。3、提高了网络灵活性和可用性。 劣势：1、设备价格昂贵。2、达到上限需继续购买硬。 阿里弹性负载均衡SLB弹性负载均衡定义基于软件的负载均衡SLB解决方案。是对多台服务器进行的流量分发的一种负载均衡。 弹性负载均衡特点1、高可用性（全冗余的设计，消除了单点故障，支持同城容灾；搭配DNS的话可以实现跨地域容灾，可用性高达99.95%；在流量波动的情况下，不中断对外服务。） 2、低成本（同传统负载均衡系统高投入相比投入下降60%，且不需要运维；在私网类型网络中免费使用。） 3、高安全性（结合云盾防DDoS系统。） 弹性负载均衡应用场景—&gt;适合做应用程序的流量入口 SLB负载均衡，横向扩展的应用系统服务能力，适用于App Server 服务器Server。当部分ESC宕机后，应用系统能继续工作。 ESC，(阿里云后端服务器)可运行linux或Windows Server,(无状态无数据) Apache+Web应用，可水平扩展。 OSS，(对象存储) RDS,（数据库应用） 举例： 浙江政务服务网 学信网 ## 弹性SLB用途 1、流量分发扩展应用系统对外服务能力，通过消除单点障碍提升应用系统可用性。 2、SLB可以通过设置虚拟地址，将同一地域的多台ESC资源虚拟成一个高性能，高可用的资源地。（规则检查，按规则分发） 3、SLB检查ECS资源池中的ECS健康状况，能自动隔离异常ECS，解决单点故障，提高服务能力。 4、具备HTTP与TCP抗DDos攻击能力。（阿里云开启SLB实例服务的同时默认开启云盾服务） 5、SLB是ESC面向多机方案的一项配套服务，需要搭配ESC来使用。 弹性SLB容灾1、本地容灾 2、同城容灾（通过DNS轮询） 3、跨地域容灾（通过DNS轮询） 弹性SLB的功能架构 弹性SLB的主要功能功能一：提供四层（TCP/UDP协议）和七层（HTTP/HTTPS协议）的均衡负载。 功能二：对后端ECS进行健康检查，自动屏蔽异常状态的ECS，待该ECS恢复正常后自动解除屏蔽。 功能三：提供会话保持功能，在Session的生命周期内，将同一客户端的请求转发到同一ECS上。 功能四：提供轮询、加权轮询（WRR）、加权最小连接数（WLC）3种转发方式。 轮询：依次将请求发送到后端ECS上。 加权轮询：为后端的ECS设置权重，权重越高被分发的几率越大。 加权最小连接数：在后端ECS权重相同的情况下，将请求分发到当前连接数最小的ECS上。 功能五：针对HTTP协议，提供统一的证书管理服务，解密处理在SLB实例上，降低后端ECS的CPU开销。 功能六：支持公网或私网类型的负载均衡。(私网类型免费试用)。 功能七：带宽控制，支持根据监听设置其对应服务所达到的带宽峰值。 功能八：安全防护，结合云盾，可提供5G以下防DDoS攻击能力。 功能九：容灾，支持同一地域跨可用区的容灾，结合DNS轮询支持跨地域容灾。 功能十：提供控制台，API、SDK三种控制方式。 弹性SLB使用开通SLB之前，需要考虑的问题 1、ESC部署在什么区域？ 按照用户所在位置就近选择区域，来提升用户访问速率。 2、需要多少台后端服务器？ 根据实际业务需求申请并部署。 3、采用什么样的协议进行SLB转发？ 根据应用系统使用的协议选择四层或七层协议。 4、SLB是公网还是内网服务？ 根据SLB的用途进行选择。 5、是否需要域名？ 需要就提前准备域名。 选择离用户最近节点的SLB服务，配置实例后才可使用。默认按量付费的实例为60个。 弹性SLB服务监听设置1、七层网络(HTTP)监听配置——适用场景为:SLB使用HTTP或者HTTPs协议的负载均衡。（会话保持基于COOKIE） 2、七层网络(HTTPs)监听配置 比HTTP多了一个证书的服务。（会话保持基于COOKIE） 3、四层网络(TCP)监听配置——适用场景为:SLB使用TCP协议的负载均衡。（会话保持基于源地址） 监听配置的限制 负载均衡数量50个/实例 每个用户上传证书的数量小于等于100个 如何选择监听协议 弹性SLB服务管理后端服务器主备服务器组： 主机正常，流量往主机走；主机宕机，流量往备机走。 备机不进行健康检查，所以主机健康检查失败，系统将流量直接切到备机上，主机健康检查恢复正常后流量重新切回主机。 一个主备服务器组只允许添加两个ECS实例，一个作为主机，一个作为备机，主备服务器组只支持四层监听。 虚拟服务器组： 当需要将不同的请求转发到不同的后端服务器上时，或需要通过域名或URL进行请求转发，可以选择虚拟服务器组。 如设置了虚拟服务器组，默认在SLB实例维度末端添加的后端服务器不再接受请求。 权值设置：最高为100，最低为0，权值越高轮询概率越大。 弹性SLB证书管理1、SLB证书只支持PEM格式的证书，在上传证书之前需确保证书、证书链和私钥符合格式要求，其中私钥是加密存储的。 2、自建证书可以通过OpenSSL生成。 3、证书管理是地域及资源 4、SLB协议前端口选择HTTPs协议，端口选择443；后端选择HTTP，端口选择80。 5、SLB支持管理100个证书用户。 服务器证书（单项认证的证书）、CA证书（双向认证的证书） 弹性SLB的API通过向负载均衡API服务端地址发送HTTP GET请求，并按照接口说明在请求中加入相应请求参数来完成的；根据请求的处理情况，系统会返回处理结果。 请求的结构： 服务地址：slb.aliyuncs.com 通信协议：支持HTTP/HTTPS,推荐HTTPS 请求方式：支持HTTP GET方法发送请求，这种方式下请求参数需要包含在请求URL中。 字符编码：请求及返回结果采用UTF-8字符集进行编码。 弹性SLB的API-LoadBalancer相关API 弹性SLB的API-Listener相关API 弹性SLB的API-BackendServer相关API 以上这些均可在阿里云API官网 查看和调用。 SLB相关思考题题目1： SLB连接1台ECS服务器，这种情况下如何将任务进行流量分发？ 答： 初始配置ECS时默认网络是固定带宽的，(例如初始创建5M带宽)随着业务的发展，继续升级带宽会造成浪费。阿里云支持续费降配方式去修改网络计费方式。但是需要等到下个计费周期，在这种的情况下最简单最快的方法就是开通SLB，通过SLB来实现带宽的扩展。SLB默认采用按流量计费的方式，SLB作为前段服务，后端连接ESC即可，这样做还方便后期增加ESC来实现多台ESC的负载。 如果你的业务场景（网站平时流量不高，基本带宽够用，但在明显的峰谷时却不能流畅访问）不妨考虑在前端增加一个SLB。 题目2： 后端20台ECS服务器，有一台的ECS权值设置成0，会发生什么？ 答： 由于一台ECS服务器权值被设置成0，会导致SLB健康检查异常 由于一台ECS服务器权值被设置成0，SLB不会将新的连接转发给该ECS 题目3： 设置ECS的权重为0和移除ECS的区别 答: ECS权重设置为0时，ECS已建立的长连接依然存在。 设置ECS权重值为0只适用于主动运维，如部署应用或升级ECS。]]></content>
      <categories>
        <category>阿里云</category>
      </categories>
      <tags>
        <tag>阿里云</tag>
        <tag>SLB</tag>
        <tag>负载均衡</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Discord使用不需翻墙]]></title>
    <url>%2Fposts%2F615f044c.html</url>
    <content type="text"><![CDATA[Discord是一款非常好的语音聊天软件，相较国内的QT，YY等聊天软件 纯净、无广告，但就是这样的良心软件在国内被墙，无法使用。 解决的办法是：在C:\Windows\System32\drivers\etc 修改Hosts文件权限后， 在里面添加相关设置 123456789104.16.58.5 discordapp.com 104.16.58.5 support.discordapp.com 104.16.58.5 dl.discordapp.net 104.16.58.5 gateway.discord.gg 104.16.58.5 status.discordapp.com 104.16.58.5 cdn.discordapp.com 104.16.58.5 media.discordapp.net 104.16.58.5 images-ext-1.discordapp.net 104.16.58.5 images-ext-2.discordapp.net 保存后，Discord既可使用。]]></content>
      <categories>
        <category>Discord</category>
      </categories>
      <tags>
        <tag>Discord</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用myQR生成二维码]]></title>
    <url>%2Fposts%2Fe6266321.html</url>
    <content type="text"><![CDATA[安装相关环境安装Python这一环节可以自行百度。 安装MyQR库MyQR是Python的一个子模块 打开命令行CTRL + R,输入cmd，回车 输入python会出现相关的信息,表明有python环境，再输入exit()退出环境 输入 pip3 install MyQR安装MyQR模块，等待下载安装完成,成功安装会显示succeessful。（我这边之前已安装完成） 输入pip list在安装的清单中可以找到此模块 MyQR库安装完成。 利用myQR生成二维码编译器设置我这里使用vs code 编译器 搜索Python,安装该插件 搜索 language，添加语言插件包 查看—命令面板—运行Python 生成无图片二维码在电脑桌面新建一个zmj2008文件夹，使用vs code打开该文件夹，并在文件夹下新建MyDB.py文件。右侧导航栏显示如下： 输入from MyQR import myqr 载入模块 输入myqr.run(&quot;www.shiyanlou.com&quot;)在本地C:\Users\Mayjor_Zmj会有生成一个二维码图片 qrcode.png 生成动态图片二维码将选好的动态图片timg.gif放在zmj2008文件夹下，输入以下代码 123456789101112from MyQR import myqrimport osversion, level, qr_name = myqr.run( words='https://www.iamzmj.top', # 可以是字符串，也可以是网址(前面要加http(s)://) version=1, # 设置容错率为最高 level='H', # 控制纠错水平，范围是L、M、Q、H，从左到右依次升高 picture='timg.gif', # 将二维码和图片合成 colorized=True, # 彩色二维码 contrast=1.0, # 用来调节图片亮度 save_name='55.gif', # 保存文件的名字，格式可以是jpg,png,bmp,gif save_dir=os.getcwd() #控制位置 ) 123456789101112from MyQR import myqrimport osversion, level, qr_name = myqr.run( words='https://www.iamzmj.top', version=1, level='H', picture='timg.gif', colorized=True, contrast=1.0, save_name='55.gif', save_dir=os.getcwd() ) 调试代码，发现zmj2008文件夹下生成55.gif。 静态图片二维码设置和动态图片设置一样。]]></content>
      <categories>
        <category>myQR</category>
      </categories>
      <tags>
        <tag>myQR</tag>
        <tag>二维码</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下Git多账号同一电脑多个ssh-key的管理]]></title>
    <url>%2Fposts%2F1526b943.html</url>
    <content type="text"><![CDATA[有时候在电脑上，需要同时管理多个代码托管平台，在推送不同平台时，需要使用不同 的SSH进行链接，如何进行多个SSH的创建和管理一时间让我有些头痛。查询百度后，解决办法大致如下： 本次要在一台电脑上同时管理Github和码云，由于是多SSH管理，需要在局部环境下创建2个SSH。 云码注册的邮箱是：zhanminie@hotmail.com Github注册的邮箱是：zhanminjie@aliyun.com 管理员模式打开Git Bash，输入git config --global --list 查看自己电脑主机是否对Git进行了相关的全局设置: 1git config --global --list 如果存在，先删除全局变量，例如： git config --global --unset user.name &quot;13588245977&quot; git config --global --unset user.email &quot;zhanminjie@hotmail.com&quot; 12git config --global --unset user.name "13588245977"git config --global --unset user.email "zhanminjie@hotmail.com" 新建SSH 执行命令 ssh-keygen -t rsa -C zhanminjie@aliyun.com创建github对应的sshkey，将其命名为id_rsa 执行命令 ssh-keygen -t rsa -C zhanminjie@hotmail.com创建云码对应的sshkey，将其命名为id_rsa_gitee 创建成功示意图如下： 123456789101112131415161718192021C:\Users\Mayjor_Zmj&gt;ssh-keygen -t rsa -C zhanminjie@hotmail.comGenerating public/private rsa key pair.Enter file in which to save the key (C:\Users\Mayjor_Zmj/.ssh/id_rsa): id_rsa_giteeEnter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in id_rsa_github.Your public key has been saved in id_rsa_github.pub.The key fingerprint is:SHA256:TmR4BCxLZX1JVRB/dtI9B1JVL18Y+PiEruvFs/MOUSE zhanminjie@hotmail.comThe key's randomart image is:+---[RSA 2048]----+| o+o...oE**.+|| o..o. o .+ *o|| . o. +. +*.X|| . + o.o*=|| S ..o .|| o .... || . .= || ...+ || .o..+o |+----[SHA256]-----+ 此时在系统sysem32中会将生成id_ rsa,id_rsa.pub(公钥); id_rsa_gitee,id_rsa_gitee.pub(公钥) 四个文件，将其放到C:\Users\Mayjor_Zmj\ .ssh 文件夹下 把云码和github对应的公钥绑定到对应网站到服务器 将新建SS加入 SSH agent当中 ssh-agent bashssh-add ~/.ssh/github_id_rsassh-add ~/.ssh/gitlab_id_rsa_gitee 在C:\Users\Mayjor_Zmj\ .ssh 文件夹下新建config.txt文本文件对两SSH进行配置 在.ssh目录下创建config文本文件并完成相关配置(最核心的地方) 每个账号单独配置一个Host，每个Host要取一个别名，每个Host主要配置HostName和IdentityFile两个属性即可 Host的名字可以取为自己喜欢的名字，不过这个会影响git相关命令，例如：Host mygithub 这样定义的话，命令如下，即git@后面紧跟的名字改为mygithubgit clone git@github:PopFisher/AndroidRotateAnim.git HostName 这个是真实的域名地址IdentityFile 这里是id_rsa的地址PreferredAuthentications 配置登录时用什么权限认证–可设为publickey,password publickey,keyboard-interactive等User 配置使用用户名 12345678910111213# githubHost github.comHostName github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsaUser zmj2008 # smartgitHost gitee.comHostName gitee.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsa_giteeUser 13588245977 设置玩完成后，输入ssh -T git@github.com/ssh -T git@gitee.com进行测试，查看配置是否成功。 测试1成功： 123Mayjor_Zmj@DESKTOP-CVQMHBH MINGW64 ~/Desktop$ ssh -T git@github.comHi zmj2008! You've successfully authenticated, but GitHub does not provide shell access #出现该句表示成功 测试2未成功： 123Mayjor_Zmj@DESKTOP-CVQMHBH MINGW64 ~/Desktop$ ssh -T git@gitee.comgit@gitee.com: Permission denied (publickey). #测试未成功，未有权限 若发生上述情况，处理的解决办法是先输入eval ssh-agent -s 再输入ssh-add ~/.ssh/id_rsa_github就解决了。 1234567Mayjor_Zmj@DESKTOP-CVQMHBH MINGW64 ~/Desktop$ eval `ssh-agent -s`Agent pid 1749Mayjor_Zmj@DESKTOP-CVQMHBH MINGW64 ~/Desktop$ ssh-add ~/.ssh/id_rsa_giteeIdentity added: /c/Users/Mayjor_Zmj/.ssh/id_rsa_gitee(zhanminjie@hotmail.com) 测试2成功： 123Mayjor_Zmj@DESKTOP-CVQMHBH MINGW64 ~/Desktop$ ssh -T git@gitee.comHi zhanminjie! You've successfully authenticated, but GITEE.COM does not provide shell access. 这样两个SSH在局部变量下创建成功。Github和码云既可以分别进行管理了。]]></content>
      <categories>
        <category>ssh-key</category>
      </categories>
      <tags>
        <tag>ssh-key</tag>
        <tag>多账号</tag>
        <tag>Windows</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hugo安装和部署到码云]]></title>
    <url>%2Fposts%2Fd5c577fc.html</url>
    <content type="text"><![CDATA[Hugo是一个用Go编写的静态HTML和CSS网站生成器。它针对速度，易用性和可配置性进行了优化。Hugo获取包含内容和模板的目录，并将它们呈现为完整的HTML网站。 Hugo依赖Markdown文件和元数据的前端内容，您可以从任何目录运行Hugo。这适用于您没有特权帐户的共享主机和其他系统。Hugo在几分之一秒内呈现了一个中等规模的典型网站。一个好的经验法则是每个内容呈现大约1毫秒。Hugo旨在适用于任何类型的网站，包括博客和文档等。 Hugo安装方式1：命令行安装先安装Chocolatey，管理员方式运行cmd.exe，输入 1@"%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command "iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))" &amp;&amp; SET "PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin" 安装hugo，管理员方式运行cmd.exe，输入 1choco install hugo -confirm 方式2：zip安装点击Hugo，选择对应系统（WIN10 64位）最新版—并下载 下载完成后—解压到自己制定文件夹，我这里是（C:\hugo0.56.2）下，该版本为之前已下载。 为Hugo添加环境变量（自行百度就可以添加） 添加完成后，WIN+R打开运行框输入 Hugo version 若显示Hugo Static Site Generator v0.56.2-5F033A7F windows/amd64 BuildDate: 2019-07-30T09:06:05Z说明安装成功。 12345Microsoft Windows [版本 10.0.18950.1000](c) 2019 Microsoft Corporation。保留所有权利。C:\Users\Mayjor_Zmj&gt;hugo versionHugo Static Site Generator v0.56.2-5F033A7F windows/amd64 BuildDate: 2019-07-30T09:06:05Z #表示安装成功 生成站点根目录输入cd c:/hugo0.56.2进入Hugo文件夹 123C:\Users\Mayjor_Zmj&gt;cd c:/hugo0.56.2c:\hugo0.56.2&gt; 新建博客站点blog,输入new site c:/hugo0.56.2/Blog 12345678910111213c:\hugo0.56.2&gt;hugo new site c:/hugo0.56.2/BlogCongratulations! Your new Hugo site is created in c:\hugo0.56.2\Blog. #表示新建成功Just a few more steps and you're ready to go:1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the "hugo new theme &lt;THEMENAME&gt;" command.2. Perhaps you want to add some content. You can add single files with "hugo new &lt;SECTIONNAME&gt;\&lt;FILENAME&gt;.&lt;FORMAT&gt;".3. Start the built-in live server via "hugo server".Visit https://gohugo.io/ for quickstart guide and full documentation. 安装主题选用该hugo-icarus-theme主题 进入themes文件夹，下载主题： 12345678910c:\hugo0.56.2&gt;cd Blogc:\hugo0.56.2\Blog&gt;cd themes #进入该文件夹c:\hugo0.56.2\Blog\themes&gt;git clone https://github.com/digitalcraftsman/hugo-icarus-theme.git #下载主题Cloning into 'hugo-icarus-theme'...remote: Enumerating objects: 1041, done.remote: Total 1041 (delta 0), reused 0 (delta 0), pack-reused 1041Receiving objects: 100% (1041/1041), 2.34 MiB | 5.00 KiB/s, done.Resolving deltas: 100% (670/670), done. 点击进入icarus主题文件夹下的exampleSite文件夹将config.toml的内容复制到Blog根目录下覆盖原有config.toml，修改config.toml头部文件，theme、themesDir的配置，其他的配置可以之后慢慢设置。 回到Blog根目录，输入hugo server 本地运行成功后，在浏览器上输入http://localhost:1313/查看如下： Hugo部署到码云创建SSH码云账号：13588245977 码云密码：zhanminjie@hotmail.com 1ssh-keygen -t rsa -C zhanminjie@hotmail.com 创建云码对应的sshkey，将其命名为id_rsa_gitee 123456789101112131415161718192021C:\Users\Mayjor_Zmj&gt;ssh-keygen -t rsa -C zhanminjie@hotmail.comGenerating public/private rsa key pair.Enter file in which to save the key (C:\Users\Mayjor_Zmj/.ssh/id_rsa): id_rsa_giteeEnter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in id_rsa_github.Your public key has been saved in id_rsa_github.pub.The key fingerprint is:SHA256:TmR4BCxLZX1JVRB/dtI9B1JVL18Y+PiEruvFs/MOUSE zhanminjie@hotmail.comThe key's randomart image is:+---[RSA 2048]----+| o+o...oE**.+|| o..o. o .+ *o|| . o. +. +*.X|| . + o.o*=|| S ..o .|| o .... || . .= || ...+ || .o..+o |+----[SHA256]-----+ 把云码和github对应的公钥绑定到对应网站到服务器 将新建SS加入 SSH agent当中 ssh-agent bash ssh-add ~/.ssh/gitlab_id_rsa_gitee 打开bash here，c测试电脑和平台的链接。 123Mayjor_Zmj@DESKTOP-CVQMHBH MINGW64 ~/Desktop$ ssh -T git@gitee.comHi zhanminjie! You've successfully authenticated, but GITEE.COM does not provide shell access. 码云代码托管平台上新间仓库，仓库名称同项目名称，最后生成的网址就是https://gitee.com/仓库名称.io 开启Page功能 博客根目录上传代码按步骤输入 hugo --theme=even --buildDrafts --baseUrl=“https://zhanminjie_admin.gitee.io” cd public git init git remote add origin https://gitee.com/zhanminjie_admin/zhanminjie_admin.git git add -A git commit -m “first commit” git config --global user.name &quot;13588245977&quot;git config --global user.email &quot;zhanminjie@hotmail.com&quot; git push origin master git pull --rebase origin master #问题是因为github中的README.md文件不在本地代码目录中，可以通过如下命令进行代码合并. git push origin master 12345678910111213141516171819202122hugo --theme=even --buildDrafts --baseUrl=“https://zhanminjie_admin.gitee.io”cd publicgit initgit remote add origin https://gitee.com/zhanminjie_admin/zhanminjie_admin.gitgit add -Agit commit -m “first commit” git config --global user.name "13588245977"git config --global user.email "zhanminjie@hotmail.com"git push origin mastergit pull --rebase origin master #问题是因为github中的README.md文件不在本地代码目录中，可以通过如下命令进行代码合并git push origin master 参考教程： https://baijiahao.baidu.com/s?id=1630800288039248525&amp;wfr=spider&amp;for=pc https://zilongshanren.com/post/move-from-hexo-to-hugo/ https://juejin.im/post/5cefc5c351882520724c7cf5 https://github.com/nusr/blog/blob/master/config.toml]]></content>
      <categories>
        <category>Hugo</category>
      </categories>
      <tags>
        <tag>Hugo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo nest添加标签云]]></title>
    <url>%2Fposts%2F449f6cd5.html</url>
    <content type="text"><![CDATA[引言Hexo是一个快速、简洁且高效的博客框架，能够快速生成静态页面，只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站，支持 GitHub Flavored Markdown 的所有功能，同时还拥有强大的插件系统。 这次主要介绍 NexT 7.2.0 下添加标签云hexo-tag-cloud设置。 添加标签云设置进入到站点的根目录，在 package.json 中添加依赖: &quot;hexo-tag-cloud&quot;: &quot;2.0.*&quot; 使用命令行进行安装插件 1npm install hexo-tag-cloud@^2.0.* --save 在主题文件夹找到文件 theme/next/layout/_macro/sidebar.swig, 然后添加如下代码： 123456789101112&#123;% if site.tags.length &gt; 1 %&#125;&lt;script type="text/javascript" charset="utf-8" src="/js/tagcloud.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" charset="utf-8" src="/js/tagcanvas.js"&gt;&lt;/script&gt;&lt;div class="widget-wrap"&gt; &lt;h3 class="widget-title"&gt;Tag Cloud&lt;/h3&gt; &lt;div id="myCanvasContainer" class="widget tagcloud"&gt; &lt;canvas width="250" height="250" id="resCanvas" style="width=100%"&gt; &#123;&#123; list_tags() &#125;&#125; &lt;/canvas&gt; &lt;/div&gt;&lt;/div&gt;&#123;% endif %&#125; 添加位置于： 123456789101112131415161718192021222324252627 &#123;% if theme.back2top.enable and theme.back2top.sidebar %&#125; &lt;div class="back-to-top"&gt; &lt;i class="fa fa-arrow-up"&gt;&lt;/i&gt; &#123;% if theme.back2top.scrollpercent %&#125; &lt;span id="scrollpercent"&gt;&lt;span&gt;0&lt;/span&gt;%&lt;/span&gt; &#123;% endif %&#125; &lt;/div&gt; &#123;% endif %&#125; #在该处代码下面添加 &#123;% if site.tags.length &gt; 1 %&#125; &lt;script type="text/javascript" charset="utf-8" src="/js/tagcloud.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" charset="utf-8" src="/js/tagcanvas.js"&gt;&lt;/script&gt; &lt;div class="widget-wrap"&gt; &lt;div id="myCanvasContainer" class="widget tagcloud"&gt; &lt;canvas width="200" height="250" id="resCanvas" style="width=100%"&gt; &#123;&#123; list_tags() &#125;&#125; &lt;/canvas&gt; &lt;/div&gt; &lt;/div&gt; &#123;% endif %&#125; &lt;/div&gt; #在该处代码上面添加 &lt;/aside&gt; &#123;% if theme.sidebar.dimmer %&#125; &lt;div id="sidebar-dimmer"&gt;&lt;/div&gt; &#123;% endif %&#125; &#123;% endmacro %&#125; 在本地下预览效果 hexo clean &amp;&amp; hexo g &amp;&amp; hexo s]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>nest</tag>
        <tag>tagcloud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[qBittorrent添加Tracker提速]]></title>
    <url>%2Fposts%2Fc69d7f4a.html</url>
    <content type="text"><![CDATA[前言种子和磁力链接是现在使用最为广泛的资源下载形式了，但是资源找到了，如何顺畅地下载下来也是个问题。qBittorrent 是一款开源免费的种子和磁力链接下载工具，支持 Windows、Mac 和 Linux，且功能非常强大。由于国内大部分用户并没有公网 IP，直接使用可能会有个很现实的问题——下载没速度！本文介绍如何提高qBittorrent 下载速度。 添加Tracker以提速qBittorrent -&gt; 工具 -&gt; 选项 -&gt; BitTorrent, 拉到最下面-&gt;勾选 “自动添加以下 trackers 到新的 torrents:” 并添加Tracker。 Tracker1. Tracer2. Tracker3. 安装插件 点击检查更新，自动安装完成插件。]]></content>
      <categories>
        <category>qBittorrent</category>
      </categories>
      <tags>
        <tag>qBittorrent</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[群发工资条-Word邮件合并功能]]></title>
    <url>%2Fposts%2Fe98d8324.html</url>
    <content type="text"><![CDATA[邮件合并Word中文字内容（为邮件发送内容） 群发工资条-Word邮件合并功能 Excel中的数据，实际数据中邮箱各不相同。 鼠标放置在尊敬的后面，点击开始邮件合并——邮件合并分布向导 选择电子邮件——下一步 开始文档 选择使用当前文档——下一步：选择收件人 选择预览找到Excel数据表格 确定使用表格——下一步：攥写电子邮件 选择其它项目，在Word文档对应位置插入 表格对应表头 选择下一步：预览电子邮件 未有问题选择发送邮件，（打开Outlook后）。 邮件发送成功]]></content>
      <categories>
        <category>Word</category>
      </categories>
      <tags>
        <tag>Word</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo nest添加视频]]></title>
    <url>%2Fposts%2F16f30d64.html</url>
    <content type="text"><![CDATA[引言Hexo是一个快速、简洁且高效的博客框架，能够快速生成静态页面，只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站，支持 GitHub Flavored Markdown 的所有功能，同时还拥有强大的插件系统。 为了增加博客站点的趣味性，这次主要介绍 NexT 7.2.0 中添加视频。 添加B站视频视频页面点击分享—复制嵌入式代码，复制到文章页面内, 再在&lt;iframe&gt;``&lt;/iframe&gt;头部添加width``height视频尺寸参数代码设置即可。 1&lt;iframe width="100%" height="500" src="//player.bilibili.com/player.html?aid=63296007&amp;cid=109923855&amp;page=1" scrolling="no" border="0"frameborder="no" framespacing="0" allowfullscreen="true"&gt; &lt;/iframe&gt; 视频效果如下： #]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>nest</tag>
        <tag>视频</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[手机如何登陆Google应用商店]]></title>
    <url>%2Fposts%2F34057798.html</url>
    <content type="text"><![CDATA[引言因为谷歌在国内的退出，导致很多人的Android手机上无法安装上Google play store。那是否有什么简单的方法能让手机安装上Google play store 呢？方法还是有的，大致介绍如下。 安装在PC机的安卓模拟器上安装Google空间。 雷电安卓模拟器 Google空间 雷电模拟器上安装Google空间 添加Google账户 账户添加绑定后既可以访问Googleplay应用商店。在自己的手机上也是如此的操作。 相对繁琐的是谷歌账号注册需科学上网，这里分享一个科学上网软件。 是不是发现原来访问Google play 应用商店是一件非常简单的事情！]]></content>
      <categories>
        <category>GooglePlay</category>
      </categories>
      <tags>
        <tag>GooglePlay</tag>
        <tag>手机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PicUploader图床工具设置]]></title>
    <url>%2Fposts%2Fcb6668a4.html</url>
    <content type="text"><![CDATA[操作系统环境：Win10 需提前安装 git 然后创建文件夹，使用git命令下载 PicUploader 源代码 1git clone https://github.com/xiebruce/PicUploader.git 安装 phpstudy2018 于E盘（自选），把整个 PicUploader文件夹放置于E:\phpStudy\PHPTutorial\WWW目录下，进入E:\phpStudy\PHPTutorial\Apache\conf目录，找到vhosts.conf文件并打开，在原有代码下空一行，添加如下代码： 1234567&lt;VirtualHost *:80&gt; DocumentRoot "E:\phpStudy\PHPTutorial\WWW\PicUploader" ServerName api.picuploader.com DirectoryIndex dashboard.php ErrorLog "logs/api.picuploader.com-error.log" CustomLog "logs/api.picuploader.com-access.log" common&lt;/VirtualHost&gt; 打开phpStudy,切换至最新版php+Apache，重启后运行状态里Apache亮绿灯即可。 并保证PHP扩展中已开启php_fileinfo、php_curl、php_gd2、php_exif四个扩展。要使用网页版查看记录还需要开启php_pdo_sqlite和php_pdo_mysql 找到C:\Windows\System32\drivers\etc中的hosts文件，添加一条语句并保存。 1127.0.0.1 api.picuploader.com 打开浏览器，并输入http://api.picuploader.com如果一切正常可进入如下PicUploader Web界面 1http://api.picuploader.com 未完待续 参考博客：https://www.xiebruce.top/17.html]]></content>
      <categories>
        <category>PicUploader</category>
      </categories>
      <tags>
        <tag>PicUploader</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo nest添加Live2d看板动画效果]]></title>
    <url>%2Fposts%2F896b141d.html</url>
    <content type="text"><![CDATA[引言Hexo是一个快速、简洁且高效的博客框架，能够快速生成静态页面，只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站，支持 GitHub Flavored Markdown 的所有功能，同时还拥有强大的插件系统。 为增添页面趣味性，这次主要介绍 NesT 7.2.0 添加Live2d看板动画效果。 添加Live2d看板动画看板动画 站点根目录下载插件，安装成功后，你可以在你的站点根文件夹/node_modules/底下找到live2d-widget这个文件夹。 1npm install --save hexo-helper-live2d 安装你想要的live2d动画人物，这里选择 live2d-widget-model-haruto 1npm install live2d-widget-model-haruto 在站点根目录下_config.yml添加如下代码 123456789101112131415161718192021222324#live2d看板动画live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false log: false model: use: live2d-widget-model-haruto display: superSample: 2 width: 150 height: 300 position: right hOffset: 100 vOffset: -100 mobile: show: true scale: 0.5react: opacityDefault: 0.7 opacityOnHover: 0.2 hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 即可本地预览效果。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>nest</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo nest添加底部运行时间设置]]></title>
    <url>%2Fposts%2Fe1575a4c.html</url>
    <content type="text"><![CDATA[引言Hexo是一个快速、简洁且高效的博客框架，能够快速生成静态页面，只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站，支持 GitHub Flavored Markdown 的所有功能，同时还拥有强大的插件系统。 这次主要介绍 NexT 7.2.0 主题底部添加运行时间设置。 底部添加运行时间找到 \themes\next\layout\_partials\下面的footer.swig文件，底部添加以下代码： 12345678910111213141516171819&lt;div class="run_time" style=" text-align:center;"&gt; &lt;span id="timeDate"&gt;载入天数...&lt;/span&gt;&lt;span id="times"&gt;载入时分秒...&lt;/span&gt; &lt;script&gt; var now = new Date(); function createtime() &#123; var grt= new Date("07/23/2019 10:00:00");//此处修改你的建站时间或者网站上线时间 now.setTime(now.getTime()+250); days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days); hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours); if(String(hnum).length ==1 )&#123;hnum = "0" + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum); mnum = Math.floor(minutes); if(String(mnum).length ==1 )&#123;mnum = "0" + mnum;&#125; seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); snum = Math.round(seconds); if(String(snum).length ==1 )&#123;snum = "0" + snum;&#125; document.getElementById("timeDate").innerHTML = "(*^_^*)本站已运行 "+dnum+" 天 "; #可自行修改中文 document.getElementById("times").innerHTML = hnum + " 小时 " + mnum + " 分 " + snum + " 秒"; &#125; setInterval("createtime()",250); &lt;/script&gt;&lt;/div&gt; hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 即可本地预览效果。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>nest</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo nest添加雪花飘落效果]]></title>
    <url>%2Fposts%2Fc5826913.html</url>
    <content type="text"><![CDATA[引言Hexo是一个快速、简洁且高效的博客框架，能够快速生成静态页面，只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站，支持 GitHub Flavored Markdown 的所有功能，同时还拥有强大的插件系统。 为了增加博客站点的趣味性，这次主要介绍 NexT 7.2.0 在PC端下添加雪花飘落的效果。 添加雪花飘落效果在\themes\next\source\js\src目录下新建一个snow.js文件，复制粘贴一下代码。 样式一是六边形的雪片，样式二是小圆点雪花，选择自己喜欢的样式即可。 123456789101112131415161718192021222324252627282930313233343536373839404142/*样式一*/(function($)&#123; $.fn.snow = function(options)&#123; var $flake = $('&lt;div id="snowbox" /&gt;').css(&#123;'position': 'absolute','z-index':'9999', 'top': '-50px'&#125;).html('&amp;#10052;'), documentHeight = $(document).height(), documentWidth = $(document).width(), defaults = &#123; minSize : 10, maxSize : 20, newOn : 1000, flakeColor : "#AFDAEF" /* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */ &#125;, options = $.extend(&#123;&#125;, defaults, options); var interval= setInterval( function()&#123; var startPositionLeft = Math.random() * documentWidth - 100, startOpacity = 0.5 + Math.random(), sizeFlake = options.minSize + Math.random() * options.maxSize, endPositionTop = documentHeight - 200, endPositionLeft = startPositionLeft - 500 + Math.random() * 500, durationFall = documentHeight * 10 + Math.random() * 5000; $flake.clone().appendTo('body').css(&#123; left: startPositionLeft, opacity: startOpacity, 'font-size': sizeFlake, color: options.flakeColor &#125;).animate(&#123; top: endPositionTop, left: endPositionLeft, opacity: 0.2 &#125;,durationFall,'linear',function()&#123; $(this).remove() &#125;); &#125;, options.newOn); &#125;;&#125;)(jQuery);$(function()&#123; $.fn.snow(&#123; minSize: 5, /* 定义雪花最小尺寸 */ maxSize: 50,/* 定义雪花最大尺寸 */ newOn: 300 /* 定义密集程度，数字越小越密集 */ &#125;);&#125;); 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128/*样式二*//* 控制下雪 */function snowFall(snow) &#123; /* 可配置属性 */ snow = snow || &#123;&#125;; this.maxFlake = snow.maxFlake || 200; /* 最多片数 */ this.flakeSize = snow.flakeSize || 10; /* 雪花形状 */ this.fallSpeed = snow.fallSpeed || 1; /* 坠落速度 */&#125;/* 兼容写法 */requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame || function(callback) &#123; setTimeout(callback, 1000 / 60); &#125;;cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame || window.oCancelAnimationFrame;/* 开始下雪 */snowFall.prototype.start = function()&#123; /* 创建画布 */ snowCanvas.apply(this); /* 创建雪花形状 */ createFlakes.apply(this); /* 画雪 */ drawSnow.apply(this)&#125;/* 创建画布 */function snowCanvas() &#123; /* 添加Dom结点 */ var snowcanvas = document.createElement("canvas"); snowcanvas.id = "snowfall"; snowcanvas.width = window.innerWidth; snowcanvas.height = document.body.clientHeight; snowcanvas.setAttribute("style", "position:absolute; top: 0; left: 0; z-index: 1; pointer-events: none;"); document.getElementsByTagName("body")[0].appendChild(snowcanvas); this.canvas = snowcanvas; this.ctx = snowcanvas.getContext("2d"); /* 窗口大小改变的处理 */ window.onresize = function() &#123; snowcanvas.width = window.innerWidth; /* snowcanvas.height = window.innerHeight */ &#125;&#125;/* 雪运动对象 */function flakeMove(canvasWidth, canvasHeight, flakeSize, fallSpeed) &#123; this.x = Math.floor(Math.random() * canvasWidth); /* x坐标 */ this.y = Math.floor(Math.random() * canvasHeight); /* y坐标 */ this.size = Math.random() * flakeSize + 2; /* 形状 */ this.maxSize = flakeSize; /* 最大形状 */ this.speed = Math.random() * 1 + fallSpeed; /* 坠落速度 */ this.fallSpeed = fallSpeed; /* 坠落速度 */ this.velY = this.speed; /* Y方向速度 */ this.velX = 0; /* X方向速度 */ this.stepSize = Math.random() / 30; /* 步长 */ this.step = 0 /* 步数 */&#125;flakeMove.prototype.update = function() &#123; var x = this.x, y = this.y; /* 左右摆动(余弦) */ this.velX *= 0.98; if (this.velY &lt;= this.speed) &#123; this.velY = this.speed &#125; this.velX += Math.cos(this.step += .05) * this.stepSize; this.y += this.velY; this.x += this.velX; /* 飞出边界的处理 */ if (this.x &gt;= canvas.width || this.x &lt;= 0 || this.y &gt;= canvas.height || this.y &lt;= 0) &#123; this.reset(canvas.width, canvas.height) &#125;&#125;;/* 飞出边界-放置最顶端继续坠落 */flakeMove.prototype.reset = function(width, height) &#123; this.x = Math.floor(Math.random() * width); this.y = 0; this.size = Math.random() * this.maxSize + 2; this.speed = Math.random() * 1 + this.fallSpeed; this.velY = this.speed; this.velX = 0;&#125;;// 渲染雪花-随机形状（此处可修改雪花颜色！！！）flakeMove.prototype.render = function(ctx) &#123; var snowFlake = ctx.createRadialGradient(this.x, this.y, 0, this.x, this.y, this.size); snowFlake.addColorStop(0, "rgba(255, 255, 255, 0.9)"); /* 此处是雪花颜色，默认是白色 */ snowFlake.addColorStop(.5, "rgba(255, 255, 255, 0.5)"); /* 若要改为其他颜色，请自行查 */ snowFlake.addColorStop(1, "rgba(255, 255, 255, 0)"); /* 找16进制的RGB 颜色代码。 */ ctx.save(); ctx.fillStyle = snowFlake; ctx.beginPath(); ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2); ctx.fill(); ctx.restore();&#125;;/* 创建雪花-定义形状 */function createFlakes() &#123; var maxFlake = this.maxFlake, flakes = this.flakes = [], canvas = this.canvas; for (var i = 0; i &lt; maxFlake; i++) &#123; flakes.push(new flakeMove(canvas.width, canvas.height, this.flakeSize, this.fallSpeed)) &#125;&#125;/* 画雪 */function drawSnow() &#123; var maxFlake = this.maxFlake, flakes = this.flakes; ctx = this.ctx, canvas = this.canvas, that = this; /* 清空雪花 */ ctx.clearRect(0, 0, canvas.width, canvas.height); for (var e = 0; e &lt; maxFlake; e++) &#123; flakes[e].update(); flakes[e].render(ctx); &#125; /* 一帧一帧的画 */ this.loop = requestAnimationFrame(function() &#123; drawSnow.apply(that); &#125;);&#125;/* 调用及控制方法 */var snow = new snowFall(&#123;maxFlake:60&#125;);snow.start(); 然后在\themes\next\layout\_layout.swig文件里的&lt;body&gt;&lt;/body&gt;内部进行引用：`` 1234567&lt;!-- 雪花特效 --&gt;&lt;script type="text/javascript"&gt; var windowWidth = $(window).width(); if (windowWidth &gt; 480) &#123; document.write('&lt;script type="text/javascript" src="/js/src/snow.js"&gt;&lt;\/script&gt;'); &#125;&lt;/script&gt; hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 即可本地预览效果。 参考文章: https://blog.csdn.net/stormdony/article/details/86001618]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>nest</tag>
        <tag>雪花</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Win10系统优化2:软件辅助篇]]></title>
    <url>%2Fposts%2Fe177ee84.html</url>
    <content type="text"><![CDATA[引言最近对自己的本基本电脑重新安装了WIN10系统后，在操作系统上选择了参加Windows预览体验计划，直接跳到下一版本并安装了最新的更新。虽然系统已更新到最新，但还是需要对其进行一些必要的优化，才能使自己使用起来更加流畅。 本次介绍系统优化第二步软件辅助优化。 软媒美化大师优化下载软媒美化大师单文件版3.7.0.0 系统外观—桌面设置 软媒设置大师优化下载软媒设置大师单文件版3.7.2.0 系统设置—资源管理器 系统设置—多媒体优化设置 系统设置—错误报告 系统设置—开关机设置 右键菜单—新建菜单 删除无用右键菜单 右键菜单—发送到菜单 删除无用右键菜单 右键菜单—添加右键菜单项目 添加上获得管理员所有权这个功能 DISM++优化下载 DISM++ 启动项管理—关闭开机磁盘检测。关闭开机启动OneDrive 系统优化设置如下 DISM++清理 软媒清理大师清理下载软媒清理大师 一键清理 深度清理 系统瘦身 添加摄像头补丁下载摄像头补丁]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>系统</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Win10系统优化1:手动优化篇]]></title>
    <url>%2Fposts%2F50153a61.html</url>
    <content type="text"><![CDATA[引言最近对自己的本基本电脑重新安装了WIN10系统后，在操作系统上选择了参加Windows预览体验计划，直接跳到下一版本并安装了最新的更新。虽然系统已更新到最新，但还是需要对其进行一些必要的优化，才能使自己使用起来更加流畅。 本次介绍系统优化第一步手动优化。 手动优化—设置优化点击桌面左下角Win图标，点击设置按钮进入设置主界面。 系统设置 点击系统—点击通知和操作—关闭通知 设备设置 点击设备—自动播放—关闭自动播放 点击设备—USB—关闭USB设备提示通知，避免USB电涌问题 网络和Internet设置 点击网络和internet—状态—网络和共享中心—更改高级共享设置——启用共享文件夹/启用无密码共享 点击网络和internet—代理—关闭代理 个性化设置 点击个性化—点击主题—点击右侧桌面图标—勾选图标 点击个性化—点击开始—关闭偶尔在“开始”菜单中显示建议 点击个性化—点击开始—点击选择哪些文件显示在“开始”菜单栏上—除设置全部关闭 点击个性化—点击任务栏—选择设置任务栏已满时合并 点击个性化—点击任务栏—点击打开或关闭系统图标 应用设置 点击应用—点击离线地图—关闭地图更新 点击应用—点击可使用网站打开应用—关闭关联应用 游戏设置 点击游戏—点击游戏栏—关闭游戏视频录制功能 隐私设置 点击隐私—点击常规—关闭常规里的所有内容 点击隐私—诊断和反馈—关闭诊断数据 点击隐私—诊断和反馈—点击活动历史记录 更新和安全设置 点击更新和安全—点击传递优化—关闭传递优化 手动优化—控制面板优化点击控制面版—切换成大图标方便查看 Internet选项设置 点击Internet选项—点击常规—标签页—进行如下设置 点击Internet选项—点击常规—浏览历史记录设置—进行如下设置 点击Internet选项—点击隐私—关闭弹窗阻止程序 点击Internet选项—点击高级—勾选允许运行或按照软件，即使签名无效，避免安装插件时弹出提示框 点击Internet选项—点击高级—取消勾选默认IE浏览器检测 自带防火墙设置 点击Windows Defender防火墙—点击左侧启用或关闭Windows Defender防火墙—关闭防火墙 安全维护设置 点击安全和维护—点击左侧更改用户账户控制设置—关闭用户控制提示 程序和功能设置 点击程序和功能—点击左侧启用或关闭Windows功能—开启SMB1.0服务 电源选项设置 点击电源选项—点击左侧选择电源按钮的功能—点击当前不可用设置—勾选休眠 文件夹选项设置 点击文件夹资源管理器选项—点击查看—勾选以下内容 系统高级设置 点击系统—高级系统设置—高级—性能设置—视觉效果—按个人设置自定义设置 点击系统—高级系统设置—高级—性能设置—高级—虚拟内存设置如下 疑难解答设置 点击疑难解答—点击左侧更改设置—关闭计算机维护，疑难解答，故障排除 手动优化—服务项优化右键桌面我的电脑—点击管理—点击服务和应用程序—点击服务 禁用程序兼容性助手找到Program Compatibility Assistant Service 并禁用，避免弹出程序是否正确安装的提示窗口 禁用超级预读找到SysMain 并禁用，避免弹出程序是否正确安装的提示窗口 手动优化—策略组优化WIN+R 打开运行对话框，输入gpedit.msc，直接运行组策略 启用“关闭加载性能通知”，防止打开IE浏览器状态栏提示关闭加载项来提高浏览器运行速度的提示。启用“自动激活新安装的加载项”，比如迅雷下载加载项等等可自动激活。禁用“打开建议网站”，无用的收藏夹网址建议禁止。 （计算机配置里的设置同用户配置里的设置一样，此处省略） 启用“阻止IE首次运行向导设置” （计算机配置里的设置同用户配置里的设置一样，此处省略） 启用“阻止订阅网页源和网页快讯” （计算机配置里的设置同用户配置里的设置一样，此处省略） 禁用“快速关机优化” 启用“允许管理员忽略设备安装限制策略” 启用“设备驱动程序的代码签名” 手动优化—其它设置设置快速访问栏 关闭磁盘索引设置右键点击C盘—选择属性—常规—设置如下 隐藏小娜，任务视图，人脉回到桌面，取消前面对应的勾选即可。 整理磁贴调整一下开始屏幕，删除自己认为无用的箭头磁贴，按照自己的喜好增加删除调整磁贴既可。]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>系统</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Typora Markdown语法详解]]></title>
    <url>%2Fposts%2F5ff886d0.html</url>
    <content type="text"><![CDATA[[TOC] 行内代码12`这是行内代码``this is inline code` 这是行内代码 this is inline code 新建标题12345# 一级标题 #快捷按键 Ctrl+1## 二级标题 #快捷按键 Ctrl+2### 三级标题 #快捷按键 Ctrl+3#### 四级标题 #快捷按键 Ctrl+4##### 五级标题 #快捷按键 Ctrl+5 一级标题二级标题三级标题四级标题五级标题 改变字体12345*字体倾斜* #快捷按键 Ctrl+I**字体加粗** #快捷按键 Ctrl+B***字体加粗*** #快捷按键 Ctrl+B + Ctrl+I&lt;u&gt;字体加下划线&lt;/u&gt; #快捷按键 Ctrl+U~~删除字体~~ #快捷按键 Alt+Shift+5 字体倾斜 字体加粗 字体倾斜加粗 字体加下划线 删除字体 插入图片123# 图片链接![图片描述](图片路径 "title")![图片描述](图片路径) 插入链接12345678910# 自动链接&lt;https://www.mallai.top&gt;# 参考式链接[标记]:链接地址 "标题"# 只显示文本的超链接[文本](链接地址)# 链接访问: command + 单击 https://http://zhanmuji.lofter.com/ lofter 插入分割綫12***--- 插入代码块1`文本` # 单行 文本 插入引用123456789101112131415161718#连续引用&gt;引用文本1&gt;引用文本2&gt;引用文本3#带空格引用&gt;引用文本1&gt;&gt;引用文本3#嵌套引用*&gt;&gt;&gt;引用文本1&gt;&gt;引用文本2&gt;引用文本3#引用其他元素*&gt;#####引用五级标题&gt;```python```引用代码块 引用文本1 引用文本2 引用文本3 引用文本1 引用文本3 插入有序列表1使用数字和一个英文句点表示有序列表。 注意：英文句点后面一定要有一个空格，起到缩进的作用。 有序列表 有序列表 插入无序列表1使用 *，+，- 表示无序列表。 注意：符号后面一定要有一个空格，起到缩进的作用。 *号生列表 +号產生列表 -号產生列表 插入表格12345678910# 基本格式, -|-|-|默认居左对齐 #快捷方式 Ctrl+T学号|姓名|分数-|-|-| 小明|男|75小红|女|79# 指定表格单元格对齐方式冒号在左边表示左对齐，右边表示有对齐，两边都有表示居中。:-|:-:|-: 学号 姓名 分数 小明 男 75 小红 女 79 插入表情1:表情英文 #例如 :smile 插入注脚1[^注脚名字]:注脚文本 创建Latex数学公式1行间公式: $$公式$$ #快捷方式 Crtl+T 数学符号 1234小写希腊字母: \alpha \theta \pi \beta \phi \lambda \omega \xi \eta \epsilon \delta空格和换行:\quad \\ 12关系运算符:\times = \neq \ne \leq \le \geq \ge &gt; \sim \simeq \subset \subseteq \in \notin \propto 12其他符号:... \dots; ... \cdots \vdots \ddots \forall \exists 指数和下标 12指数: a^&#123;指数项&#125;下标: a_&#123;下标项&#125; 平方根运算 12平方根: \sqrt&#123;开根号项&#125;n次方根: \sqrt[n]&#123;开根号项&#125; 分数运算符 12\frac&#123;分子&#125;&#123;分母&#125;\frac&#123;1&#125;&#123;x&#125; 向量运算 123单个向量: \vec a从A到B向量: \overrightarrow&#123;AB&#125;反向从A到B: \overleftarrow&#123;AB&#125; 水平大括号 1\underbrace&#123;表达式&#125;_&#123;底部数据&#125; --&gt; \underbrace&#123;a + b + \cdots + z&#125;_&#123;26&#125; 水平线 12上水平线: \overline&#123;m+n&#125;下水平线: \underline&#123;m+n&#125; 创建Flow流程图1234创建Flow流程图 ```flow + 回车语法：流程图语法分为两个部分: 前面部分用来定义流程图元素，后面部分用来连接流程图元素，指定流程图的执行走向tag=&gt;type: content:&gt;url 连接元素 连接流程图直接用-&gt;来连接两个元素，几点说明如下： 使用 -&gt; 来连接两个元素 对于condition类型，有yes和no两个分支，如示例中的cond(yes)和cond(no) 每个元素可以制定分支走向，默认向下，也可以用right指向右边，如示例中sub1(right) 1234567891011121314151617st=&gt;start: 开始e=&gt;end: 结束c1=&gt;condition: 条件A? #操作、执行说明c2=&gt;condition: 条件B?c3=&gt;condition: 条件C?io=&gt;inputoutput: 输入输出De1=&gt;operation: mallAI:&gt;https://www.mallai.tope2=&gt;subroutine: 子文件st-&gt;c1(no)-&gt;ec1(yes,right)-&gt;c2c2(no)-&gt;ec2(yes,right)-&gt;c3c3(no)-&gt;ec3(yes,right)-&gt;ioio-&gt;e1e1-&gt;e2e2(left)-&gt;e tag 流程图元素, 在第二段连接元素时会用到。名称可以任意,一般为流程的英文缩写和数字的组合。 type 确定标签类型, =&gt;后面表示类型。由于标签的名称可以任意指定，所以要依赖type来确定标签的类型, 标签的类型有6种: start end operation subroutine condition inputoutput content 流程图文本框中描述内容, :后面表示内容, 中英文均可。特别注意，冒号与文本之间一定要有个空格 标签 描述 url 一个连接，与框框中的文本相绑定，:&gt;后面就是对应的 url 链接，点击文本时可以通过链接跳转到 url 指定页面 创建mermaid流程图1创建: ```mermaid + 回车 声明流程图，可以声明上下结构, 下上结构，左右结构，右左结构 TB - top bottom BT - bottom top RL - right left LR - left right TD - same as TB 1234567891011121314#连接形式A --&gt; B # 箭头A --- B # 无箭头实线A -- text -- B # AB连线中添加注释A --&gt; |text|B # AB连线中添加注释A-.-&gt;B # 虚线箭头A -. text .- B # 添加注释的虚线箭头A ==&gt; B # 加粗箭头A == text ==&gt; B # 加注释加粗的箭头#节点形式graph LR id # 默认为正方形，id为元素内文本 id[text] # id表示流程图元素唯一标识用于连接，text为元素内文本 节点和形状 描述 id 默认为正方形，id为元素内文本 id[text] 正方形 id(text) 圆角正方形 id((text)) 圆形 id&gt;text] 半方框 id{text} 条件判断框 12345678910111213graph LR A[A] --&gt; B(Bib) B --&gt; E&#123;E&#125; E -- hello ---F&#123;F&#125; F --&gt;|yes|M F --&gt;|no|N A --&gt; C((circle)) C --&gt; D&gt;D] D --&gt; |NICE|H(H) H ==&gt; I d --&gt; I f --&gt; d D --&gt; f 创建mermaid时序图1创建: ```mermaid +回车 消息链接样式 1[Actor][Arrow][Actor]:Message text 类型 描述 -&gt; 无箭头实线: Solid line without arrow –&gt; 无箭头虚线: Dotted line without arrow -&gt;&gt; 有箭头实线: Solid line with arrowhead –&gt;&gt; 有箭头虚线: Dotted line with arrowhead -x 实线末端带x: Solid line with a cross at the end (async) –x 虚线末端带x: Dotted line with a cross at the end (async) 123456789sequenceDiagram participant John participant Alice John -&gt;&gt; Alice: hello Alice Alice -&gt;&gt; John: hello John Note right of John: Right Text of John Note left of Alice: Left Text of Alice Note over Alice: Over Text of Alice Note over John: Over Text of John 创建mermaid甘特图1创建: ```mermaid +回车 声明甘特图 12345678910111213gantt # 标题 title 标题 # 时间格式 dateFormat YYYY-MM-DD # 任务模块 section 任务标题1 # 具体任务和时间 task1 :a1, 2014-01-01, 30d task2 :after a1 , 20d section 任务标题2 task1 :2014-01-12 , 12d task2 : 24d 123456789101112131415161718192021222324252627gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d section Documentation Describe gantt syntax :active, a1, after des1, 3d Add gantt diagram to demo page :after a1 , 20h Add another diagram to demo page :doc1, after a1 , 48h section Last section Describe gantt syntax :after doc1, 3d Add gantt diagram to demo page :20h Add another diagram to demo page :48h]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Typora</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown字体颜色编辑]]></title>
    <url>%2Fposts%2Faff15728.html</url>
    <content type="text"><![CDATA[Markdown字体颜色编辑 设置字体 1&lt;font color=red size=6 face=“黑体”&gt;字体颜色&lt;/font&gt; 设置背景颜色 123&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#7FFFD4&gt; 背景颜色 &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 固定图片显示大小 123&lt;img src="https://img-blog.csdn.net/20151129213701642" width=256 height=256 /&gt;&lt;img src="https://img-blog.csdn.net/20151129213701642" width="50%" height="50%" /&gt; 为字体添加颜色 我是黑体字 1&lt;font face="黑体"&gt;我是黑体字&lt;/font&gt; 我是微软雅黑 1&lt;font face="微软雅黑"&gt;我是微软雅黑&lt;/font&gt; 我是华文彩云 1&lt;font face="STCAIYUN"&gt;我是华文彩云&lt;/font&gt; color=#0099ff size=72 face=”黑体” 1&lt;font color=#0099ff size=72 face="黑体"&gt;color=#0099ff size=72 face="黑体"&lt;/font&gt; color=#00ffff 1&lt;font color=#00ffff size=72&gt;color=#00ffff&lt;/font&gt; color=gray 1&lt;font color=gray size=72&gt;color=gray&lt;/font&gt; 跨行表格、表格背景色 我占了三行 方法说明颜色名称颜色 此处实现方法利用 CSDN-markdown 内嵌 html 语言的优势 Hotpink rgb(240, 248, 255) 借助 table, tr, td 等表格标签的 bgcolor 属性实现背景色 AntiqueWhite rgb(255, 192, 203) 颜色列表参考 颜色名十六进制颜色值颜色AliceBlue#F0F8FFrgb(240, 248, 255)AntiqueWhite#FAEBD7rgb(250, 235, 215)Aqua#00FFFFrgb(0, 255, 255)Aquamarine#7FFFD4rgb(127, 255, 212)Azure#F0FFFFrgb(240, 255, 255)Beige#F5F5DCrgb(245, 245, 220)Bisque#FFE4C4rgb(255, 228, 196)Black#000000rgb(0, 0, 0)BlanchedAlmond#FFEBCDrgb(255, 235, 205)Blue#0000FFrgb(0, 0, 255)BlueViolet#8A2BE2rgb(138, 43, 226)Brown#A52A2Argb(165, 42, 42)BurlyWood#DEB887rgb(222, 184, 135)CadetBlue#5F9EA0rgb(95, 158, 160)Chartreuse#7FFF00rgb(127, 255, 0)Chocolate#D2691Ergb(210, 105, 30)Coral#FF7F50rgb(255, 127, 80)CornflowerBlue#6495EDrgb(100, 149, 237)Cornsilk#FFF8DCrgb(255, 248, 220)Crimson#DC143Crgb(220, 20, 60)Cyan#00FFFFrgb(0, 255, 255)DarkBlue#00008Brgb(0, 0, 139)DarkCyan#008B8Brgb(0, 139, 139)DarkGoldenRod#B8860Brgb(184, 134, 11)DarkGray#A9A9A9rgb(169, 169, 169)DarkGreen#006400rgb(0, 100, 0)DarkKhaki#BDB76Brgb(189, 183, 107)DarkMagenta#8B008Brgb(139, 0, 139)DarkOliveGreen#556B2Frgb(85, 107, 47)Darkorange#FF8C00rgb(255, 140, 0)DarkOrchid#9932CCrgb(153, 50, 204)DarkRed#8B0000rgb(139, 0, 0)DarkSalmon#E9967Argb(233, 150, 122)DarkSeaGreen#8FBC8Frgb(143, 188, 143)DarkSlateBlue#483D8Brgb(72, 61, 139)DarkSlateGray#2F4F4Frgb(47, 79, 79)DarkTurquoise#00CED1rgb(0, 206, 209)DarkViolet#9400D3rgb(148, 0, 211)DeepPink#FF1493rgb(255, 20, 147)DeepSkyBlue#00BFFFrgb(0, 191, 255)DimGray#696969rgb(105, 105, 105)DodgerBlue#1E90FFrgb(30, 144, 255)Feldspar#D19275rgb(209, 146, 117)FireBrick#B22222rgb(178, 34, 34)FloralWhite#FFFAF0rgb(255, 250, 240)ForestGreen#228B22rgb(34, 139, 34)Fuchsia#FF00FFrgb(255, 0, 255)Gainsboro#DCDCDCrgb(220, 220, 220)GhostWhite#F8F8FFrgb(248, 248, 255)Gold#FFD700rgb(255, 215, 0)GoldenRod#DAA520rgb(218, 165, 32)Gray#808080rgb(128, 128, 128)Green#008000rgb(0, 128, 0)GreenYellow#ADFF2Frgb(173, 255, 47)HoneyDew#F0FFF0rgb(240, 255, 240)HotPink#FF69B4rgb(255, 105, 180)IndianRed#CD5C5Crgb(205, 92, 92)Indigo#4B0082rgb(75, 0, 130)Ivory#FFFFF0rgb(255, 255, 240)Khaki#F0E68Crgb(240, 230, 140)Lavender#E6E6FArgb(230, 230, 250)LavenderBlush#FFF0F5rgb(255, 240, 245)LawnGreen#7CFC00rgb(124, 252, 0)LemonChiffon#FFFACDrgb(255, 250, 205)LightBlue#ADD8E6rgb(173, 216, 230)LightCoral#F08080rgb(240, 128, 128)LightCyan#E0FFFFrgb(224, 255, 255)LightGoldenRodYellow#FAFAD2rgb(250, 250, 210)LightGrey#D3D3D3rgb(211, 211, 211)LightGreen#90EE90rgb(144, 238, 144)LightPink#FFB6C1rgb(255, 182, 193)LightSalmon#FFA07Argb(255, 160, 122)LightSeaGreen#20B2AArgb(32, 178, 170)LightSkyBlue#87CEFArgb(135, 206, 250)LightSlateBlue#8470FFrgb(132, 112, 255)LightSlateGray#778899rgb(119, 136, 153)LightSteelBlue#B0C4DErgb(176, 196, 222)LightYellow#FFFFE0rgb(255, 255, 224)Lime#00FF00rgb(0, 255, 0)LimeGreen#32CD32rgb(50, 205, 50)Linen#FAF0E6rgb(250, 240, 230)Magenta#FF00FFrgb(255, 0, 255)Maroon#800000rgb(128, 0, 0)MediumAquaMarine#66CDAArgb(102, 205, 170)MediumBlue#0000CDrgb(0, 0, 205)MediumOrchid#BA55D3rgb(186, 85, 211)MediumPurple#9370D8rgb(147, 112, 216)MediumSeaGreen#3CB371rgb(60, 179, 113)MediumSlateBlue#7B68EErgb(123, 104, 238)MediumSpringGreen#00FA9Argb(0, 250, 154)MediumTurquoise#48D1CCrgb(72, 209, 204)MediumVioletRed#C71585rgb(199, 21, 133)MidnightBlue#191970rgb(25, 25, 112)MintCream#F5FFFArgb(245, 255, 250)MistyRose#FFE4E1rgb(255, 228, 225)Moccasin#FFE4B5rgb(255, 228, 181)NavajoWhite#FFDEADrgb(255, 222, 173)Navy#000080rgb(0, 0, 128)OldLace#FDF5E6rgb(253, 245, 230)Olive#808000rgb(128, 128, 0)OliveDrab#6B8E23rgb(107, 142, 35)Orange#FFA500rgb(255, 165, 0)OrangeRed#FF4500rgb(255, 69, 0)Orchid#DA70D6rgb(218, 112, 214)PaleGoldenRod#EEE8AArgb(238, 232, 170)PaleGreen#98FB98rgb(152, 251, 152)PaleTurquoise#AFEEEErgb(175, 238, 238)PaleVioletRed#D87093rgb(216, 112, 147)PapayaWhip#FFEFD5rgb(255, 239, 213)PeachPuff#FFDAB9rgb(255, 218, 185)Peru#CD853Frgb(205, 133, 63)Pink#FFC0CBrgb(255, 192, 203)Plum#DDA0DDrgb(221, 160, 221)PowderBlue#B0E0E6rgb(176, 224, 230)Purple#800080rgb(128, 0, 128)Red#FF0000rgb(255, 0, 0)RosyBrown#BC8F8Frgb(188, 143, 143)RoyalBlue#4169E1rgb(65, 105, 225)SaddleBrown#8B4513rgb(139, 69, 19)Salmon#FA8072rgb(250, 128, 114)SandyBrown#F4A460rgb(244, 164, 96)SeaGreen#2E8B57rgb(46, 139, 87)SeaShell#FFF5EErgb(255, 245, 238)Sienna#A0522Drgb(160, 82, 45)Silver#C0C0C0rgb(192, 192, 192)SkyBlue#87CEEBrgb(135, 206, 235)SlateBlue#6A5ACDrgb(106, 90, 205)SlateGray#708090rgb(112, 128, 144)Snow#FFFAFArgb(255, 250, 250)SpringGreen#00FF7Frgb(0, 255, 127)SteelBlue#4682B4rgb(70, 130, 180)Tan#D2B48Crgb(210, 180, 140)Teal#008080rgb(0, 128, 128)Thistle#D8BFD8rgb(216, 191, 216)Tomato#FF6347rgb(255, 99, 71)Turquoise#40E0D0rgb(64, 224, 208)Violet#EE82EErgb(238, 130, 238)VioletRed#D02090rgb(208, 32, 144)Wheat#F5DEB3rgb(245, 222, 179)White#FFFFFFrgb(255, 255, 255)WhiteSmoke#F5F5F5rgb(245, 245, 245)Yellow#FFFF00rgb(255, 255, 0)YellowGreen#9ACD32rgb(154, 205, 50)]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Typora</tag>
        <tag>修改</tag>
        <tag>Markdown</tag>
        <tag>颜色</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo nest点击头像回到首页设置]]></title>
    <url>%2Fposts%2Fa12a1a77.html</url>
    <content type="text"><![CDATA[引言Hexo是一个快速、简洁且高效的博客框架，能够快速生成静态页面，只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站，支持 GitHub Flavored Markdown 的所有功能，同时还拥有强大的插件系统。 这次主要介绍 NexT 7.2.0 点击头像回到首页的设置。 点击头像回到首页修改/themes/next/layout/_macro/sidebar.swig，找到如下代码： 123&lt;img class="site-author-image" itemprop="image" src="&#123;&#123; url_for( theme.avatar | default(theme.images + '/avatar.gif') ) &#125;&#125;" alt="&#123;&#123; theme.author &#125;&#125;" /&gt; 在其前后加上&lt;a href=&quot;/&quot;&gt;&lt;/a&gt;即可，如下： 12345&lt;a href="/"&gt; &lt;img class="site-author-image" itemprop="image" src="&#123;&#123; url_for( theme.avatar | default(theme.images + '/avatar.gif') ) &#125;&#125;" alt="&#123;&#123; theme.author &#125;&#125;" /&gt;&lt;/a&gt; hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 即可本地预览效果。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>nest</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo nest文章置顶设置]]></title>
    <url>%2Fposts%2Fa12a1a77.html</url>
    <content type="text"><![CDATA[引言Hexo是一个快速、简洁且高效的博客框架，能够快速生成静态页面，只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站，支持 GitHub Flavored Markdown 的所有功能，同时还拥有强大的插件系统。 这次主要介绍 NexT 7.2.0 文章置顶的设置。 文章置顶关于主题文章置顶的功能，目前已经有修改后支持置顶的仓库，可以直接用以下命令安装。 12$ npm uninstall hexo-generator-index --save$ npm install hexo-generator-index-pin-top --save 然后在需要置顶的文章的 Front-matter 中加上 top: true 即可。比如下面这篇文章： 123456---title: hexo+GitHub博客搭建实战date: 2017-09-08 12:00:25categories: 博客搭建系列top: true--- 置顶功能已经可以实现，还需添加置顶标志 打开：/blog/themes/next/layout/_macro 目录下的 post.swig 文件，定位到 &lt;div class=&quot;post-meta&quot;&gt; 标签下,插入如下代码： 12345&#123;% if post.top %&#125; &lt;i class="fa fa-thumb-tack"&gt;&lt;/i&gt; &lt;font color=7D26CD&gt;置顶&lt;/font&gt; &lt;span class="post-meta-divider"&gt;|&lt;/span&gt;&#123;% endif %&#125; hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 即可本地预览效果。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>nest</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Picgo GitHub自建图床]]></title>
    <url>%2Fposts%2F77f24ba4.html</url>
    <content type="text"><![CDATA[自建原因对于写博客的人来说，图裂是很让人然烦恼的一件事情。后来想到了自建图床，将所有图片上传云，并通过外联https连接用于博客或Markdownd的编写。正好自己用Hexo+Github搭建了博客，就想着用Github来做图片的云存储空间，电脑端使用Picgo传图软件。既使用Picgo+Github的方式自建图床。 GIthub仓库创建及获取token1.注册Github,新建仓库(此处略)。 2.新建仓库后，点击sitting—Developer settings—Personal access tokens—Generate new token—选择相关设置—按Generate token提交生成token码。 Picgo下载安装及设置1.开打Picgo项目站点，下拉页面选择自己对应系统的软件版本。我这边选择下载Windows版本。 2.打开Picgo，选择Github图床进行如下设置： 设置完成后，就可开始图片上传，动图gif（需要先下载到本地在上传）同时粘贴板也会自动粘贴上。 上传成功后，软件既根据选择的外联格式生成对应连接,直接黏贴到想要的地方。我这边选择了Markdown外联格式。]]></content>
      <categories>
        <category>Picgo</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>图床</tag>
        <tag>Picgo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Typora中文字体美化]]></title>
    <url>%2Fposts%2Fbb6a1532.html</url>
    <content type="text"><![CDATA[好字体带来好心情 “Typora”这款Markdown编译器，是自己目前使用率最高的在线编译软件，其所见即所得、离线编辑让我觉得十分得心应手。但软件默认所带的中文字体显示为“宋体”，对于有一定审美度的用户来说可能不太美观，考虑到长期使用的缘故，漂亮字体能带给编译者带来好的心情，一个好的编译开始。 那如何更换字体呢？思路如下： 下载使用一款主题在官网选择一款Typora主题，例如主题Catfish,进入主题介绍查看对应主题字体说明，并下载主题。 下载完成主题压缩包后将压缩包里边的几个文件解压到Typora的自定义主题目录，文件包括： catfish.css catfish.styl catfish（文件夹） 重启Typora，在主题选项里将原主题切换为catfish。 下载思源黑体、思源宋体好在官方主题catfish说明中刚好给了两个链接： source-han-sans（思源黑体） source-han-serif（思源宋体） 点击链接进入Github网站，将文件列表上方，将Branch选项由’master’切换为’release’， 对于source-han-sans项目，点击进入OTF文件夹，然后点击进入SourceHanSansSC.zip，再点击download下载这个压缩包，解压后在SourceHanSansSC文件夹下，得到7种不同粗细思源黑体的*.otf格式的字体文件： 对于source-han-serif项目，操作方法类似，进入OTF文件夹后，分别下载SourceHanSerifSC_SB-H.zip与SourceHanSerifSC_EL-M.zip两个压缩包，解压得到7种不同粗细的思源宋体的*.otf格式文件。 对于每个*.otf文件，右键-&gt;安装，或者双击文件打开后，亦有安装按钮。 至此，安装了思源字体，重启Typora，但如此设置在catfish主题下字体是不会呈现出来的。 修改catfish.css字体装好了，catfish主题也是从官网上下载的，打开catfish.css文件，其body部分显示如下： 12345body &#123; background: #fff; font-family: Source Han Sans SC, sans-serif; color: #555;&#125; “font-family”第一默认的字体是”Source Han Sans”，这个肯定是和思源黑体有关的，但貌似不是Windows字体文件夹Font下面的字体名称。 在css文件中搜索下”Source Han Sans”，文档显示如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344@font-face &#123; font-family: Source Han Sans SC; font-weight: normal; src: local('Source Han Sans SC Regular'), url("catfish/SourceHanSansSC-Regular.otf");&#125;@font-face &#123; font-family: Source Han Sans; font-weight: bold; src: local('Source Han Sans SC Bold'), url("catfish/SourceHanSansSC-Bold.otf");&#125;@font-face &#123; font-family: Source Han Serif; font-weight: normal; src: local('Source Han Serif SC Regular'), url("catfish/SourceHanSerifSC-Regular.otf");&#125;@font-face &#123; font-family: Source Han Serif; font-weight: bold; src: local('Source Han Serif SC Bold'), url("catfish/SourceHanSerifSC-Bold.otf");&#125;@font-face &#123; font-family: mononoki; font-style: normal; font-weight: normal; src: local('mononoki Regular'), url("catfish/mononoki-Regular.woff");&#125;@font-face &#123; font-family: mononoki; font-style: italic; font-weight: normal; src: local('mononoki Italic'), url("catfish/mononoki-Italic.woff");&#125;@font-face &#123; font-family: mononoki; font-style: normal; font-weight: bold; src: local('mononoki Bold'), url("catfish/mononoki-Bold.woff");&#125;@font-face &#123; font-family: mononoki; font-style: italic; font-weight: bold; src: local('mononoki Bold Italic'), url("catfish/mononoki-BoldItalic.woff");&#125; 对于第一段设置大胆猜测一下，”font-family: Source Han Sans”以及”font-weight: normal”的字体所在的位置url为”catfish/SourceHanSans-Regular.ttc”。刚好，在自定义主题路径themes中的catfish，找到了”SourceHanSans-Regular.ttc”与”SourceHanSans-Bold.ttc”，但是Windows貌似不识别这种格式。 于是，我把上面下载的思源字体copy到themes/catfish的文件夹下面，然后修改catfish.css文档，修改了’Source Han Sans’与’Source Han Serif’指向的四处url（以下url中是博主字体的安装的路径）： 1234567891011121314151617181920212223242526272829303132333435363738394041424344@font-face &#123; font-family: Source Han Sans SC; font-weight: normal; src: local('Source Han Sans SC Regular'), url("Users\Mayjor_Zmj\AppData\Roaming\Typora\themes\catfish/SourceHanSansSC-Regular.otf");&#125;@font-face &#123; font-family: Source Han Sans; font-weight: bold; src: local('Source Han Sans SC Bold'), url("Users\Mayjor_Zmj\AppData\Roaming\Typora\themes\catfish/SourceHanSansSC-Bold.otf");&#125;@font-face &#123; font-family: Source Han Serif; font-weight: normal; src: local('Source Han Serif SC Regular'), url("Users\Mayjor_Zmj\AppData\Roaming\Typora\themes\catfish/SourceHanSerifSC-Regular.otf");&#125;@font-face &#123; font-family: Source Han Serif; font-weight: bold; src: local('Source Han Serif SC Bold'), url("Users\Mayjor_Zmj\AppData\Roaming\Typora\themes\catfish/SourceHanSerifSC-Bold.otf");&#125;@font-face &#123; font-family: mononoki; font-style: normal; font-weight: normal; src: local('mononoki Regular'), url("Users\Mayjor_Zmj\AppData\Roaming\Typora\themes\catfish/mononoki-Regular.woff");&#125;@font-face &#123; font-family: mononoki; font-style: italic; font-weight: normal; src: local('mononoki Italic'), url("Users\Mayjor_Zmj\AppData\Roaming\Typora\themes\catfish/mononoki-Italic.woff");&#125;@font-face &#123; font-family: mononoki; font-style: normal; font-weight: bold; src: local('mononoki Bold'), url("Users\Mayjor_Zmj\AppData\Roaming\Typora\themes\catfish/mononoki-Bold.woff");&#125;@font-face &#123; font-family: mononoki; font-style: italic; font-weight: bold; src: local('mononoki Bold Italic'), url("Users\Mayjor_Zmj\AppData\Roaming\Typora\themes\catfish/mononoki-BoldItalic.woff");&#125; 保存并重启Typora，主题选择catfish，字体修改成功。]]></content>
      <categories>
        <category>Typora</category>
      </categories>
      <tags>
        <tag>Typora</tag>
        <tag>修改</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo aplayer播放器的使用]]></title>
    <url>%2Fposts%2Fc7c556d8.html</url>
    <content type="text"><![CDATA[APlayer HTML5 音乐播放器Hexo中安装hexo-tag-aplayer 是APlayer播放器在Hexo 标签插件（现已支持 MetingJS）在站点根目录下安装 1npm install --save hexo-tag-aplayer Aplayer使用方式简单介绍12-- 简单格式 --&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125; 标签参数 title : 曲目标题 author: 曲目作者 url: 音乐文件 URL 地址 picture_url: (可选) 音乐对应的图片地址 narrow: （可选）播放器袖珍风格 autoplay: (可选) 自动播放，移动端浏览器暂时不支持此功能 width:xxx: (可选) 播放器宽度 (默认: 100%) lrc:xxx: （可选）歌词文件 URL 地址 当开启 Hexo 的 文章资源文件夹 功能时，可以将图片、音乐文件、歌词文件放入与文章对应的资源文件夹中，然后直接引用： 1&#123;% aplayer "Caffeine" "Jeff Williams" "caffeine.mp3" "picture.jpg" "lrc:caffeine.txt" %&#125; 歌词标签除了使用标签 lrc 选项来设定歌词，你也可以直接使用 aplayerlrc 标签来直接插入歌词文本在博客中： 123&#123;% aplayerlrc "title" "author" "url" "autoplay" %&#125;[00:00.00]lrc here&#123;% endaplayerlrc %&#125; 播放列表123456789101112131415161718192021222324252627&#123;% aplayerlist %&#125;&#123; "narrow": false, // （可选）播放器袖珍风格 "autoplay": true, // （可选) 自动播放，移动端浏览器暂时不支持此功能 "mode": "random", // （可选）曲目循环类型，有 'random'（随机播放）, 'single' (单曲播放), 'circulation' (循环播放), 'order' (列表播放)， 默认：'circulation' "showlrc": 3, // （可选）歌词显示配置项，可选项有：1,2,3 "mutex": true, // （可选）该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停 "theme": "#e6d0b2", // （可选）播放器风格色彩设置，默认：#b7daff "preload": "metadata", // （可选）音乐文件预载入模式，可选项： 'none' 'metadata' 'auto', 默认: 'auto' "listmaxheight": "513px", // (可选) 该播放列表的最大长度 "music": [ &#123; "title": "CoCo", "author": "Jeff Williams", "url": "caffeine.mp3", "pic": "caffeine.jpeg", "lrc": "caffeine.txt" &#125;, &#123; "title": "アイロニ", "author": "鹿乃", "url": "irony.mp3", "pic": "irony.jpg" &#125; ]&#125;&#123;% endaplayerlist %&#125; MetingJShi使用方式简单介绍MetingJS 是基于Meting API 的 APlayer 衍生播放器，引入 MetingJS 后，播放器将支持对于 QQ音乐、网易云音乐、虾米、酷狗、百度等平台的音乐播放。 如果想在本插件中使用 MetingJS，请在 Hexo 站点配置文件 _config.yml 中设置： 12aplayer: meting: true 接着就可以在文章中使用 MetingJS 播放器了： 12345-- 简单示例 (id, server, type) --&#123;% meting "60198" "netease" "playlist" %&#125;&lt;!-- 进阶示例 --&gt;&#123;% meting "60198" "netease" "playlist" "autoplay" "mutex:false" "listmaxheight:340px" "preload:none" "theme:#ad7a86"%&#125; 有关参数选项注释列表如下: 选项 默认值 描述 id 必须值 歌曲 id / 播放列表 id / 相册 id / 搜索关键字 server 必须值 音乐平台: netease, tencent, kugou, xiami, baidu type 必须值 song, playlist, album, search, artist fixed false 开启固定模式 mini false 开启迷你模式 loop all 列表循环模式：all, one,none order list 列表播放模式： list, random volume 0.7 播放器音量 lrctype 0 歌词格式类型 listfolded false 指定音乐播放列表是否折叠 storagename metingjs LocalStorage 中存储播放器设定的键名 autoplay true 自动播放，移动端浏览器暂时不支持此功能 mutex true 该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停 listmaxheight 340px 播放列表的最大长度 preload auto 音乐文件预载入模式，可选项： none, metadata, auto theme #ad7a86 播放器风格色彩设置]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>nest</tag>
        <tag>aplayer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo GitHub搭建博客]]></title>
    <url>%2Fposts%2Fccbc0313.html</url>
    <content type="text"><![CDATA[Hexo GitHub搭建博客的好处全是静态文件，访问速度快； 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台； 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于GitHub的； 数据绝对安全，基于GitHub的版本管理，想恢复到哪个历史版本都行； 博客内容可以轻松打包、转移、发布到其它平台； 准备工作有一个GitHub账号，没有的话去注册一个； 安装 node.js环境 安装 git环境 本次安装使用操作系统为：windows 10 搭建Hexo博客创建GitHub仓库注册的邮箱一定要验证，否则不会成功； 仓库名字必须是：username.github.io，其中username是你的用户名； 绑定域名我申请的是 iamzmj.top 域名，pin 域名地址 得到 ip 地址为 ：185.199.108.153 123C:\Users\x0468&gt;ping zmj2020.github.io正在 Ping zmj2020.github.io [185.199.108.153] 具有 32 字节的数据:来自 185.199.108.153 的回复: 字节=32 时间=143ms TTL=49 绑定域名分2种情况：带www和不带www的。 域名配置最常见有2种方式，CNAME和A记录，CNAME填写域名，A记录填写IP，由于不带www方式只能采用A记录，所以必须先ping一下你的用户名.github.io的IP，然后到你的域名DNS设置页，将A记录指向你ping出来的IP，将CNAME指向你的用户名.github.io，这样可以保证无论是否添加www都可以访问。最后在对应仓库内新建一个文档CNAME（无后缀），添加个人域名 保存即可。 本地部署Hexo在电脑的某个地方新建一个名为xxxxx的文件夹（名字可以随便取）,在该文件夹下打开Git Brush开始安装： 123456npm install -g hexo-cli #安装hexo的基础框架hexo init #初始化hexo框架 这个可能会比较慢npm install #安装所需要的组件hexo g #编译生成静态页面hexo s #启动本地服务浏览器上输入 http://localhost:4000/ #查看生成静态页面 本地部署完成 Hexo部署到Github主机中选择 Git Bash打开,输入 12345git config --global user.name "yourname" #注册用户名git config --global user.email "youremail" #注册邮箱可使用下面代码检查输入是否正确git config user.namegit config user.email 123创建SSHssh-keygen -t rsa -C "youremail@qq.com"一路回车，中会让你输入密码啥的，不需要管，一路回车即可，会生成你的ssh key。（如果重新生成的话会覆盖之前的ssh key。） 再ternimal下执行命令： 1234ssh -v git@github.com 最后两句会出现No more authentication methods to try. Permission denied (publickey). 再在ternimal下输入： 12345ssh-agent -s 然后会提示类似的信息：SSH_AUTH_SOCK=/tmp/ssh-GTpABX1a05qH/agent.404; export SSH_AUTH_SOCK; SSH_AGENT_PID=13144; export SSH_AGENT_PID; echo Agent pid 13144; 接着再输入： 1ssh-add ~/.ssh/id_rsa 这时候应该会提示：Identity added: …（这里是一些ssh key文件路径的信息）。如果出现错误提示：Could not open a connection to your authentication agent.。请执行命令： eval ssh-agent -s后继续执行命令ssh-add ~/.ssh/id_rsa ，这时候一般没问题。 再进入你的github账号，将刚刚生成的id_rsa.pub内容复制，在settings下，SSH and GPG keys下绑定。title随便取一个名字，然后将id_rsa.pub里的内容复制到Key中，完成后Add SSH Key。 最后一步，验证Key 12345在ternimal下输入命令：ssh -T git@github.com当出现Hi zmj2020! You've successfully authenticated, but GitHub does not provide shell access.表示验证成功 站点发布上传ssh key肯定要配置好 配置_config.yml中有关deploy的部分 最后站点根目录下安装deployer插件 1234npm install hexo-deployer-git --savehexo clean hexo g #生成hexo d #上传 至此Hexo+Github 个人博客搭建完成]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
</search>
