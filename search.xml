<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[阿里云之对象存储OSS]]></title>
    <url>%2Fposts%2F411cd2b5.html</url>
    <content type="text"><![CDATA[什么是OSSOSS对象存储服务，是阿里云提供的海量、安全、低成本、高可靠性的云存储服务。提供与平台无关的RESTful API接。基于盘古架构提供99.99999999999%的服务持久性。相比较物理存储它的优势在于：海量、安全、高可靠性、低成本。按量收费，无需担心存储容量。 OSS主要功能1、任何时间、任何地点、任何平台上对数据进行上传和下载 2、通过API或者WEB页面方式管理海量数据 3、弹性扩展，海量存储空间，随时增加，弹性增长 4、大规模，支持同一时间内高并发，大流量的读写访问。 5、图片处理，OSS上的图片，支持缩略、裁剪、水印、压缩和格式转换 6、按使用付费，按照存储、流量、请求次数付费，节省成本。 OSS特点1、稳定 服务设计可用性不低于99.9% 规模自动扩展，不影响对外服务 数据三重备份，持久性99.9999999999% 2、低成本 与传统硬件存储系统高投入相比，OSS使用成本低很多。 通过内网地址访问，免流量费，无需运维投入。 3、安全 结合云盾防DDoS系统 多种安全认证机制 提供访问日志有助于追查非法访问 4、大规模、高性能 存储容量无限扩展 处理能力弹性增长 多线BGP，各运营商访问流畅 OSS应用场景适合作为应用程序的持久化存储 应用场景1：数据处理（IMT）剪裁、旋转、水印、缩放/媒体转码（MT）音视频格式转换 应用场景2：海量存储 网络摄像机直存等 应用场景3: 动静态资源分离 动态资源：数据库记录 静态资源：利用BGP网络实现网页中图片、附件、音视频资源的超低延时传输。 OSS访问域名和数据中心Bucket和数据中心的关系： Bucket是地域内作用的资源，可按照费用的单价，请求来源分布，网络延迟等方面的综合考虑。Bucket一旦创建完成，不可以修改所属的数据中心。 OSS支持Bucket级别的数据中心设置，不支持Object设置数据中心。Bucket所在的数据中心确定后，该Bucket下的所有Object将一直存放在该数据中心中。 访问OSS的数据请求，都是针对Bucket的三级域名[Bucket名字+.+EndPoint(根据Bucket所在地域的不同，内外网访问方式的不同会有所区别) 以华北2节点位列： 外网地址为：oss-cn-beijing.aliyuncs.com 内网地址为：oss-cn-beijing-internal.aliyuncs.com Bucket内网访问 内网访问OSS需要满足以下两个件. 条件1:只有ECS实例可以通过Bucket内网地址进行访问 条件2：ECS实例和Bucket在同一个地域，如不在同一个地域，需使用Bucket外网域名访问 Object访问地址构成规则 1、bucket的权限为公共读或公共读写，Object的访问规则如下： 2、http://&lt;bucket名字&gt;./&lt;object名字&gt; 3、可以直接将URL连接写入HTML中访问Object 使用Bucket1、Bucket是OSS上的命名空间，也是计费、权限控制、日志记录功能的管理实体。 2、Bucket名称在整个OSS服务中具有全局唯一性，存储OSS上的每一个Object必须都包含在Bucket中。 3、一个应用，例如图片分享网站，可以对应一个或多个Bucket中。 4、一个用户在同一地域下最多可以创建30个Bucket,一旦创建成功，其名称、所处地域、存储类型不能修改。每个Bucket中存放的Object没有限制，存储容量没有限制。 其命名规则： 只能包括小写字母，数字和短横线（-） 必须以小写字母或者数字开头和结尾。 长度必须3-63字节之间。 Object操作1、Object是OSS存储数据的基本单元，也被称为OSS文件。 2、Object由元信息，用户数据和文件名组成，对象由存储空间内部唯一的KEY来识别。 3、根据不同的上传方式，object的大小限制是不一样的，分片上传最大支持48.8T的对象大小，其它的上传方式最大支持5GB。 4、Object在管理控制台上展现的形式为文件或文件夹，OSS服务没有文件夹的概念，所有文件都是由 Object来存储，文件夹本质上是创建一个size为“0”以“/”结尾的Object,方便在OSS控制台上管理Object。 命名规则： 使用UTF8编码 长度必须在1-1023字节之间 不能以“/”或“\”字符开头 区分大小写 获取文件访问地址 非私有：http://&lt;bucket名字&gt;./&lt;object名字&gt; 私有：http://&lt;bucket名字&gt;./&lt;object名字&gt;&lt;?签名字符串&gt; 删除文件 可单个删除/批量删除/自动删除 碎片管理 分片上传，超过一定容量的文件需要使用分片上传模式时，将Object切成若干个的Part,这些Part称为碎片。 自定义域名绑定使用场景：网页静态内容存储在OSS Bucket中时 域名绑定说明： OSS域名绑定（CNAME）功能目前只支持OSS三级域名访问方式进行绑定。既OSS配置方式为bucket_name.endpoint。 OSS未绑定域名，通过浏览器访问Object的URL，则为强制下载模式。 绑定的域名需要提供工信部备案号，域名持有者身份证等有效资料。经由阿里云审批通过后可以使用。 每一个Bucket可以绑定20个域名。 绑定自定义域名前的访问方式： http://&lt;bucket名字&gt;./&lt;object名字&gt; 绑定自定义域名后的访问方式： http://自定义域名/Object名字 防盗链设置试用场景：为减少存储于OSS的数据被他人盗链而产生额外的费用。 OSS是按照使用量收费的服务，为减少OSS的数据被其它人盗链而产生额外的费用。OSS支持基于HTTP Header中字段referer的防盗链方法。 每个referer白名单使用换行符风格，支持通配符（*，？） 白名单为空时： 不会检查referer字段是否为空 白名单不为空： 设置不允许referer字段为空的规则：只有referer属于白名单的请求被允许，其它请求（包括referer为空的请求）会被拒绝。 设置了允许referer字段为空的规则；则referer为空的请求和符合白名单的请求会被允许，其它请求都会被拒绝。如果使用浏览器直接浏览，需要设置referer字段为空。 静态网站托管 OSS支持静态网站托管。通过OSS控制台将自己的存储空间配置成静态网站的托管模式。支持索引和404默认页面，仅支持当前Bucket下的html格式的文件；为空则不启用静态网站托管。 静态网站托管网址：http://osstest.acper.net/ OSS图片处理图片服务（IMG）是阿里云OSS对外提供海量、安全、低成本、高可靠性的图片处理服务。 调用简单：通过调用阿里云提供的RESTfUL接口调用，不受时间、地点、设备的限制。随OSS服务一并开通，无需单独开通。 1、图片服务提供如下功能： 图片缩放、剪裁、旋转 图片添加图片、文字、混合水印 图片格式转换 自定义图片处理样式 通关管道顺序调用多种图片处理能力 获取图片信息 2、图片服务规则： 通过URL的形式进行服务。 http://Bucket./object?x-oss-process=image/action.parame_value ​ Bucket:用户的IMG频道 ​ endpoint：用户的Bucket所在数据中心的访问域名。 ​ object:在IMG中，用户操作图片的基本数据单元是Object。既OSS对应的Object,单个Object允许的最大大小是20MB. ​ action:用户对图片做的操作。 ​ parame:用户对图片做的操作所对应的参数。 3、URL方式访问： &lt;文件URL&gt;?x-oss-process=style 例如：http://osstest.acper.net/image.jpg?x-oss-process=style/imgtest1 4、分隔符方式访问： &lt;文件URL&gt;&lt;分隔符&gt; 例如：http://osstest.acper.net/image.jpg@!imgtest1 OSS安全控制安全功能介绍基于盘古分布式架构建设。 安全控制OSS提供Bucket object级别的权限访问控制。 权限包括： 公共读写——任何人可以对bucket中的Object读写、操作 公共读写、私有读写——只有创建者或被授权者可以对Bucket中的Object进行读写操作，任何人可以对Object进行读操作。 私有读写——只有创建者或被授权者可以对Bucket中的Object进行读写操作，其它人未经许可无法访问。 默认权限——Bucket是什么权限，Object就是什么权限。 防盗链OSS是按量收费的服务，OSS基于HTTP Header中的字段referer的防盗链方法。 服务器端加密存储OSS支持在服务器端对用户上传的数据进行加密编码。数据上传时，OSS对收到的数据进行加密编码并保存。数据下载时，OSS自动对保存的加密数据进行解密并把原始数据返回给用户。并在返回的HTTP请求Header中，声明该数据进行了服务器端加密。 支持加密的操作包括： Put Object:简单上传 Copy Object:复制Object Initiate Multipart Upload:分片上传 客户端加密SDK1、使用阿里云KMS托管用户主密钥，上传对象时指定KMS用户主密钥ID。 2、用户自主管理密钥，自主生成并保管加密密钥，当用户本地客户端加密时，由用户自主上传加密密钥 至本地加密客户端。]]></content>
      <categories>
        <category>阿里云</category>
      </categories>
      <tags>
        <tag>阿里云</tag>
        <tag>OSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人资源整理]]></title>
    <url>%2Fposts%2F62d74cb7.html</url>
    <content type="text"><![CDATA[课程心理学 变态心理学 机器学习 李宏毅机器学习(2017) 演讲白岩松 《白说：读书、阅人、知时》、《一刻演讲:光阴的故事》 芭蕾2013 马林斯基大剧院 -天鹅湖 2013 莫斯科大剧院-仙女 2005 珠宝 哈姆雷特 胡桃夹子 胡桃夹子 是柴可夫斯基编写的一个芭蕾舞剧。根据霍夫曼的一部叫作《胡桃夹子与老鼠王》的故事改编。舞剧的音乐充满了单纯而神秘的神话色彩，具有强烈的儿童音乐特色。圣诞节，女孩玛丽得到一只胡桃夹子。夜晚，她梦见这胡桃夹子变成了一位王子，领着她的一群玩具同老鼠兵作战。后来又把她带到果酱山，受到糖果仙子的欢迎，享受了一次玩具、舞蹈和盛宴的快乐。 悲惨世界十周年纪念音乐会/悲惨世界二十五周年纪念音乐会/电影悲惨世界 悲惨世界 是由法国作家维克多·雨果在1862年发表的一部长篇小说，其内容涵盖了拿破仑战争和之后的十几年的时间。故事的主线围绕主人公土伦苦刑犯冉·阿让（Jean Valjean）的个人经历，融进了法国的历史、革命、战争、道德哲学、法律、正义、宗教信仰。该作多次被改编演绎成影视作品。 纪录科普系列 CCTV：手术两百年 、 航拍中国、 辉煌中国 美食系列 CCTV：风味人间、 人生一串 S01/S02 、舌尖上的中国 S01/S02/S03 Netflix：主厨的餐桌 S01/S02/S03/S04/S05/S06 历史系列 CCTV：中国通史 自然系列 BBC：蓝色星球The Blue Planet S01/ S02 、王朝 Dynasties S01、行星 The.Planets S01 电视大陆 魔道祖师之陈情令 、九州缥缈录 、古董局中局 、小欢喜 日韩 德鲁纳酒店 动漫电影 哆啦A梦 伴我随行 剧场 劇場版 名探偵コナン TV 1、Fate系列 FateZero S01/S02 Fate/Grand Order 绝对魔兽战线 巴比伦尼亚 2、一拳超人系列 一拳超人 S01/S02/S03 3、进击的巨人系列 进击的巨人 S01/S02/S03 4、灌篮高手 灌篮高手SlamDunk 5、全职猎人 全职猎人TV、 剧场 6、海贼王 ONE PIECE 海贼王 TV、剧场 软件设计类 AutoCAD 2020精简版 Adobe Photoshop CC2019 系统类 CCleaner专业版-更新 数据类 数据分析：IBM SPSS Statistics 24 数据可视化：Tableau 10.5 音乐古典音乐 西水佳代 - 肖邦音乐故事第五辑：24首练习曲 李斯特：超级技巧钢琴练习曲，S139 No1-12 拉赫玛尼诺夫：钟声、交响舞曲 威廉退尔序曲及其它序曲精选 William Tell &amp; Other Favorite Overtures SOUVENIR 特隆赫姆室内乐团古典音乐 川田知子 - 我们怀念的布宜诺斯艾利斯 川田知子 - J.S. Bach Sonata &amp; Partita BWV 1001-1003 (11.2MHz DSD) 清水惠里子 - Afterglow (Eriko Shimizu &amp; Strings 4) [UNAMAS] David and Bathsheba 特隆赫姆交响乐团 巴赫：赋格的艺术 [UNAMAS] 巴赫：双小提琴协奏曲 (11.2MHz DSD) MAGNIFICAT (11.2MHz DSD) Mahler - Symphony 8 - Utah Symphony, Thierry Fischer (11.2MHz DSD256) 维瓦尔第：Gloria 光荣颂 (新意大利合奏团) [Meister Music] The Sound of Ohga Hall [11.2MHz／1bit][DSD256]-大贺音乐厅之声 The Brahms Project - The Complete Piano Quartets-勃拉姆斯计划-钢琴四重奏全集 REFLECTIONS 2017格莱美音乐奖 “最佳古典环绕声专辑” (11.2MHz DSD) Schubert String Quartet No.14 Death and the Maiden 舒伯特：D小调第14弦乐四重奏 死亡与少女 Sakura Sakura (11.2MHz1bit DSD)-樱花、樱花 TrondheimSolistene.-.[Souvenir]-特隆赫姆独奏乐团 纪念品 柴可夫斯基：佛罗伦萨的回忆，Op.70 (11.2MHz DSD) 维瓦尔第：四季 (11.2MHz DSD) Mahler - Symphony No.5 - Kubelik &amp; Bavarian RSO [HDTT] (DSD256)-马勒第五交响曲 VA - Just Listen, 8 Ensembles in 1 Bit (2015) [DSD256] Tzigane (11.2MHz DSD)-茨冈狂想曲 小提琴 Ayasa 岛村 绚沙 Northern Timbre (11.2MHz DSD) Petteri-Iivonen-and-Kevin-Fitz-Gerald Art-of-the-Sonata vol-II-小提琴的艺术 大提琴 Orientale (渡边方子) [Meister Music] 钢琴 Dimensions (Yuki Arimasa) [UNAMAS] Jan Gunnar Hoff《STORIES》(11.2MHz DSD) [Jun Fukamachi黎明(11.2MHz DSD)]( 爵士音乐 In A Silent Way 宁静之道-迈尔斯・戴维斯 Tomonao Hara Hiroshi Ikejiri《Dear J.C.》(11.2MHz1bit DSD) Quiet Winter Night (11.2MHz DSD)-Best Surround Sound Album 2012 Sophisticated Lady Jazz Quartet - Sophisticated Lady Vol. II-爵士四重奏 https://pan.baidu.com/s/1_NVoigU8NZu1kr6tpoFQ4g) 游戏模拟人生4 刺客信条：奥德赛 Assassin’s Creed: Odyssey 超级机器人大战V-Super.Robot.Wars.V ​]]></content>
      <categories>
        <category>资源</category>
      </categories>
      <tags>
        <tag>资源</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阿里云之虚拟私有云VPC]]></title>
    <url>%2Fposts%2Ffa1159eb.html</url>
    <content type="text"><![CDATA[VPC概念介绍1、什么是虚拟专用网络VPC问题1？系统上云后，是否可以向管理传统数据中心一样进行管理？ 问题2？已经有了一个数据中心，后续的扩容以及新系统的建设想建设在阿里云上，如何处理云上系统及现有系统之间的管理？ 基于上述2个问题，阿里云VPC应运而生。 2、虚拟专用网络VPC的特点1、VPC VLAN级别的隔离，彻底阻断VPC之间的网络通信。 2、实现网络地址的自定义，我的地盘我做主。 3、专线/VPN接入，实现传统架构的平滑上云。 3、VPC产品介绍专有网络是自己完全掌控的网络，例如选择IP地址范围、配置路由表、网关等，可以在自定义的专有网络中使用阿里云相关产品。 专有网络支持连接到其它专有网络或本地网络，形成一个按需定制的网络环境。实现应用的平滑迁移上云和对数据中心的扩展。 专有网络VPC是基于阿里云构建的一个隔离的网络环境，专有网络之间逻辑上彻底隔离。其优势主要为：安全隔离、软件定义网络、访问控制、丰富的网络连接控制、 VPC功能特点特点1：安全隔离 使用隧道技术实现传统VLAN相同的隔离效果。 实现了不同云服务器间的二层网络隔离。（网卡MAC信息不进入物理网络）因此也实现了不同专有网络之间的二层网络隔离。 专有网络内的ECS使用安全组防火墙进行三层网络访问控制。 解决的问题 专有网络之间的彻底隔离。 专有网络内，网卡级别的隔离。 特点2：访问控制 灵活的访问控制规则。 满足政务、金融的安全隔离规范。 特点3：软件自定义网络 按需配置网络，软件定义网络。 管理操作实时生效。 特点4：丰富的网络连接方式 支持专线连接 支持软件VPN VPC应用场景应用场景一: 本地数据中心+云上业务 混合模式 将内部核心系统与核心数据放置在自建的数据中心。来确保核心数据的安全性。 云上部署对外客户的应用系统，实现对业务访问的激增。 应用场景二: 多租户的安全隔离 希望在云上构建一个完全隔离的业务环境。传统云架构的多租户共享机制不能保证数据的安全性。 自主定义私有网络配置。 应用场景三: 主动访问公网的抓取类业务 专有网络中的多个服务器可以主动访问互联网。 避免这些服务器的公网IP暴露在公网上。 应用场景四: 多个应用流量波动大—共享宽带包 系统中同时存在多个面向互联网的应用 各个应用都需要对外提供服务，并且其波峰时间点不一致。 VPC网络基本概念OSI以太网7层协议 OSI以太网7层协议和TCP/IP协议比较 数据链路层：网桥、二层交换机、网卡 网络层：路由器、三层交换机 路由器和二层交换机的区别路由器： 工作在网络层（三层） 以IP地址作为为寻址方式，支持TCP/IP协议 支持划分子网 可以连接不同的网段（跨网段） 二层交换机： 工作在数据链路层（二层），以MAC地址作为寻址方式 不能划分子网 用于同一网段内的数据交换 路由器和网关网关是一个网络连接另一个网络的“关卡”，它是一个逻辑概念。 路由器是物理设备 路由器可以实现网关的功能。 网关也可以由局域网中的一台双网卡机器来实现。 VLAN（虚拟局域网）是一组逻辑上的设备和用户，不受物理位置限制，可以根据部门、应用、功能等因素讲他们组织起来，相互之间的通信就好像在同一个网段中一样。 VLAN之间默认是二层联通。三层通过对数据包封装VLAN_ID隔离。 VLAN之间需要通过网关来实现数据交换。 其优点： 端口隔离，通过一台交换机进行多个VLAN划分，实现交换机的利用最大化。 提高安全，含有敏感数据的用户组可与网络的其它部分隔离。 管理灵活，将不同地点、不同网络，不同用户组组合在一起，形成一个虚拟的网络环境。 VPC云产品综述VPC是用户独有的、完全掌控的的云上私有网络。可以根据需求对IP地址、路由表和网关等网络基础要素进行统一规划并使用阿里云提供的其它产品。（如ECS、RDS、SLB） VPC由虚拟路由器和虚拟交换机共同组成。 为实现和本地数据中心的平滑互通，可通过使用高速通道（专线）或VPN方式，将VPC与原有的本地物理网络连接，组成混合网络。 VPC的安全隔离1、不同账号的云服务器在不同的VPC里。 2、VPC基于目前主流的隧道技术，每个VPC都有一个独立的隧道ID。一个隧道ID对应一个VPC。一个VPC内的云实例之间的传输数据包都会加上隧道ID封装，带有唯一隧道ID标识，然后送到物理网络上进行传输，不同VPC内的ECS实例因为所在隧道ID不同，本身处于两个不同的路由平面。所以不同VPC内的云产品实例无法进行通信，天然被隔离。 3、不同专有网络之间内部网络完全隔离,只能通过对外映射IP（弹性公网IP和NAT IP）互联。 VPC名词解释 VPC与其它云产品之间的关系VPC阿里主推网络类型，支持VPC的阿里云产品有：ECS、SLB、RDS。 VPC创建成功并创建虚拟交换机后，具备了在相应地域下可用区中创建处于这个交换机下的ECS、RDS和SLB实例。 VPC收费模式 VPC：免费（VPC内的 路由器、交换机、路由表、路由条目、私网高可用虚拟IP） 弹性公网IP：收费（预付费和后付费两种模式 ） VPC创建创建VPC1、创建VPC时，需以CIDR Block 方式指定VPC 内私网网段。-指定的网段无法修改。 2、VPC创建成功后，任需创建虚拟交换机，之后才可以创建云产品实例（ECS、SLB、RDS）。 3、删除指定的VPC前，必须先删除VPC内的所有云产品实例（安全组、交换机、产品实例、路由条目）。 如何使用交换机1、VPC状态为可用时，才能创建交换机。 2、交换机不支持并行创建，只支持one by one方式创建。 3、交换机创建后，不能再修改网段。 4、删除交换机之前，必须先删除交换机下的所有云产品实例。 弹性公网IP的使用申请弹性公网IP]]></content>
      <categories>
        <category>阿里云</category>
      </categories>
      <tags>
        <tag>阿里云</tag>
        <tag>VPC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阿里云之弹性伸缩服务ESS]]></title>
    <url>%2Fposts%2F5a90a5b6.html</url>
    <content type="text"><![CDATA[什么是弹性伸缩服务ESSESS介绍 ESS(弹性伸缩)自动调整弹性计算资源大小，来满足业务需求的变化。可根据设置的伸缩策略，在业务需求增长时自动增加ECS实例来保证计算能力。在业务需求降低时，自动减少ECS实例来节约成本。 ESS伸缩性服务的特点 弹性扩展、弹性收缩、弹性自愈 ESS名词解释 弹性伸缩（Auto Scalling） 弹性伸缩是根据用户的业务和策略，自动调节其弹性计算资源的管理服务。其能够在业务增长的时自动增加ECS实例，并在业务下降时自动减少ECS实例。 伸缩组 伸缩组是具有相同应用场景的ECS实例集合，伸缩组定义了组内ECS实例数的最大值，最小值及相关的负载均实例和RDS实例等属性。 伸缩配置 伸缩配置定义了用于弹性伸缩的ECS实例的配置信息。 伸缩规则 伸缩规则定义了具体的扩展和收缩操作，例如加入或移出N个ECS实例。 伸缩活动 伸缩规则成功触发后，就会产生一条伸缩活动，伸缩活动主要用来描述伸缩组内ECS实例变化情况。 冷却时间 冷却时间指，在同一伸缩组内，一个伸缩活动执行完成后的一段锁定时间。在这段锁定时间内，该伸缩组不执行其他的伸缩活动。 ESS概念之间的关系 伸缩配置 伸缩规则 包含在伸缩组中（管理生命周期） 伸缩活动 ​ 伸缩触发任务有定时服务,云监控报警任务等类型。 ​ 定时任务，不依赖伸缩组的生命周期管理，删除伸缩组不会删除定时任务。 ESS使用规则ESS使用规则一伸缩规则 定义了具体扩展或伸缩操作，例如加入或移出N个实例 伸缩规则对ECS实例数量是执行增加或是减少的操作。是根据伸缩组中定义的MinSize和MaxSize判断的。 ​ 例如某个伸缩组：MaxSize=3 当前实例数2，伸缩规则定义为增加3台ECS实例。实际执行过程中只会增加1台ECS实例（伸缩规则中的值不会调整） ​ 例如某个伸缩组：MinSize=2 当前实例数3，伸缩规则定义为减少5台ECS实例。实际执行过程中只会较少1台ECS实例（伸缩规则中的值不会调整） ESS使用规则二伸缩活动 同一伸缩组内，同一时刻只能有一个伸缩活动在执行。 伸缩活动不可以中断，某个创建20台ECS实例的伸缩活动在执行时，当创建到第6台ECS实例时，无法强制终止该伸缩活动。 伸缩活动有ECS实例加入伸缩组失败时，需要保持ECS实例级事务的完整性。而非伸缩活动级事务的完整性。既进行ECS实例回滚，而非伸缩级回滚。例如，当伸缩组创建了20台ECS实例，只有19台成功加入SLB负载均衡，则只对1台不成功的ECS实例进行释放操作。 ESS使用规则三冷却时间 伸缩组在冷却时间内，只会拒绝云监控报警任务类型的伸缩活动请求，其它类型的触发任务可以绕过冷却时间立即执行伸缩活动。 伸缩规则冷却时间和伸缩组默认冷却时间同时存在时，以伸缩规则的冷却时间为伸缩活动的执行标准。 当伸缩组加入或移除多个ECS实例时，只有最后一个ECS实例加入或移出完成后，整个伸缩组的冷却时间才开始计算。 停用伸缩组后再开启伸缩组，冷却时间效果会消失。 ESS收费介绍弹性伸缩免费。 通过弹性伸缩自动创建的或手工添加的ECS实例按ECS相关实例类型进行付费。 按量付费ECS关机后，任收取实例费用。只有释放后才不再收取。 弹性伸缩尽力保证弹性伸缩服务足额正常弹出，也存在由于地域云服务器库存不足，启动时间长等问题导致弹性伸缩的实例无法全额弹出的情况。 ESS的定时模式 定时模式 自定义自动伸缩发生的时间和频率，例如每天13:00添加ECS实例。 动态模式 基于云动态监控指标(如CPU性能指标)自动增加或减少ECS实例。 固定数量模式 通过设置最小实例数（MinSize）,既健康运行ECS实例最小数量，以保证可用性。 自定义模式 通过API调用自有监控系统，执行手动操作。 健康模式 ECS实例为非RUNNING状态时，弹性伸缩将自动移出或释放不健康ECS。 多模式并行 以上所有模式都可以组合配置，例如设置每天13:00~14:00创建20个ECS实例来应对业务高峰，但实际情况可能需要 多于20个的实例，则可以选择其它模式与定时模式配合一起使用。 ESS限制伸缩组内部署在ECS实例的应用必须无状态，并且可横向扩展 。 弹性伸缩无法自动添加ECS实例到开放缓存，实例白名单需要自行添加。 弹性伸缩无法纵向扩展，既无法自动升降ECS实例的vCPU,内存，带宽等。 数量限制 伸缩组：20个，每一个伸缩组内可创建10个伸缩配置及50个伸缩规则。 支持ESS实例：1000台（含自动添加，不包含手动添加）。 定时任务：20个。 伸缩组创建创建伸缩组注意事项 RDS： 1、指定的RDS实例必须是运行中状态。 2、指定的RDS实例访问白名单的IP个数不能达到上限 3、伸缩组创建成功后，不会立即生效，只有启用才能接受伸缩组规则触发和执行相关伸缩活动。 修改伸缩组注意事项 1、地域、负载均衡、RDS数据库实例不可以修改。 2、伸缩组有 生效、失效、删除 三种状态。只有生效和失效状态才可以修改伸缩组属性。 3、当伸缩组的ECS实例数不满足修改后的MaxSize和MinSize时，弹性伸缩服务会自动加入或移出ECS实例。使得伸缩组的ECS实例数量匹配MaxSize和MinSize。 启用伸缩组注意事项 1、当伸缩组为失效状态时，才可以启用伸缩组。 2、当伸缩组有生效的伸缩配置时，才可以启用伸缩组。 3、一个伸缩组在同一时刻只能有一个生效的伸缩配置。 停用伸缩组注意事项 1、只有在当前伸缩组没有任何伸缩活动进行时，才能停用伸缩组。 2、当前伸缩组为生效状态时，才能停用伸缩组。 删除伸缩组1、控制台删除一个伸缩组时，默认使用强制删除模式。 2、删除伸缩组，包含删除相关的伸缩配置、伸缩规则、伸缩活动、伸缩信息等。但不会删除定时任务，云监控报警任务，负载均衡实例，RDS实例。 3、通过Open AI 删除伸缩组时，可以看到强制删除属性。表示伸缩组存在ECS实例或正在进行伸缩活动。是否强制删除伸缩组并移出和释放ECS实例。 创建伸缩配置1、伸缩配置一旦创建成功，不可以编辑更改，只能创建一个新的伸缩配置来替换不需要的伸缩配置。 2、依据被替换的伸缩配置，而添加进组的ECS实例任可正常运行。 3、一个伸缩组内最多创建10个伸缩配置，但只能有1个伸缩配置处于激活状态。 删除伸缩配置注意事项 1、伸缩配置在伸缩组中属于生效状态,则伸缩配置不允许删除。 生命周期挂钩什么是生命周期挂钩当伸缩组发生伸缩活动时，生命周期挂钩会暂停伸缩活动一段时间，伸缩活动进入等待状态。 应用场景扩张活动时：可以在等待期间初始化ECS实例配置。 收缩活动时：获取ECS实例数据 作用时机扩张活动时：加入RDS、SLB实例白名单前 收缩活动时：移除RDS、SLB实例白名单前 创建管理定时任务1、每个账户最多能创建20个定时任务 2、由于伸缩组正发生伸缩活动或者伸缩组停用等原因，导致定时任务触发执行伸缩规则失败，在重试过期时间内，定时任务会自动重试触发，否则放弃本次定时触发。 3、若多个定时任务在相近的时间内触发同一个伸缩组的伸缩规则，则最早触发的定时任务会先执行伸缩活动。由于同一个伸缩组在同一时刻只能有一个伸缩活动。排在后面的定时任务会在重试过期时间内自动重试实时触发。如上一个伸缩活动完成之后，排在后面的定时任务还在重试过期时间内重试，则执行该定时任务的伸缩规则并触发相应的伸缩活动。 报警任务 1、基于 云监控服务（CMS）运行的。 2、如果该报警任务名称已经存在，则用新的值进行替换。 3、在使用报警任务之前，需要在ECS镜像里安装新版本的云监控插件。]]></content>
      <categories>
        <category>阿里云</category>
      </categories>
      <tags>
        <tag>阿里云</tag>
        <tag>ESS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows10命令行调用openssl]]></title>
    <url>%2Fposts%2Fac409ae6.html</url>
    <content type="text"><![CDATA[在计算机网络上，OpenSSL是一个开放源代码的软件库包，应用程序可以使用这个包来进行安全通信，避免窃听，同时确认另一端连接者的身份。这个包广泛被应用在互联网的网页服务器上。 下载安装windows平台openssl密钥生成工具 执行安装目录bin下的”openssl.exe”，执行后弹出命令窗口如下 生成私钥，命令行输入 1genrsa -out rsa_private_key.pem 1024 在bin目录下多了一个rsa_private_key.pem文件，将这个文件通过文本编辑器打开，将看到你所需要的私钥，使用时记得把—BEGIN PRIVATE KEY—，—END PRIVATE KEY—字样删掉。 生成公钥，命令行输入 1rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem 在bin目录下多了一个rsa_public_key.pem文件，将这个文件通过文本编辑器打开，将看到你所需要的公钥，使用时记得把—BEGIN PRIVATE KEY—，—END PRIVATE KEY—字样删掉。 RSA私钥转换成 PKCS8 格式，命令行输入 1pkcs8 -topk8 -inform PEM -in rsa_private_key.pem -outform PEM -nocrypt 回车，key直接显示在窗口中 12345678910111213141516-----BEGIN PRIVATE KEY-----MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBALaGPKpNJmgH6oV3tO19bPty3U52ELXQilxRvcXuIQbqWkteK86FUi4W7eM+eK+ldVuuJt3YVsBeSPh72HIFatdzxqbE5oXq7vyuWUj9fi3ldD3i0obN0v52qKBL6gNQqRThQjbRqaf2uix4BORP5DCALVanQKU4QUaL6Tnsy9MPAgMBAAECgYEApFlc2K+dTIEMP9+Y71tHvWYhNZwD0eKUIyqLKWURIgv0//YslcngRJXq3/qJawceFE5MuucovhBnvi6tp4WPPCk0UA1gsEPYN9CC4M7DFy2NV+thY+PLZ5pv/mcNiO/eNMIVoibQK1luNIyH3bKbCQHofkAyk5Ji8/TEfyVphmkCQQDj8HPXEtSe9RtbCkXyrx0Piq+4kF79+ALQJwREisgJLTtABgrOeWkse03gQHp64LgTJG0BgaBQZwsm++hwttONAkEAzP6GhuelN4zElPSJskWApRjQOCTBKUf/5e6g5WH284SO9tjjL4Kb8OetN4XmOijEcsWk7p6cEugVEnBjT4asCwJAa8fOLrujuEo0FjdkXd25wxiUAJSbpkF4qw5X8UUiU1yE8MAqqfk05yii6U/z2liaEcselCDEOmCPIG7rOSjqHQJBALuz/6h9aYog6kveUksbWv1RaC9QcFKFa+q1gzwmZMJ8SY/77qKtPG7tJG2nvLTaaW8STMB2GUEyo0DcCgNitBsCQCbNHgqw/cE//p/qLEuZgLZRBM6xOrsuLYU7ODXc3xL9H48l2iGt3mSnjLkEuW+OjaLMNKRLIujc/0AMhDYfL3w=-----END PRIVATE KEY----- –后续持续更新–]]></content>
      <categories>
        <category>openssl</category>
      </categories>
      <tags>
        <tag>openssl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阿里云之弹性计算服务ECS]]></title>
    <url>%2Fposts%2F26340115.html</url>
    <content type="text"><![CDATA[阿里云弹性计算服务ECS什么是弹性计算服务ECS1、传统物理服务器 随着业务的上升用户数和访问量急剧上升，传统的物理服务器都是会通过询价—采购—安装—调试—防病毒处理—BGP线路。。。。一套体系进行新增。 2、云服务器Elastic Compute Service (ECS) 阿里云提供的是一种随时创建、扩容、释放的基础云计算服务。 从管理方式上来讲，云服务器（简单、高效、稳定、安全、易用、成本低），使得开发者更加专注于核心业务的创新。 ECS定位云服务器（ECS）是阿里云产品体系中最基础的计算服务，通常用作应用程序的运行环境，其最重要的特性是弹性。 ECS的基础运行环境1、ECS是应用程序的基础运行环境 每个ECS都运行着用户选择的操作系统，一般是某个Linux或Windows的发行版。 用户的应用程序运行在实例的操作系统之上 2、最简化的弹性结构 较好的实践是将ECS和其他云计算产品搭配使用，列如ECS运行Webserver，使用RDS作为数据库，OSS作为文件存储 应避免完全将原有物理服务器上的应用照搬照抄到云服务器上。 ECS的弹性伸缩能力1、支持垂直方向和水平方向的扩展。 垂直扩展：五分钟内升级CPU、内存、磁盘、网络。 水平扩展：十分钟内启动N多的ECS实例，度过峰值后可以立刻销毁。 ECS的产品特点1、稳定 可靠性99.999%，自动宕机迁移，数据备份和回滚，系统性能报警。无需再单独购买配置 2、安全 防DDoS，安全组规则的保护多用户隔离 ，防密码破解。无需再单独购买配置 3、弹性 10分钟内创建一家中型互联网公司的IT资源（约100台），5分钟内停机升级CPU和内存，在线不停机升级带宽。 4、高性能 随机IOPS 100万，4000MB/s增强型SSD云盘性能；多线BGP骨干网络接入（避免了各宽带运营商之间数据交换进行的计费）；高性价比，低运营成本。 ECS的应用场景ECS应用场景广泛 主要应用场景1：企业网站、个人博客、APP后台、Web应用。 主要应用场景2：数据库，通过在ECS上安装数据软件库，将ECS改造成后台数据库。 ECS的基本概念ECS，由多个并列，又相互关联的产品概念组成，包括： 1、实例，instance; 2、存储，storage; 3、快照，copy 4、镜像，image 5、安全组，security group ECS位置概念1、地域 Region 地域，是阿里云提供的云计算服务的城市位置，一般一个Region会覆盖一个地域。 2、可用区 Zone 可用区，是Region下，电力和网络独立存在，软件故障隔离的物理数据中心，可用区的开发，目的是容许用户自行选择资源的分配策略。 ECS产品关系 选择地域 按服务接入点、就近选择地域 各种资源在不同的地域价格略有不同 选择可用区 资源放在同一个可用区 优点：低时延 缺点：低可用性 资源放在不同可用区 优点：高可用性 缺点：高时延 ECS实例概念1、实例，是ECS产品最核心的部分，是指虚拟计算环境。只有基于实例，才能使用网络、存储、快照等其它资源。 2、实例规格，决定了ECS实例的计算和存储能力，是指实例的不同配置，包括vCPU核数、内网、网络（内网）性能等。 ECS故障迁移当一个实例的物理主机宕机时，ECS系统将启动宕机迁移过程，既将此物理机上运行的云服务器都迁移到其它物理机上。 当发生宕机故障，阿里云发送迁移短信。 迁移完成后，阿里云再次发送给短信，配置信息迁移前后保持不变。 迁移过程持续时间5-10分钟，对于要求高可用的应用，使用SLB负载均衡到多个ECS实例上，应对宕机故障。 设置应用程序开机自动启动，避免宕机重启后应用程序没有启动，如Apache。 设置待迁移ECS实例上部署应用的自动重连功能如：连接数据库。 宕机迁移只针对使用云盘的ECS实例，使用本地盘的ECS实例收到宕机短信后，通过工单的方式确认是否需要保留本地数据等事项，并进入下一个恢复事项。 ECS实例计费方式 ECS存储(上)云盘存储的相关概念： ECS存储 一台ECS实例最多挂载16块云盘，云盘的出发点：高可靠性、兼顾低时延。 ECS云盘 各类云盘技术参数 独立云磁盘： 指单独购买的云盘（系统盘随ECS实例购买），可随时挂载，卸载 只可挂载同一可用区域内的任何实例上 但在同一时间只能挂载到一个实例上 可设置是否随实例一起释放 支持按量付费 ECS存储(中)共享块存储（公测中）ECS共享块存储是一种支持多个ECS实例并发读写访问的数据块级存储设备，具备多并发、高性能、高可靠等特性，单个共享块存储最多支持同时挂载到一个可用区下的16个ECS实例上。（公测阶段为16个） 共享存储块技术参数 ECS存储(下)本地存储 出发点：超低延时，低可靠性 •无盘古可分布式系统 •与ECS实例在同一台物理服务器上，是否可靠由物理服务器决定，存在单点故障风险 •收到宕机短信后，需通过工单方式确认是否需要保留本地数据等事项，并进入下一个恢复环境。 •不建议存放需要长期保存的数据。 计费 本地盘的费用包括在本地盘实例的费用中。 生命周期 本地盘的生命周期与它所挂载的实例周期相同。 只能在创建本地盘实例时创建本地磁盘。本地磁盘的存储容量由本地盘实例规格决定，不能自行添加或减少。 本地盘实例释放时，本地盘也会同时释放。 ECS本地存储技术参数 ECS快照ECS快照功能： 某一个时间点上某一个磁盘的数据备份。采用按量付费功能。 ECS快照用途： 1、系统盘、数据盘的日常备份，可以利用快照定期的对重要业务数据进行备份，来应对误操作、攻击、病毒导致的数据丢失风险。 2、更换操作系统，应用软件升级或业务数据迁移等重大操作前，可以创建一份或多份数据快照，一旦升级、迁移过程中出现任何问题，可以通过数据快照及时恢复到正常系统数据状态。 3、生产数据的多副本应用，通过生产数据创建快照，从而为数据挖掘、报表查询、开发测试等应用提供接近实时的真是生产数据。 4、通过系统盘快照创建自定义镜像。批量复制出与当前系统完全一样的ECS实例。 5、通过数据盘快照可以复制出与目前磁盘数据完全一样的新磁盘。 ECS自动快照： 阿里云除用户手动快找外，还提供自动快照简化用户管理。 通过控制台/API设置自动快照策略。支持自动定义时间点、每周重复日期、快照保留时长。查询快照关联磁盘及详情。 可创建自动快照时间段来错开应用的高峰期。（创建快照时I/O的特性会降低） 每块磁盘拥有64个的额度。 ECS快照的收费 快照所占存储空间的大小计费。开通快照时默认按照实际使用量按小时计费。 购买存储包（包月）的方式，来提前购买存储资源的使用额度和时长。（按量后付费模式） ECS快照机制 快照使用增量方式，只拷贝两个快照间数据变化的部分 数据变化情况不同，快照创建的时长也不同。第一次创建快照的时间最长。 ECS镜像ECS镜像： ECS镜像：是ECS实例运行环境的模板。模板中包括了特定的ECS操作系统信息。也包括一些额外安装的应用程序。 镜像相当于副本文件。包含一个或多个磁盘中的所有数据。对于ECS来说，这些数据可以是单个系统盘，也可以是系统盘+数据盘的组合。 ECS镜像的类型及主要作用: ECS自定义镜像的创建 1、使用快照创建镜像 自定义镜像是ECS实例系统盘在某一时刻的快照 通过自定义镜像开通的实例，可与原实例配置的系统相同，也可以不同。 使用说明: 使用自定义镜像开通的ECS实例可以升级CPU、内存、带宽、磁盘等。 创建自定义镜像的ECS实例到期或数据释放后，创建的自定义镜像不受影响。使用自定义镜像开通的ECS实例也不会受影响。 Linux注意事项: Linux实例的系统盘创建自定义镜像时，umonut linux 挂载的所有文件系统。不要在/etc/fstab文件中加载数据盘信息否则* 使用该镜像创建的实例无法启动。 请勿随意升级内核或操作系统版本，请勿调整系统盘分区，请勿修改默认登录用户名root。 2、使用实例创建镜像 基于实例创建一个自定义镜像，把实例中的所有磁盘，包括系统盘和数据盘中的数据，完整得复制到自定义镜像中。 创建自定义镜像的过程中，该实例中的每块磁盘都自动创建了一个快照，这些快照组合起来，构成一个自定义镜像。 使用说明： 创建镜像的过程中，不要改变实例状态，不要停止、启动或重启实例，避免创建失败。 使用带数据盘的自定义镜像创建实例时，默认根据镜像创建数据盘。 更换系统盘时，不能使用带数据的自定义镜像。 ECS自定义镜像适用范围 ECS自定义镜像的注意事项 1、数据盘mount Linux实例的系统盘创建镜像时，要umount linux挂载的所有文件系统，及不要在/etc/fstab文件中加载数据盘信息。否则使用该镜像的实例无法启动。因为一块磁盘只能同时被一个实例挂载。 2、敏感数据 自定义镜像可以共享给他人，为保证数据安全，在创建自定义镜像前，应删除敏感数据（如：密码 个人文件） 3、自动启动服务 为了自动扩展能力而创建的镜像，应当设置好启动时需要启动的程序。如Apache。 ECS的网络和安全组如何兼顾ECS实例的安全及实例之间的数据通信？ ECS网络包括： 专有网络： 一个隔离的网络环境。 可以自定义网络的拓扑和IP地址，适用于对网络安全性较高和有一定网络管理能力的用户。 经典网络：已淘汰 ECS内网 在同一地域，实例之间传输数据，一般推荐内网&gt;连接方式 1、经典网络实例： 同一账号、同一地域实例，如果在同一个安全组，既默认内网互联。 同一账号、同一地域，不同可用区实例，如果在同一个安全组，即使内网地址不在同一网段，也可内网连接。 不同账号，相同地域的实例，可以通过安全组实现内网互联。 2、专有网络实例： 同一账号、同一地域、同一VPC网络的实例： 在同一个安全组内，内网互联 不在同一个安全组内，需安全授权后才能内网互联 同一账号、同一地域实例，如果在不同的VPC网络，需要通过高速通道实现网络互联。 实例的网络类型不同，默认不能内网互联。 ECS安全组 ECS安全组是一种虚拟防火墙，通过设置一个或多个规则，实现单台或多台实例网络访问控制。规则包含允许访问的网络协议、端口、源IP等信息，这些规则对于加入该安全组的所有实例均生效，每个实例至少要加入一个安全组。 安全组用途： 1、对ECS进行分组，限制互相访问权限控制时需要使用安全组功能。 2、通过安全组的配置可以实现： 允许或限制特定的安全组或者特定的来源是否可以访问自己 允许或限制本安全组的实例是否可以访问组外特定资源 ECS防火墙规则经典网络防火墙规则由源（IP、IP网段或安全组），协议类型，端口、策略（允许/拒绝），网络类型（内网/公网）组成。 每个安全组可以通过两种方式授权其它人访问自己 方式一：指定IP地址段，如123.123.0.0/16，公网IP段访问安全组1中的实例。 方式二：指定安全组ID，用于内网间授权。 安全组方向限制：安全组对出和入两个方向都配置防火墙规则，入方向即将自己作为访问目标，出方向即将自己作为访问源。 安全组限制：每个账号最多100个安全组，每个安全组最多1000个实例。每个实例最多加入5个安全组。每个安全组最多100条规则。 安全组优先级数字越小，优先级越高。 1、服务器只有一个安全组。 两条优先级相同的规则，先判断第一条规则是否符合，不符合的情况下，判断第二条规则是否符合。 两条优先级不相同的规则，优先级小的数字高，优先级大的数字小。 2、服务器至少有二个安全组。 安全组1和安全组2的优先级一样的情况下，依次执行安全规则。 1234安全组1 1.1.1.1 优先级1安全组1 1.1.1.2 优先级1安全组2 2.2.2.1 优先级1 安全组2 2.2.2.2 优先级1 安全组1和安全组2的优先级不一样的情况下，安全组1 1.1.1.1—安全组2 2.2.2.1— 安全组1 1.1.1.2 —安全组2 2.2.2.2 1234安全组1 1.1.1.1 优先级1安全组1 1.1.1.2 优先级2安全组2 2.2.2.1 优先级1 安全组2 2.2.2.2 优先级2 ECS产品创建注意事项1、服务器要部署在什么区域： ECS所在地域与目标用户所在的地理位置 ECS与其他阿里云产品之间的关系 资源价格 某些地区的特殊要求，如中国大陆要求的ICP备案，选择大陆地域的数据中心。 2、服务器需要什么样的配置： 根据应用系统所需的最大CPU、内存的需求选择所需配置 如果需要存储大量数据，按需选择附加磁盘 考虑是否需要本地存储 3、选择操作系统 WINDOWS / LINUX 32位/64位 4、服务器的I/O系统满足需要么？ 选择I/O优化的实例，挂载SSD云盘时，能获得SSD云盘全部存储性能。 对于不支持I/O优化的实例，挂载SSD云盘时，能获得1000左右的IOPS性能。(SSD云盘追高支持2000IOPS) 5、预算是否充足 按年/月付费适合24*7小时的部署服务，按量付费适合临时使用。 预算足够可直接购买峰值所需配置。预算不足适当降低配置，设定服务器、CPU利用率告警。 ECS的API通过向ECS API的服务端地址发送GET或POST请求，并按照接口说明在请求中加入相应请求参数来完成的。根据请求的处理情况，系统会返回处理结果。 请求结构 服务地址：ecs.aliyuncs.com 通信协议: 支持HTTP或HTTPS , 推荐HTTPS 请求方法：支持HTTP或HTTPS GET/POST方法发送请求，这种方式下请求参数需要包含在请求的URL中。 字符编码：请求及返回结果都使用UTF-8字符集进行编码。 返回格式：支持XML和JSON两种，默认为XML格式。]]></content>
      <categories>
        <category>阿里云</category>
      </categories>
      <tags>
        <tag>阿里云</tag>
        <tag>ECS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阿里云之云盾]]></title>
    <url>%2Fposts%2F24ecca15.html</url>
    <content type="text"><![CDATA[阿里云盾介绍为响应2018年6月《中华人民共和国网络安全法》政策的正式实施，提高全民网络安全意识。 阿里云盾功能1、网络防护 网络防护:默认开通，可升级至DDoSa高防IP，主要面向产品 ECS、SLB。监测方式：时实。 2、提醒功能 默认开通，主要面向产品：ECS。监测方式：实时。内容包括：安全规则删除，异地登录，暴力破解，云资源的创建删除提醒。提醒方式：短信、邮件、旺旺（持续更新要看文档）。 3、安全体检 默认不开通，内容包括：WEB漏洞监测，系统漏洞监测，网页挂码监测等。 阿里云盾特点1、免费开通（DDoS基础防护） •无需购买昂贵设备 •无需专业安全团队 •拥有ECS即可免费开通云盾服务 2、简单易用（WEB菜单式选择） 3、专业团队 •完善的监控体系和安全团队，20年安全经验 常见网络攻击类 网络防护_DDoS攻击防护DDoS攻击是什么DDoS攻击：分布式拒绝服务攻击。 DDoS攻击目的：让既定目标，无法提供正常服务。防御难度很大。 DDoS防护功能： 攻击流量的发现，牵引和自动处理 有效抵御基于网络层、传输层及应用层的DDoS攻击。包括但不限于：SYN Flood / UDP Flood / ICMP Flood /ACK Flood/DNS Query Flood / NTP Reply Flood,但不支持防护CC攻击。 攻击分析全自动监测。精准识别攻击，受到该攻击不会影响用户访问速度，妙级开启防护，基础DDoS防护免费（ECS、SLB、EIP、NAT）。 可管理。自动进行异常流量抓包，支持攻击事件、攻击流量的管理统计。 DDoS攻击防护原理 主机防护_安骑士安骑士架构及功能 安骑士特点1、轻量化资源占用 普通状态：安骑士插件占用约1%CPU及50MB内存 峰值状态：安骑士插件占用不超过10%CPU和80MB内存，如果占用资源超过峰值，插件停止工作。 2、实时告警 控制台集中管控，短信实时报警黑客攻击行为及高危漏洞风险。 3、支持非阿里云服务器 腾讯云、青云、AWS、UCloud Web防护—Web应用防火墙（WAF）应用防火墙（WAF）是什么应用防火墙（WAF）功能1、常见Web攻击防护 SQL注入、XSS跨站、Webshell上传、后门隔离保护、命令注入、非法HTTP协议请求、常见Web服务器漏洞攻击、核心文件非授权访问、路径穿越、扫描防护等。 0day补丁定期及时更新。 2、CC恶意攻击防护 对单一来源IP访问频率进行控制。 针对海量慢速请求攻击，根据统计响应码及URL请求分布，异常Referer及User-Agent特征识别，结合网站精准防护规则进行综合性防护。 3、虚拟补丁 在Web应用漏洞补丁发布和修复之前，通过调整Web防护策略实现快速防护。 4、攻击事件管理 支持攻击事件、攻击流量、攻击规模的集中管理统计 应用防火墙（WAF）特点1、配置简单 工作在用户端和网站之间，只需修改DNS记录 2、强大的Web防御功能 内置千条防护规则，每周有规则的新增和优化；Web 0day漏洞补丁修复，24小时内防护，全球同步；专业攻防团队进行漏洞研究；捕获0day漏洞生成防护规则。 3、检测块、防护稳 一毫秒内检测攻击并防护生效，防护无延迟。新的防护规则一分钟内全球同步，全年稳定在线可用。 内容安全—（阿里绿网）内容安全功能 站点监测 OSS违规监测服务 内容监测API 内容安全特点 1、性价比高 节省90%的人力成本，支持妙级返回结果，达到99%以上准确率。 2、接入成本低 一次接入即可提供音视频、图片、文字等形式的内容监测，覆盖恐暴、鉴黄、涉政、广告等风险防范。 3、灵活服务方式 与OSS、ECS等云产品无缝对接，还可通过API方式同用户审核系统集成。]]></content>
      <categories>
        <category>阿里云</category>
      </categories>
      <tags>
        <tag>阿里云</tag>
        <tag>云盾</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阿里云之负载均衡SLB]]></title>
    <url>%2Fposts%2Fb0f46966.html</url>
    <content type="text"><![CDATA[SLB的由来互联网应用随着业务量的发展、访问量和数据流量的不断增长，单一的服务器设备已经无法承担。 SLB的定义将前台执行的任务分摊到后台多台较低配置的服务器处理，然后返回结果给客户。 传统的SLB在客户端和服务器之间添加负载均衡硬件设备。 好处：1、扩展了网络设备和服务器的带宽，增加了吞吐量。2、增强了网络数据处理能力。3、提高了网络灵活性和可用性。 劣势：1、设备价格昂贵。2、达到上限需继续购买硬。 阿里弹性负载均衡SLB弹性负载均衡定义基于软件的负载均衡SLB解决方案。是对多台服务器进行的流量分发的一种负载均衡。 弹性负载均衡特点1、高可用性（全冗余的设计，消除了单点故障，支持同城容灾；搭配DNS的话可以实现跨地域容灾，可用性高达99.95%；在流量波动的情况下，不中断对外服务。） 2、低成本（同传统负载均衡系统高投入相比投入下降60%，且不需要运维；在私网类型网络中免费使用。） 3、高安全性（结合云盾防DDoS系统。） 弹性负载均衡应用场景—&gt;适合做应用程序的流量入口 SLB负载均衡，横向扩展的应用系统服务能力，适用于App Server 服务器Server。当部分ESC宕机后，应用系统能继续工作。 ESC，(阿里云后端服务器)可运行linux或Windows Server,(无状态无数据) Apache+Web应用，可水平扩展。 OSS，(对象存储) RDS,（数据库应用） 举例： 浙江政务服务网 学信网 ## 弹性SLB用途 1、流量分发扩展应用系统对外服务能力，通过消除单点障碍提升应用系统可用性。 2、SLB可以通过设置虚拟地址，将同一地域的多台ESC资源虚拟成一个高性能，高可用的资源地。（规则检查，按规则分发） 3、SLB检查ECS资源池中的ECS健康状况，能自动隔离异常ECS，解决单点故障，提高服务能力。 4、具备HTTP与TCP抗DDos攻击能力。（阿里云开启SLB实例服务的同时默认开启云盾服务） 5、SLB是ESC面向多机方案的一项配套服务，需要搭配ESC来使用。 弹性SLB容灾1、本地容灾 2、同城容灾（通过DNS轮询） 3、跨地域容灾（通过DNS轮询） 弹性SLB的功能架构 弹性SLB的主要功能功能一：提供四层（TCP/UDP协议）和七层（HTTP/HTTPS协议）的均衡负载。 功能二：对后端ECS进行健康检查，自动屏蔽异常状态的ECS，待该ECS恢复正常后自动解除屏蔽。 功能三：提供会话保持功能，在Session的生命周期内，将同一客户端的请求转发到同一ECS上。 功能四：提供轮询、加权轮询（WRR）、加权最小连接数（WLC）3种转发方式。 轮询：依次将请求发送到后端ECS上。 加权轮询：为后端的ECS设置权重，权重越高被分发的几率越大。 加权最小连接数：在后端ECS权重相同的情况下，将请求分发到当前连接数最小的ECS上。 功能五：针对HTTP协议，提供统一的证书管理服务，解密处理在SLB实例上，降低后端ECS的CPU开销。 功能六：支持公网或私网类型的负载均衡。(私网类型免费试用)。 功能七：带宽控制，支持根据监听设置其对应服务所达到的带宽峰值。 功能八：安全防护，结合云盾，可提供5G以下防DDoS攻击能力。 功能九：容灾，支持同一地域跨可用区的容灾，结合DNS轮询支持跨地域容灾。 功能十：提供控制台，API、SDK三种控制方式。 弹性SLB使用开通SLB之前，需要考虑的问题 1、ESC部署在什么区域？ 按照用户所在位置就近选择区域，来提升用户访问速率。 2、需要多少台后端服务器？ 根据实际业务需求申请并部署。 3、采用什么样的协议进行SLB转发？ 根据应用系统使用的协议选择四层或七层协议。 4、SLB是公网还是内网服务？ 根据SLB的用途进行选择。 5、是否需要域名？ 需要就提前准备域名。 选择离用户最近节点的SLB服务，配置实例后才可使用。默认按量付费的实例为60个。 弹性SLB服务监听设置1、七层网络(HTTP)监听配置——适用场景为:SLB使用HTTP或者HTTPs协议的负载均衡。（会话保持基于COOKIE） 2、七层网络(HTTPs)监听配置 比HTTP多了一个证书的服务。（会话保持基于COOKIE） 3、四层网络(TCP)监听配置——适用场景为:SLB使用TCP协议的负载均衡。（会话保持基于源地址） 监听配置的限制 负载均衡数量50个/实例 每个用户上传证书的数量小于等于100个 如何选择监听协议 弹性SLB服务管理后端服务器主备服务器组： 主机正常，流量往主机走；主机宕机，流量往备机走。 备机不进行健康检查，所以主机健康检查失败，系统将流量直接切到备机上，主机健康检查恢复正常后流量重新切回主机。 一个主备服务器组只允许添加两个ECS实例，一个作为主机，一个作为备机，主备服务器组只支持四层监听。 虚拟服务器组： 当需要将不同的请求转发到不同的后端服务器上时，或需要通过域名或URL进行请求转发，可以选择虚拟服务器组。 如设置了虚拟服务器组，默认在SLB实例维度末端添加的后端服务器不再接受请求。 权值设置：最高为100，最低为0，权值越高轮询概率越大。 弹性SLB证书管理1、SLB证书只支持PEM格式的证书，在上传证书之前需确保证书、证书链和私钥符合格式要求，其中私钥是加密存储的。 2、自建证书可以通过OpenSSL生成。 3、证书管理是地域及资源 4、SLB协议前端口选择HTTPs协议，端口选择443；后端选择HTTP，端口选择80。 5、SLB支持管理100个证书用户。 服务器证书（单项认证的证书）、CA证书（双向认证的证书） 弹性SLB的API通过向负载均衡API服务端地址发送HTTP GET请求，并按照接口说明在请求中加入相应请求参数来完成的；根据请求的处理情况，系统会返回处理结果。 请求的结构： 服务地址：slb.aliyuncs.com 通信协议：支持HTTP/HTTPS,推荐HTTPS 请求方式：支持HTTP GET方法发送请求，这种方式下请求参数需要包含在请求URL中。 字符编码：请求及返回结果采用UTF-8字符集进行编码。 弹性SLB的API-LoadBalancer相关API 弹性SLB的API-Listener相关API 弹性SLB的API-BackendServer相关API 以上这些均可在阿里云API官网 查看和调用。 SLB相关思考题题目1： SLB连接1台ECS服务器，这种情况下如何将任务进行流量分发？ 答： 初始配置ECS时默认网络是固定带宽的，(例如初始创建5M带宽)随着业务的发展，继续升级带宽会造成浪费。阿里云支持续费降配方式去修改网络计费方式。但是需要等到下个计费周期，在这种的情况下最简单最快的方法就是开通SLB，通过SLB来实现带宽的扩展。SLB默认采用按流量计费的方式，SLB作为前段服务，后端连接ESC即可，这样做还方便后期增加ESC来实现多台ESC的负载。 如果你的业务场景（网站平时流量不高，基本带宽够用，但在明显的峰谷时却不能流畅访问）不妨考虑在前端增加一个SLB。 题目2： 后端20台ECS服务器，有一台的ECS权值设置成0，会发生什么？ 答： 由于一台ECS服务器权值被设置成0，会导致SLB健康检查异常 由于一台ECS服务器权值被设置成0，SLB不会将新的连接转发给该ECS 题目3： 设置ECS的权重为0和移除ECS的区别 答: ECS权重设置为0时，ECS已建立的长连接依然存在。 设置ECS权重值为0只适用于主动运维，如部署应用或升级ECS。]]></content>
      <categories>
        <category>阿里云</category>
      </categories>
      <tags>
        <tag>阿里云</tag>
        <tag>SLB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Discord使用不需翻墙]]></title>
    <url>%2Fposts%2F615f044c.html</url>
    <content type="text"><![CDATA[Discord是一款非常好的语音聊天软件，相较国内的QT，YY等聊天软件 纯净、无广告，但就是这样的良心软件在国内被墙，无法使用。 解决的办法是：在C:\Windows\System32\drivers\etc 修改Hosts文件权限后， 在里面添加相关设置 123456789104.16.58.5 discordapp.com 104.16.58.5 support.discordapp.com 104.16.58.5 dl.discordapp.net 104.16.58.5 gateway.discord.gg 104.16.58.5 status.discordapp.com 104.16.58.5 cdn.discordapp.com 104.16.58.5 media.discordapp.net 104.16.58.5 images-ext-1.discordapp.net 104.16.58.5 images-ext-2.discordapp.net 保存后，Discord既可使用。]]></content>
      <categories>
        <category>Discord</category>
      </categories>
      <tags>
        <tag>Discord</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用myQR生成二维码]]></title>
    <url>%2Fposts%2Fe6266321.html</url>
    <content type="text"><![CDATA[安装相关环境安装Python这一环节可以自行百度。 安装MyQR库MyQR是Python的一个子模块 打开命令行CTRL + R,输入cmd，回车 输入python会出现相关的信息,表明有python环境，再输入exit()退出环境 输入 pip3 install MyQR安装MyQR模块，等待下载安装完成,成功安装会显示succeessful。（我这边之前已安装完成） 输入pip list在安装的清单中可以找到此模块 MyQR库安装完成。 利用myQR生成二维码编译器设置我这里使用vs code 编译器 搜索Python,安装该插件 搜索 language，添加语言插件包 查看—命令面板—运行Python 生成无图片二维码在电脑桌面新建一个zmj2008文件夹，使用vs code打开该文件夹，并在文件夹下新建MyDB.py文件。右侧导航栏显示如下： 输入from MyQR import myqr 载入模块 输入myqr.run(&quot;www.shiyanlou.com&quot;)在本地C:\Users\Mayjor_Zmj会有生成一个二维码图片 qrcode.png 生成动态图片二维码将选好的动态图片timg.gif放在zmj2008文件夹下，输入以下代码 123456789101112from MyQR import myqrimport osversion, level, qr_name = myqr.run( words='https://www.iamzmj.top', # 可以是字符串，也可以是网址(前面要加http(s)://) version=1, # 设置容错率为最高 level='H', # 控制纠错水平，范围是L、M、Q、H，从左到右依次升高 picture='timg.gif', # 将二维码和图片合成 colorized=True, # 彩色二维码 contrast=1.0, # 用来调节图片亮度 save_name='55.gif', # 保存文件的名字，格式可以是jpg,png,bmp,gif save_dir=os.getcwd() #控制位置 ) 123456789101112from MyQR import myqrimport osversion, level, qr_name = myqr.run( words='https://www.iamzmj.top', version=1, level='H', picture='timg.gif', colorized=True, contrast=1.0, save_name='55.gif', save_dir=os.getcwd() ) 调试代码，发现zmj2008文件夹下生成55.gif。 静态图片二维码设置和动态图片设置一样。]]></content>
      <categories>
        <category>myQR</category>
      </categories>
      <tags>
        <tag>myQR</tag>
        <tag>二维码</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下Git多账号同一电脑多个ssh-key的管理]]></title>
    <url>%2Fposts%2F1526b943.html</url>
    <content type="text"><![CDATA[有时候在电脑上，需要同时管理多个代码托管平台，在推送不同平台时，需要使用不同 的SSH进行链接，如何进行多个SSH的创建和管理一时间让我有些头痛。查询百度后，解决办法大致如下： 本次要在一台电脑上同时管理Github和码云，由于是多SSH管理，需要在局部环境下创建2个SSH。 云码注册的邮箱是：zhanminie@hotmail.com Github注册的邮箱是：zhanminjie@aliyun.com 管理员模式打开Git Bash，输入git config --global --list 查看自己电脑主机是否对Git进行了相关的全局设置: 1git config --global --list 如果存在，先删除全局变量，例如： git config --global --unset user.name &quot;13588245977&quot; git config --global --unset user.email &quot;zhanminjie@hotmail.com&quot; 12git config --global --unset user.name "13588245977"git config --global --unset user.email "zhanminjie@hotmail.com" 新建SSH 执行命令 ssh-keygen -t rsa -C zhanminjie@aliyun.com创建github对应的sshkey，将其命名为id_rsa 执行命令 ssh-keygen -t rsa -C zhanminjie@hotmail.com创建云码对应的sshkey，将其命名为id_rsa_gitee 创建成功示意图如下： 123456789101112131415161718192021C:\Users\Mayjor_Zmj&gt;ssh-keygen -t rsa -C zhanminjie@hotmail.comGenerating public/private rsa key pair.Enter file in which to save the key (C:\Users\Mayjor_Zmj/.ssh/id_rsa): id_rsa_giteeEnter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in id_rsa_github.Your public key has been saved in id_rsa_github.pub.The key fingerprint is:SHA256:TmR4BCxLZX1JVRB/dtI9B1JVL18Y+PiEruvFs/MOUSE zhanminjie@hotmail.comThe key's randomart image is:+---[RSA 2048]----+| o+o...oE**.+|| o..o. o .+ *o|| . o. +. +*.X|| . + o.o*=|| S ..o .|| o .... || . .= || ...+ || .o..+o |+----[SHA256]-----+ 此时在系统sysem32中会将生成id_ rsa,id_rsa.pub(公钥); id_rsa_gitee,id_rsa_gitee.pub(公钥) 四个文件，将其放到C:\Users\Mayjor_Zmj\ .ssh 文件夹下 把云码和github对应的公钥绑定到对应网站到服务器 将新建SS加入 SSH agent当中 ssh-agent bashssh-add ~/.ssh/github_id_rsassh-add ~/.ssh/gitlab_id_rsa_gitee 在C:\Users\Mayjor_Zmj\ .ssh 文件夹下新建config.txt文本文件对两SSH进行配置 在.ssh目录下创建config文本文件并完成相关配置(最核心的地方) 每个账号单独配置一个Host，每个Host要取一个别名，每个Host主要配置HostName和IdentityFile两个属性即可 Host的名字可以取为自己喜欢的名字，不过这个会影响git相关命令，例如：Host mygithub 这样定义的话，命令如下，即git@后面紧跟的名字改为mygithubgit clone git@github:PopFisher/AndroidRotateAnim.git HostName 这个是真实的域名地址IdentityFile 这里是id_rsa的地址PreferredAuthentications 配置登录时用什么权限认证–可设为publickey,password publickey,keyboard-interactive等User 配置使用用户名 12345678910111213# githubHost github.comHostName github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsaUser zmj2008 # smartgitHost gitee.comHostName gitee.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsa_giteeUser 13588245977 设置玩完成后，输入ssh -T git@github.com/ssh -T git@gitee.com进行测试，查看配置是否成功。 测试1成功： 123Mayjor_Zmj@DESKTOP-CVQMHBH MINGW64 ~/Desktop$ ssh -T git@github.comHi zmj2008! You've successfully authenticated, but GitHub does not provide shell access #出现该句表示成功 测试2未成功： 123Mayjor_Zmj@DESKTOP-CVQMHBH MINGW64 ~/Desktop$ ssh -T git@gitee.comgit@gitee.com: Permission denied (publickey). #测试未成功，未有权限 若发生上述情况，处理的解决办法是先输入eval ssh-agent -s 再输入ssh-add ~/.ssh/id_rsa_github就解决了。 1234567Mayjor_Zmj@DESKTOP-CVQMHBH MINGW64 ~/Desktop$ eval `ssh-agent -s`Agent pid 1749Mayjor_Zmj@DESKTOP-CVQMHBH MINGW64 ~/Desktop$ ssh-add ~/.ssh/id_rsa_giteeIdentity added: /c/Users/Mayjor_Zmj/.ssh/id_rsa_gitee(zhanminjie@hotmail.com) 测试2成功： 123Mayjor_Zmj@DESKTOP-CVQMHBH MINGW64 ~/Desktop$ ssh -T git@gitee.comHi zhanminjie! You've successfully authenticated, but GITEE.COM does not provide shell access. 这样两个SSH在局部变量下创建成功。Github和码云既可以分别进行管理了。]]></content>
      <categories>
        <category>ssh-key</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>ssh-key</tag>
        <tag>多账号</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hugo安装和部署到码云]]></title>
    <url>%2Fposts%2Fd5c577fc.html</url>
    <content type="text"><![CDATA[Hugo是一个用Go编写的静态HTML和CSS网站生成器。它针对速度，易用性和可配置性进行了优化。Hugo获取包含内容和模板的目录，并将它们呈现为完整的HTML网站。 Hugo依赖Markdown文件和元数据的前端内容，您可以从任何目录运行Hugo。这适用于您没有特权帐户的共享主机和其他系统。Hugo在几分之一秒内呈现了一个中等规模的典型网站。一个好的经验法则是每个内容呈现大约1毫秒。Hugo旨在适用于任何类型的网站，包括博客和文档等。 Hugo安装方式1：命令行安装先安装Chocolatey，管理员方式运行cmd.exe，输入 1@"%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command "iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))" &amp;&amp; SET "PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin" 安装hugo，管理员方式运行cmd.exe，输入 1choco install hugo -confirm 方式2：zip安装点击Hugo，选择对应系统（WIN10 64位）最新版—并下载 下载完成后—解压到自己制定文件夹，我这里是（C:\hugo0.56.2）下，该版本为之前已下载。 为Hugo添加环境变量（自行百度就可以添加） 添加完成后，WIN+R打开运行框输入 Hugo version 若显示Hugo Static Site Generator v0.56.2-5F033A7F windows/amd64 BuildDate: 2019-07-30T09:06:05Z说明安装成功。 12345Microsoft Windows [版本 10.0.18950.1000](c) 2019 Microsoft Corporation。保留所有权利。C:\Users\Mayjor_Zmj&gt;hugo versionHugo Static Site Generator v0.56.2-5F033A7F windows/amd64 BuildDate: 2019-07-30T09:06:05Z #表示安装成功 生成站点根目录输入cd c:/hugo0.56.2进入Hugo文件夹 123C:\Users\Mayjor_Zmj&gt;cd c:/hugo0.56.2c:\hugo0.56.2&gt; 新建博客站点blog,输入new site c:/hugo0.56.2/Blog 12345678910111213c:\hugo0.56.2&gt;hugo new site c:/hugo0.56.2/BlogCongratulations! Your new Hugo site is created in c:\hugo0.56.2\Blog. #表示新建成功Just a few more steps and you're ready to go:1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the "hugo new theme &lt;THEMENAME&gt;" command.2. Perhaps you want to add some content. You can add single files with "hugo new &lt;SECTIONNAME&gt;\&lt;FILENAME&gt;.&lt;FORMAT&gt;".3. Start the built-in live server via "hugo server".Visit https://gohugo.io/ for quickstart guide and full documentation. 安装主题选用该hugo-icarus-theme主题 进入themes文件夹，下载主题： 12345678910c:\hugo0.56.2&gt;cd Blogc:\hugo0.56.2\Blog&gt;cd themes #进入该文件夹c:\hugo0.56.2\Blog\themes&gt;git clone https://github.com/digitalcraftsman/hugo-icarus-theme.git #下载主题Cloning into 'hugo-icarus-theme'...remote: Enumerating objects: 1041, done.remote: Total 1041 (delta 0), reused 0 (delta 0), pack-reused 1041Receiving objects: 100% (1041/1041), 2.34 MiB | 5.00 KiB/s, done.Resolving deltas: 100% (670/670), done. 点击进入icarus主题文件夹下的exampleSite文件夹将config.toml的内容复制到Blog根目录下覆盖原有config.toml，修改config.toml头部文件，theme、themesDir的配置，其他的配置可以之后慢慢设置。 回到Blog根目录，输入hugo server 本地运行成功后，在浏览器上输入http://localhost:1313/查看如下： Hugo部署到码云创建SSH码云账号：13588245977 码云密码：zhanminjie@hotmail.com 1ssh-keygen -t rsa -C zhanminjie@hotmail.com 创建云码对应的sshkey，将其命名为id_rsa_gitee 123456789101112131415161718192021C:\Users\Mayjor_Zmj&gt;ssh-keygen -t rsa -C zhanminjie@hotmail.comGenerating public/private rsa key pair.Enter file in which to save the key (C:\Users\Mayjor_Zmj/.ssh/id_rsa): id_rsa_giteeEnter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in id_rsa_github.Your public key has been saved in id_rsa_github.pub.The key fingerprint is:SHA256:TmR4BCxLZX1JVRB/dtI9B1JVL18Y+PiEruvFs/MOUSE zhanminjie@hotmail.comThe key's randomart image is:+---[RSA 2048]----+| o+o...oE**.+|| o..o. o .+ *o|| . o. +. +*.X|| . + o.o*=|| S ..o .|| o .... || . .= || ...+ || .o..+o |+----[SHA256]-----+ 把云码和github对应的公钥绑定到对应网站到服务器 将新建SS加入 SSH agent当中 ssh-agent bash ssh-add ~/.ssh/gitlab_id_rsa_gitee 打开bash here，c测试电脑和平台的链接。 123Mayjor_Zmj@DESKTOP-CVQMHBH MINGW64 ~/Desktop$ ssh -T git@gitee.comHi zhanminjie! You've successfully authenticated, but GITEE.COM does not provide shell access. 码云代码托管平台上新间仓库，仓库名称同项目名称，最后生成的网址就是https://gitee.com/仓库名称.io 开启Page功能 博客根目录上传代码按步骤输入 hugo --theme=even --buildDrafts --baseUrl=“https://zhanminjie_admin.gitee.io” cd public git init git remote add origin https://gitee.com/zhanminjie_admin/zhanminjie_admin.git git add -A git commit -m “first commit” git config --global user.name &quot;13588245977&quot;git config --global user.email &quot;zhanminjie@hotmail.com&quot; git push origin master git pull --rebase origin master #问题是因为github中的README.md文件不在本地代码目录中，可以通过如下命令进行代码合并. git push origin master 12345678910111213141516171819202122hugo --theme=even --buildDrafts --baseUrl=“https://zhanminjie_admin.gitee.io”cd publicgit initgit remote add origin https://gitee.com/zhanminjie_admin/zhanminjie_admin.gitgit add -Agit commit -m “first commit” git config --global user.name "13588245977"git config --global user.email "zhanminjie@hotmail.com"git push origin mastergit pull --rebase origin master #问题是因为github中的README.md文件不在本地代码目录中，可以通过如下命令进行代码合并git push origin master 参考教程： https://baijiahao.baidu.com/s?id=1630800288039248525&amp;wfr=spider&amp;for=pc https://zilongshanren.com/post/move-from-hexo-to-hugo/ https://juejin.im/post/5cefc5c351882520724c7cf5 https://github.com/nusr/blog/blob/master/config.toml]]></content>
      <categories>
        <category>Hugo</category>
      </categories>
      <tags>
        <tag>Hugo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo nest添加标签云]]></title>
    <url>%2Fposts%2F449f6cd5.html</url>
    <content type="text"><![CDATA[引言Hexo是一个快速、简洁且高效的博客框架，能够快速生成静态页面，只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站，支持 GitHub Flavored Markdown 的所有功能，同时还拥有强大的插件系统。 这次主要介绍 NexT 7.2.0 下添加标签云hexo-tag-cloud设置。 添加标签云设置进入到站点的根目录，在 package.json 中添加依赖: &quot;hexo-tag-cloud&quot;: &quot;2.0.*&quot; 使用命令行进行安装插件 1npm install hexo-tag-cloud@^2.0.* --save 在主题文件夹找到文件 theme/next/layout/_macro/sidebar.swig, 然后添加如下代码： 123456789101112&#123;% if site.tags.length &gt; 1 %&#125;&lt;script type="text/javascript" charset="utf-8" src="/js/tagcloud.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" charset="utf-8" src="/js/tagcanvas.js"&gt;&lt;/script&gt;&lt;div class="widget-wrap"&gt; &lt;h3 class="widget-title"&gt;Tag Cloud&lt;/h3&gt; &lt;div id="myCanvasContainer" class="widget tagcloud"&gt; &lt;canvas width="250" height="250" id="resCanvas" style="width=100%"&gt; &#123;&#123; list_tags() &#125;&#125; &lt;/canvas&gt; &lt;/div&gt;&lt;/div&gt;&#123;% endif %&#125; 添加位置于： 123456789101112131415161718192021222324252627 &#123;% if theme.back2top.enable and theme.back2top.sidebar %&#125; &lt;div class="back-to-top"&gt; &lt;i class="fa fa-arrow-up"&gt;&lt;/i&gt; &#123;% if theme.back2top.scrollpercent %&#125; &lt;span id="scrollpercent"&gt;&lt;span&gt;0&lt;/span&gt;%&lt;/span&gt; &#123;% endif %&#125; &lt;/div&gt; &#123;% endif %&#125; #在该处代码下面添加 &#123;% if site.tags.length &gt; 1 %&#125; &lt;script type="text/javascript" charset="utf-8" src="/js/tagcloud.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" charset="utf-8" src="/js/tagcanvas.js"&gt;&lt;/script&gt; &lt;div class="widget-wrap"&gt; &lt;div id="myCanvasContainer" class="widget tagcloud"&gt; &lt;canvas width="200" height="250" id="resCanvas" style="width=100%"&gt; &#123;&#123; list_tags() &#125;&#125; &lt;/canvas&gt; &lt;/div&gt; &lt;/div&gt; &#123;% endif %&#125; &lt;/div&gt; #在该处代码上面添加 &lt;/aside&gt; &#123;% if theme.sidebar.dimmer %&#125; &lt;div id="sidebar-dimmer"&gt;&lt;/div&gt; &#123;% endif %&#125; &#123;% endmacro %&#125; 在本地下预览效果 hexo clean &amp;&amp; hexo g &amp;&amp; hexo s]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>nest</tag>
        <tag>tagcloud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[qBittorrent添加Tracker提速]]></title>
    <url>%2Fposts%2Fc69d7f4a.html</url>
    <content type="text"><![CDATA[前言种子和磁力链接是现在使用最为广泛的资源下载形式了，但是资源找到了，如何顺畅地下载下来也是个问题。qBittorrent 是一款开源免费的种子和磁力链接下载工具，支持 Windows、Mac 和 Linux，且功能非常强大。由于国内大部分用户并没有公网 IP，直接使用可能会有个很现实的问题——下载没速度！本文介绍如何提高qBittorrent 下载速度。 添加Tracker以提速qBittorrent -&gt; 工具 -&gt; 选项 -&gt; BitTorrent, 拉到最下面-&gt;勾选 “自动添加以下 trackers 到新的 torrents:” 并添加Tracker。 Tracker1. Tracer2. Tracker3. 安装插件 点击检查更新，自动安装完成插件。]]></content>
      <categories>
        <category>qBittorrent</category>
      </categories>
      <tags>
        <tag>qBittorrent</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[群发工资条-Word邮件合并功能]]></title>
    <url>%2Fposts%2Fe98d8324.html</url>
    <content type="text"><![CDATA[邮件合并Word中文字内容（为邮件发送内容） 群发工资条-Word邮件合并功能 Excel中的数据，实际数据中邮箱各不相同。 鼠标放置在尊敬的后面，点击开始邮件合并——邮件合并分布向导 选择电子邮件——下一步 开始文档 选择使用当前文档——下一步：选择收件人 选择预览找到Excel数据表格 确定使用表格——下一步：攥写电子邮件 选择其它项目，在Word文档对应位置插入 表格对应表头 选择下一步：预览电子邮件 未有问题选择发送邮件，（打开Outlook后）。 邮件发送成功]]></content>
      <categories>
        <category>Word</category>
      </categories>
      <tags>
        <tag>Word</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo nest添加视频]]></title>
    <url>%2Fposts%2F16f30d64.html</url>
    <content type="text"><![CDATA[引言Hexo是一个快速、简洁且高效的博客框架，能够快速生成静态页面，只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站，支持 GitHub Flavored Markdown 的所有功能，同时还拥有强大的插件系统。 为了增加博客站点的趣味性，这次主要介绍 NexT 7.2.0 中添加视频。 添加B站视频视频页面点击分享—复制嵌入式代码，复制到文章页面内, 再在&lt;iframe&gt;``&lt;/iframe&gt;头部添加width``height视频尺寸参数代码设置即可。 1&lt;iframe width="100%" height="500" src="//player.bilibili.com/player.html?aid=63296007&amp;cid=109923855&amp;page=1" scrolling="no" border="0"frameborder="no" framespacing="0" allowfullscreen="true"&gt; &lt;/iframe&gt; 视频效果如下： #]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>nest</tag>
        <tag>视频</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[手机如何登陆Google应用商店]]></title>
    <url>%2Fposts%2F34057798.html</url>
    <content type="text"><![CDATA[引言因为谷歌在国内的退出，导致很多人的Android手机上无法安装上Google play store。那是否有什么简单的方法能让手机安装上Google play store 呢？方法还是有的，大致介绍如下。 安装在PC机的安卓模拟器上安装Google空间。 雷电安卓模拟器 Google空间 雷电模拟器上安装Google空间 添加Google账户 账户添加绑定后既可以访问Googleplay应用商店。在自己的手机上也是如此的操作。 相对繁琐的是谷歌账号注册需科学上网，这里分享一个科学上网软件。 是不是发现原来访问Google play 应用商店是一件非常简单的事情！]]></content>
      <categories>
        <category>GooglePlay</category>
      </categories>
      <tags>
        <tag>GooglePlay</tag>
        <tag>手机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PicUploader图床工具设置]]></title>
    <url>%2Fposts%2Fcb6668a4.html</url>
    <content type="text"><![CDATA[操作系统环境：Win10 需提前安装 git 然后创建文件夹，使用git命令下载 PicUploader 源代码 1git clone https://github.com/xiebruce/PicUploader.git 安装 phpstudy2018 于E盘（自选），把整个 PicUploader文件夹放置于E:\phpStudy\PHPTutorial\WWW目录下，进入E:\phpStudy\PHPTutorial\Apache\conf目录，找到vhosts.conf文件并打开，在原有代码下空一行，添加如下代码： 1234567&lt;VirtualHost *:80&gt; DocumentRoot "E:\phpStudy\PHPTutorial\WWW\PicUploader" ServerName api.picuploader.com DirectoryIndex dashboard.php ErrorLog "logs/api.picuploader.com-error.log" CustomLog "logs/api.picuploader.com-access.log" common&lt;/VirtualHost&gt; 打开phpStudy,切换至最新版php+Apache，重启后运行状态里Apache亮绿灯即可。 并保证PHP扩展中已开启php_fileinfo、php_curl、php_gd2、php_exif四个扩展。要使用网页版查看记录还需要开启php_pdo_sqlite和php_pdo_mysql 找到C:\Windows\System32\drivers\etc中的hosts文件，添加一条语句并保存。 1127.0.0.1 api.picuploader.com 打开浏览器，并输入http://api.picuploader.com如果一切正常可进入如下PicUploader Web界面 1http://api.picuploader.com 未完待续 参考博客：https://www.xiebruce.top/17.html]]></content>
      <categories>
        <category>PicUploader</category>
      </categories>
      <tags>
        <tag>PicUploader</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo nest添加Live2d看板动画效果]]></title>
    <url>%2Fposts%2F896b141d.html</url>
    <content type="text"><![CDATA[引言Hexo是一个快速、简洁且高效的博客框架，能够快速生成静态页面，只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站，支持 GitHub Flavored Markdown 的所有功能，同时还拥有强大的插件系统。 为增添页面趣味性，这次主要介绍 NesT 7.2.0 添加Live2d看板动画效果。 添加Live2d看板动画看板动画 站点根目录下载插件，安装成功后，你可以在你的站点根文件夹/node_modules/底下找到live2d-widget这个文件夹。 1npm install --save hexo-helper-live2d 安装你想要的live2d动画人物，这里选择 live2d-widget-model-haruto 1npm install live2d-widget-model-haruto 在站点根目录下_config.yml添加如下代码 123456789101112131415161718192021222324#live2d看板动画live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false log: false model: use: live2d-widget-model-haruto display: superSample: 2 width: 150 height: 300 position: right hOffset: 100 vOffset: -100 mobile: show: true scale: 0.5react: opacityDefault: 0.7 opacityOnHover: 0.2 hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 即可本地预览效果。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>nest</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo nest添加底部运行时间设置]]></title>
    <url>%2Fposts%2Fe1575a4c.html</url>
    <content type="text"><![CDATA[引言Hexo是一个快速、简洁且高效的博客框架，能够快速生成静态页面，只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站，支持 GitHub Flavored Markdown 的所有功能，同时还拥有强大的插件系统。 这次主要介绍 NexT 7.2.0 主题底部添加运行时间设置。 底部添加运行时间找到 \themes\next\layout\_partials\下面的footer.swig文件，底部添加以下代码： 12345678910111213141516171819&lt;div class="run_time" style=" text-align:center;"&gt; &lt;span id="timeDate"&gt;载入天数...&lt;/span&gt;&lt;span id="times"&gt;载入时分秒...&lt;/span&gt; &lt;script&gt; var now = new Date(); function createtime() &#123; var grt= new Date("07/23/2019 10:00:00");//此处修改你的建站时间或者网站上线时间 now.setTime(now.getTime()+250); days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days); hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours); if(String(hnum).length ==1 )&#123;hnum = "0" + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum); mnum = Math.floor(minutes); if(String(mnum).length ==1 )&#123;mnum = "0" + mnum;&#125; seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); snum = Math.round(seconds); if(String(snum).length ==1 )&#123;snum = "0" + snum;&#125; document.getElementById("timeDate").innerHTML = "(*^_^*)本站已运行 "+dnum+" 天 "; #可自行修改中文 document.getElementById("times").innerHTML = hnum + " 小时 " + mnum + " 分 " + snum + " 秒"; &#125; setInterval("createtime()",250); &lt;/script&gt;&lt;/div&gt; hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 即可本地预览效果。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>nest</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo nest添加雪花飘落效果]]></title>
    <url>%2Fposts%2Fc5826913.html</url>
    <content type="text"><![CDATA[引言Hexo是一个快速、简洁且高效的博客框架，能够快速生成静态页面，只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站，支持 GitHub Flavored Markdown 的所有功能，同时还拥有强大的插件系统。 为了增加博客站点的趣味性，这次主要介绍 NexT 7.2.0 在PC端下添加雪花飘落的效果。 添加雪花飘落效果在\themes\next\source\js\src目录下新建一个snow.js文件，复制粘贴一下代码。 样式一是六边形的雪片，样式二是小圆点雪花，选择自己喜欢的样式即可。 123456789101112131415161718192021222324252627282930313233343536373839404142/*样式一*/(function($)&#123; $.fn.snow = function(options)&#123; var $flake = $('&lt;div id="snowbox" /&gt;').css(&#123;'position': 'absolute','z-index':'9999', 'top': '-50px'&#125;).html('&amp;#10052;'), documentHeight = $(document).height(), documentWidth = $(document).width(), defaults = &#123; minSize : 10, maxSize : 20, newOn : 1000, flakeColor : "#AFDAEF" /* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */ &#125;, options = $.extend(&#123;&#125;, defaults, options); var interval= setInterval( function()&#123; var startPositionLeft = Math.random() * documentWidth - 100, startOpacity = 0.5 + Math.random(), sizeFlake = options.minSize + Math.random() * options.maxSize, endPositionTop = documentHeight - 200, endPositionLeft = startPositionLeft - 500 + Math.random() * 500, durationFall = documentHeight * 10 + Math.random() * 5000; $flake.clone().appendTo('body').css(&#123; left: startPositionLeft, opacity: startOpacity, 'font-size': sizeFlake, color: options.flakeColor &#125;).animate(&#123; top: endPositionTop, left: endPositionLeft, opacity: 0.2 &#125;,durationFall,'linear',function()&#123; $(this).remove() &#125;); &#125;, options.newOn); &#125;;&#125;)(jQuery);$(function()&#123; $.fn.snow(&#123; minSize: 5, /* 定义雪花最小尺寸 */ maxSize: 50,/* 定义雪花最大尺寸 */ newOn: 300 /* 定义密集程度，数字越小越密集 */ &#125;);&#125;); 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128/*样式二*//* 控制下雪 */function snowFall(snow) &#123; /* 可配置属性 */ snow = snow || &#123;&#125;; this.maxFlake = snow.maxFlake || 200; /* 最多片数 */ this.flakeSize = snow.flakeSize || 10; /* 雪花形状 */ this.fallSpeed = snow.fallSpeed || 1; /* 坠落速度 */&#125;/* 兼容写法 */requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame || function(callback) &#123; setTimeout(callback, 1000 / 60); &#125;;cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame || window.oCancelAnimationFrame;/* 开始下雪 */snowFall.prototype.start = function()&#123; /* 创建画布 */ snowCanvas.apply(this); /* 创建雪花形状 */ createFlakes.apply(this); /* 画雪 */ drawSnow.apply(this)&#125;/* 创建画布 */function snowCanvas() &#123; /* 添加Dom结点 */ var snowcanvas = document.createElement("canvas"); snowcanvas.id = "snowfall"; snowcanvas.width = window.innerWidth; snowcanvas.height = document.body.clientHeight; snowcanvas.setAttribute("style", "position:absolute; top: 0; left: 0; z-index: 1; pointer-events: none;"); document.getElementsByTagName("body")[0].appendChild(snowcanvas); this.canvas = snowcanvas; this.ctx = snowcanvas.getContext("2d"); /* 窗口大小改变的处理 */ window.onresize = function() &#123; snowcanvas.width = window.innerWidth; /* snowcanvas.height = window.innerHeight */ &#125;&#125;/* 雪运动对象 */function flakeMove(canvasWidth, canvasHeight, flakeSize, fallSpeed) &#123; this.x = Math.floor(Math.random() * canvasWidth); /* x坐标 */ this.y = Math.floor(Math.random() * canvasHeight); /* y坐标 */ this.size = Math.random() * flakeSize + 2; /* 形状 */ this.maxSize = flakeSize; /* 最大形状 */ this.speed = Math.random() * 1 + fallSpeed; /* 坠落速度 */ this.fallSpeed = fallSpeed; /* 坠落速度 */ this.velY = this.speed; /* Y方向速度 */ this.velX = 0; /* X方向速度 */ this.stepSize = Math.random() / 30; /* 步长 */ this.step = 0 /* 步数 */&#125;flakeMove.prototype.update = function() &#123; var x = this.x, y = this.y; /* 左右摆动(余弦) */ this.velX *= 0.98; if (this.velY &lt;= this.speed) &#123; this.velY = this.speed &#125; this.velX += Math.cos(this.step += .05) * this.stepSize; this.y += this.velY; this.x += this.velX; /* 飞出边界的处理 */ if (this.x &gt;= canvas.width || this.x &lt;= 0 || this.y &gt;= canvas.height || this.y &lt;= 0) &#123; this.reset(canvas.width, canvas.height) &#125;&#125;;/* 飞出边界-放置最顶端继续坠落 */flakeMove.prototype.reset = function(width, height) &#123; this.x = Math.floor(Math.random() * width); this.y = 0; this.size = Math.random() * this.maxSize + 2; this.speed = Math.random() * 1 + this.fallSpeed; this.velY = this.speed; this.velX = 0;&#125;;// 渲染雪花-随机形状（此处可修改雪花颜色！！！）flakeMove.prototype.render = function(ctx) &#123; var snowFlake = ctx.createRadialGradient(this.x, this.y, 0, this.x, this.y, this.size); snowFlake.addColorStop(0, "rgba(255, 255, 255, 0.9)"); /* 此处是雪花颜色，默认是白色 */ snowFlake.addColorStop(.5, "rgba(255, 255, 255, 0.5)"); /* 若要改为其他颜色，请自行查 */ snowFlake.addColorStop(1, "rgba(255, 255, 255, 0)"); /* 找16进制的RGB 颜色代码。 */ ctx.save(); ctx.fillStyle = snowFlake; ctx.beginPath(); ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2); ctx.fill(); ctx.restore();&#125;;/* 创建雪花-定义形状 */function createFlakes() &#123; var maxFlake = this.maxFlake, flakes = this.flakes = [], canvas = this.canvas; for (var i = 0; i &lt; maxFlake; i++) &#123; flakes.push(new flakeMove(canvas.width, canvas.height, this.flakeSize, this.fallSpeed)) &#125;&#125;/* 画雪 */function drawSnow() &#123; var maxFlake = this.maxFlake, flakes = this.flakes; ctx = this.ctx, canvas = this.canvas, that = this; /* 清空雪花 */ ctx.clearRect(0, 0, canvas.width, canvas.height); for (var e = 0; e &lt; maxFlake; e++) &#123; flakes[e].update(); flakes[e].render(ctx); &#125; /* 一帧一帧的画 */ this.loop = requestAnimationFrame(function() &#123; drawSnow.apply(that); &#125;);&#125;/* 调用及控制方法 */var snow = new snowFall(&#123;maxFlake:60&#125;);snow.start(); 然后在\themes\next\layout\_layout.swig文件里的&lt;body&gt;&lt;/body&gt;内部进行引用：`` 1234567&lt;!-- 雪花特效 --&gt;&lt;script type="text/javascript"&gt; var windowWidth = $(window).width(); if (windowWidth &gt; 480) &#123; document.write('&lt;script type="text/javascript" src="/js/src/snow.js"&gt;&lt;\/script&gt;'); &#125;&lt;/script&gt; hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 即可本地预览效果。 参考文章: https://blog.csdn.net/stormdony/article/details/86001618]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>nest</tag>
        <tag>雪花</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Win10系统优化1:手动优化篇]]></title>
    <url>%2Fposts%2F50153a61.html</url>
    <content type="text"><![CDATA[引言最近对自己的本基本电脑重新安装了WIN10系统后，在操作系统上选择了参加Windows预览体验计划，直接跳到下一版本并安装了最新的更新。虽然系统已更新到最新，但还是需要对其进行一些必要的优化，才能使自己使用起来更加流畅。 本次介绍系统优化第一步手动优化。 手动优化—设置优化点击桌面左下角Win图标，点击设置按钮进入设置主界面。 系统设置 点击系统—点击通知和操作—关闭通知 设备设置 点击设备—自动播放—关闭自动播放 点击设备—USB—关闭USB设备提示通知，避免USB电涌问题 网络和Internet设置 点击网络和internet—状态—网络和共享中心—更改高级共享设置——启用共享文件夹/启用无密码共享 点击网络和internet—代理—关闭代理 个性化设置 点击个性化—点击主题—点击右侧桌面图标—勾选图标 点击个性化—点击开始—关闭偶尔在“开始”菜单中显示建议 点击个性化—点击开始—点击选择哪些文件显示在“开始”菜单栏上—除设置全部关闭 点击个性化—点击任务栏—选择设置任务栏已满时合并 点击个性化—点击任务栏—点击打开或关闭系统图标 应用设置 点击应用—点击离线地图—关闭地图更新 点击应用—点击可使用网站打开应用—关闭关联应用 游戏设置 点击游戏—点击游戏栏—关闭游戏视频录制功能 隐私设置 点击隐私—点击常规—关闭常规里的所有内容 点击隐私—诊断和反馈—关闭诊断数据 点击隐私—诊断和反馈—点击活动历史记录 更新和安全设置 点击更新和安全—点击传递优化—关闭传递优化 手动优化—控制面板优化点击控制面版—切换成大图标方便查看 Internet选项设置 点击Internet选项—点击常规—标签页—进行如下设置 点击Internet选项—点击常规—浏览历史记录设置—进行如下设置 点击Internet选项—点击隐私—关闭弹窗阻止程序 点击Internet选项—点击高级—勾选允许运行或按照软件，即使签名无效，避免安装插件时弹出提示框 点击Internet选项—点击高级—取消勾选默认IE浏览器检测 自带防火墙设置 点击Windows Defender防火墙—点击左侧启用或关闭Windows Defender防火墙—关闭防火墙 安全维护设置 点击安全和维护—点击左侧更改用户账户控制设置—关闭用户控制提示 程序和功能设置 点击程序和功能—点击左侧启用或关闭Windows功能—开启SMB1.0服务 电源选项设置 点击电源选项—点击左侧选择电源按钮的功能—点击当前不可用设置—勾选休眠 文件夹选项设置 点击文件夹资源管理器选项—点击查看—勾选以下内容 系统高级设置 点击系统—高级系统设置—高级—性能设置—视觉效果—按个人设置自定义设置 点击系统—高级系统设置—高级—性能设置—高级—虚拟内存设置如下 疑难解答设置 点击疑难解答—点击左侧更改设置—关闭计算机维护，疑难解答，故障排除 手动优化—服务项优化右键桌面我的电脑—点击管理—点击服务和应用程序—点击服务 禁用程序兼容性助手找到Program Compatibility Assistant Service 并禁用，避免弹出程序是否正确安装的提示窗口 禁用超级预读找到SysMain 并禁用，避免弹出程序是否正确安装的提示窗口 手动优化—策略组优化WIN+R 打开运行对话框，输入gpedit.msc，直接运行组策略 启用“关闭加载性能通知”，防止打开IE浏览器状态栏提示关闭加载项来提高浏览器运行速度的提示。启用“自动激活新安装的加载项”，比如迅雷下载加载项等等可自动激活。禁用“打开建议网站”，无用的收藏夹网址建议禁止。 （计算机配置里的设置同用户配置里的设置一样，此处省略） 启用“阻止IE首次运行向导设置” （计算机配置里的设置同用户配置里的设置一样，此处省略） 启用“阻止订阅网页源和网页快讯” （计算机配置里的设置同用户配置里的设置一样，此处省略） 禁用“快速关机优化” 启用“允许管理员忽略设备安装限制策略” 启用“设备驱动程序的代码签名” 手动优化—其它设置设置快速访问栏 关闭磁盘索引设置右键点击C盘—选择属性—常规—设置如下 隐藏小娜，任务视图，人脉回到桌面，取消前面对应的勾选即可。 整理磁贴调整一下开始屏幕，删除自己认为无用的箭头磁贴，按照自己的喜好增加删除调整磁贴既可。]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>系统</tag>
        <tag>优化</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Win10系统优化2:软件辅助篇]]></title>
    <url>%2Fposts%2Fe177ee84.html</url>
    <content type="text"><![CDATA[引言最近对自己的本基本电脑重新安装了WIN10系统后，在操作系统上选择了参加Windows预览体验计划，直接跳到下一版本并安装了最新的更新。虽然系统已更新到最新，但还是需要对其进行一些必要的优化，才能使自己使用起来更加流畅。 本次介绍系统优化第二步软件辅助优化。 软媒美化大师优化下载软媒美化大师单文件版3.7.0.0 系统外观—桌面设置 软媒设置大师优化下载软媒设置大师单文件版3.7.2.0 系统设置—资源管理器 系统设置—多媒体优化设置 系统设置—错误报告 系统设置—开关机设置 右键菜单—新建菜单 删除无用右键菜单 右键菜单—发送到菜单 删除无用右键菜单 右键菜单—添加右键菜单项目 添加上获得管理员所有权这个功能 DISM++优化下载 DISM++ 启动项管理—关闭开机磁盘检测。关闭开机启动OneDrive 系统优化设置如下 DISM++清理 软媒清理大师清理下载软媒清理大师 一键清理 深度清理 系统瘦身 添加摄像头补丁下载摄像头补丁]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>系统</tag>
        <tag>优化</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Typora Markdown语法详解]]></title>
    <url>%2Fposts%2F5ff886d0.html</url>
    <content type="text"><![CDATA[[TOC] 行内代码12`这是行内代码``this is inline code` 这是行内代码 this is inline code 新建标题12345# 一级标题 #快捷按键 Ctrl+1## 二级标题 #快捷按键 Ctrl+2### 三级标题 #快捷按键 Ctrl+3#### 四级标题 #快捷按键 Ctrl+4##### 五级标题 #快捷按键 Ctrl+5 一级标题二级标题三级标题四级标题五级标题 改变字体12345*字体倾斜* #快捷按键 Ctrl+I**字体加粗** #快捷按键 Ctrl+B***字体加粗*** #快捷按键 Ctrl+B + Ctrl+I&lt;u&gt;字体加下划线&lt;/u&gt; #快捷按键 Ctrl+U~~删除字体~~ #快捷按键 Alt+Shift+5 字体倾斜 字体加粗 字体倾斜加粗 字体加下划线 删除字体 插入图片123# 图片链接![图片描述](图片路径 "title")![图片描述](图片路径) 插入链接12345678910# 自动链接&lt;https://www.mallai.top&gt;# 参考式链接[标记]:链接地址 "标题"# 只显示文本的超链接[文本](链接地址)# 链接访问: command + 单击 https://http://zhanmuji.lofter.com/ lofter 插入分割綫12***--- 插入代码块1`文本` # 单行 文本 插入引用123456789101112131415161718#连续引用&gt;引用文本1&gt;引用文本2&gt;引用文本3#带空格引用&gt;引用文本1&gt;&gt;引用文本3#嵌套引用*&gt;&gt;&gt;引用文本1&gt;&gt;引用文本2&gt;引用文本3#引用其他元素*&gt;#####引用五级标题&gt;```python```引用代码块 引用文本1 引用文本2 引用文本3 引用文本1 引用文本3 插入有序列表1使用数字和一个英文句点表示有序列表。 注意：英文句点后面一定要有一个空格，起到缩进的作用。 有序列表 有序列表 插入无序列表1使用 *，+，- 表示无序列表。 注意：符号后面一定要有一个空格，起到缩进的作用。 *号生列表 +号產生列表 -号產生列表 插入表格12345678910# 基本格式, -|-|-|默认居左对齐 #快捷方式 Ctrl+T学号|姓名|分数-|-|-| 小明|男|75小红|女|79# 指定表格单元格对齐方式冒号在左边表示左对齐，右边表示有对齐，两边都有表示居中。:-|:-:|-: 学号 姓名 分数 小明 男 75 小红 女 79 插入表情1:表情英文 #例如 :smile 插入注脚1[^注脚名字]:注脚文本 创建Latex数学公式1行间公式: $$公式$$ #快捷方式 Crtl+T 数学符号 1234小写希腊字母: \alpha \theta \pi \beta \phi \lambda \omega \xi \eta \epsilon \delta空格和换行:\quad \\ 12关系运算符:\times = \neq \ne \leq \le \geq \ge &gt; \sim \simeq \subset \subseteq \in \notin \propto 12其他符号:... \dots; ... \cdots \vdots \ddots \forall \exists 指数和下标 12指数: a^&#123;指数项&#125;下标: a_&#123;下标项&#125; 平方根运算 12平方根: \sqrt&#123;开根号项&#125;n次方根: \sqrt[n]&#123;开根号项&#125; 分数运算符 12\frac&#123;分子&#125;&#123;分母&#125;\frac&#123;1&#125;&#123;x&#125; 向量运算 123单个向量: \vec a从A到B向量: \overrightarrow&#123;AB&#125;反向从A到B: \overleftarrow&#123;AB&#125; 水平大括号 1\underbrace&#123;表达式&#125;_&#123;底部数据&#125; --&gt; \underbrace&#123;a + b + \cdots + z&#125;_&#123;26&#125; 水平线 12上水平线: \overline&#123;m+n&#125;下水平线: \underline&#123;m+n&#125; 创建Flow流程图1234创建Flow流程图 ```flow + 回车语法：流程图语法分为两个部分: 前面部分用来定义流程图元素，后面部分用来连接流程图元素，指定流程图的执行走向tag=&gt;type: content:&gt;url 连接元素 连接流程图直接用-&gt;来连接两个元素，几点说明如下： 使用 -&gt; 来连接两个元素 对于condition类型，有yes和no两个分支，如示例中的cond(yes)和cond(no) 每个元素可以制定分支走向，默认向下，也可以用right指向右边，如示例中sub1(right) 1234567891011121314151617st=&gt;start: 开始e=&gt;end: 结束c1=&gt;condition: 条件A? #操作、执行说明c2=&gt;condition: 条件B?c3=&gt;condition: 条件C?io=&gt;inputoutput: 输入输出De1=&gt;operation: mallAI:&gt;https://www.mallai.tope2=&gt;subroutine: 子文件st-&gt;c1(no)-&gt;ec1(yes,right)-&gt;c2c2(no)-&gt;ec2(yes,right)-&gt;c3c3(no)-&gt;ec3(yes,right)-&gt;ioio-&gt;e1e1-&gt;e2e2(left)-&gt;e tag 流程图元素, 在第二段连接元素时会用到。名称可以任意,一般为流程的英文缩写和数字的组合。 type 确定标签类型, =&gt;后面表示类型。由于标签的名称可以任意指定，所以要依赖type来确定标签的类型, 标签的类型有6种: start end operation subroutine condition inputoutput content 流程图文本框中描述内容, :后面表示内容, 中英文均可。特别注意，冒号与文本之间一定要有个空格 标签 描述 url 一个连接，与框框中的文本相绑定，:&gt;后面就是对应的 url 链接，点击文本时可以通过链接跳转到 url 指定页面 创建mermaid流程图1创建: ```mermaid + 回车 声明流程图，可以声明上下结构, 下上结构，左右结构，右左结构 TB - top bottom BT - bottom top RL - right left LR - left right TD - same as TB 1234567891011121314#连接形式A --&gt; B # 箭头A --- B # 无箭头实线A -- text -- B # AB连线中添加注释A --&gt; |text|B # AB连线中添加注释A-.-&gt;B # 虚线箭头A -. text .- B # 添加注释的虚线箭头A ==&gt; B # 加粗箭头A == text ==&gt; B # 加注释加粗的箭头#节点形式graph LR id # 默认为正方形，id为元素内文本 id[text] # id表示流程图元素唯一标识用于连接，text为元素内文本 节点和形状 描述 id 默认为正方形，id为元素内文本 id[text] 正方形 id(text) 圆角正方形 id((text)) 圆形 id&gt;text] 半方框 id{text} 条件判断框 12345678910111213graph LR A[A] --&gt; B(Bib) B --&gt; E&#123;E&#125; E -- hello ---F&#123;F&#125; F --&gt;|yes|M F --&gt;|no|N A --&gt; C((circle)) C --&gt; D&gt;D] D --&gt; |NICE|H(H) H ==&gt; I d --&gt; I f --&gt; d D --&gt; f 创建mermaid时序图1创建: ```mermaid +回车 消息链接样式 1[Actor][Arrow][Actor]:Message text 类型 描述 -&gt; 无箭头实线: Solid line without arrow –&gt; 无箭头虚线: Dotted line without arrow -&gt;&gt; 有箭头实线: Solid line with arrowhead –&gt;&gt; 有箭头虚线: Dotted line with arrowhead -x 实线末端带x: Solid line with a cross at the end (async) –x 虚线末端带x: Dotted line with a cross at the end (async) 123456789sequenceDiagram participant John participant Alice John -&gt;&gt; Alice: hello Alice Alice -&gt;&gt; John: hello John Note right of John: Right Text of John Note left of Alice: Left Text of Alice Note over Alice: Over Text of Alice Note over John: Over Text of John 创建mermaid甘特图1创建: ```mermaid +回车 声明甘特图 12345678910111213gantt # 标题 title 标题 # 时间格式 dateFormat YYYY-MM-DD # 任务模块 section 任务标题1 # 具体任务和时间 task1 :a1, 2014-01-01, 30d task2 :after a1 , 20d section 任务标题2 task1 :2014-01-12 , 12d task2 : 24d 123456789101112131415161718192021222324252627gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d section Documentation Describe gantt syntax :active, a1, after des1, 3d Add gantt diagram to demo page :after a1 , 20h Add another diagram to demo page :doc1, after a1 , 48h section Last section Describe gantt syntax :after doc1, 3d Add gantt diagram to demo page :20h Add another diagram to demo page :48h]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Typora</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown字体颜色编辑]]></title>
    <url>%2Fposts%2Faff15728.html</url>
    <content type="text"><![CDATA[Markdown字体颜色编辑 设置字体 1&lt;font color=red size=6 face=“黑体”&gt;字体颜色&lt;/font&gt; 设置背景颜色 123&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#7FFFD4&gt; 背景颜色 &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 固定图片显示大小 123&lt;img src="https://img-blog.csdn.net/20151129213701642" width=256 height=256 /&gt;&lt;img src="https://img-blog.csdn.net/20151129213701642" width="50%" height="50%" /&gt; 为字体添加颜色 我是黑体字 1&lt;font face="黑体"&gt;我是黑体字&lt;/font&gt; 我是微软雅黑 1&lt;font face="微软雅黑"&gt;我是微软雅黑&lt;/font&gt; 我是华文彩云 1&lt;font face="STCAIYUN"&gt;我是华文彩云&lt;/font&gt; color=#0099ff size=72 face=”黑体” 1&lt;font color=#0099ff size=72 face="黑体"&gt;color=#0099ff size=72 face="黑体"&lt;/font&gt; color=#00ffff 1&lt;font color=#00ffff size=72&gt;color=#00ffff&lt;/font&gt; color=gray 1&lt;font color=gray size=72&gt;color=gray&lt;/font&gt; 跨行表格、表格背景色 我占了三行 方法说明颜色名称颜色 此处实现方法利用 CSDN-markdown 内嵌 html 语言的优势 Hotpink rgb(240, 248, 255) 借助 table, tr, td 等表格标签的 bgcolor 属性实现背景色 AntiqueWhite rgb(255, 192, 203) 颜色列表参考 颜色名十六进制颜色值颜色AliceBlue#F0F8FFrgb(240, 248, 255)AntiqueWhite#FAEBD7rgb(250, 235, 215)Aqua#00FFFFrgb(0, 255, 255)Aquamarine#7FFFD4rgb(127, 255, 212)Azure#F0FFFFrgb(240, 255, 255)Beige#F5F5DCrgb(245, 245, 220)Bisque#FFE4C4rgb(255, 228, 196)Black#000000rgb(0, 0, 0)BlanchedAlmond#FFEBCDrgb(255, 235, 205)Blue#0000FFrgb(0, 0, 255)BlueViolet#8A2BE2rgb(138, 43, 226)Brown#A52A2Argb(165, 42, 42)BurlyWood#DEB887rgb(222, 184, 135)CadetBlue#5F9EA0rgb(95, 158, 160)Chartreuse#7FFF00rgb(127, 255, 0)Chocolate#D2691Ergb(210, 105, 30)Coral#FF7F50rgb(255, 127, 80)CornflowerBlue#6495EDrgb(100, 149, 237)Cornsilk#FFF8DCrgb(255, 248, 220)Crimson#DC143Crgb(220, 20, 60)Cyan#00FFFFrgb(0, 255, 255)DarkBlue#00008Brgb(0, 0, 139)DarkCyan#008B8Brgb(0, 139, 139)DarkGoldenRod#B8860Brgb(184, 134, 11)DarkGray#A9A9A9rgb(169, 169, 169)DarkGreen#006400rgb(0, 100, 0)DarkKhaki#BDB76Brgb(189, 183, 107)DarkMagenta#8B008Brgb(139, 0, 139)DarkOliveGreen#556B2Frgb(85, 107, 47)Darkorange#FF8C00rgb(255, 140, 0)DarkOrchid#9932CCrgb(153, 50, 204)DarkRed#8B0000rgb(139, 0, 0)DarkSalmon#E9967Argb(233, 150, 122)DarkSeaGreen#8FBC8Frgb(143, 188, 143)DarkSlateBlue#483D8Brgb(72, 61, 139)DarkSlateGray#2F4F4Frgb(47, 79, 79)DarkTurquoise#00CED1rgb(0, 206, 209)DarkViolet#9400D3rgb(148, 0, 211)DeepPink#FF1493rgb(255, 20, 147)DeepSkyBlue#00BFFFrgb(0, 191, 255)DimGray#696969rgb(105, 105, 105)DodgerBlue#1E90FFrgb(30, 144, 255)Feldspar#D19275rgb(209, 146, 117)FireBrick#B22222rgb(178, 34, 34)FloralWhite#FFFAF0rgb(255, 250, 240)ForestGreen#228B22rgb(34, 139, 34)Fuchsia#FF00FFrgb(255, 0, 255)Gainsboro#DCDCDCrgb(220, 220, 220)GhostWhite#F8F8FFrgb(248, 248, 255)Gold#FFD700rgb(255, 215, 0)GoldenRod#DAA520rgb(218, 165, 32)Gray#808080rgb(128, 128, 128)Green#008000rgb(0, 128, 0)GreenYellow#ADFF2Frgb(173, 255, 47)HoneyDew#F0FFF0rgb(240, 255, 240)HotPink#FF69B4rgb(255, 105, 180)IndianRed#CD5C5Crgb(205, 92, 92)Indigo#4B0082rgb(75, 0, 130)Ivory#FFFFF0rgb(255, 255, 240)Khaki#F0E68Crgb(240, 230, 140)Lavender#E6E6FArgb(230, 230, 250)LavenderBlush#FFF0F5rgb(255, 240, 245)LawnGreen#7CFC00rgb(124, 252, 0)LemonChiffon#FFFACDrgb(255, 250, 205)LightBlue#ADD8E6rgb(173, 216, 230)LightCoral#F08080rgb(240, 128, 128)LightCyan#E0FFFFrgb(224, 255, 255)LightGoldenRodYellow#FAFAD2rgb(250, 250, 210)LightGrey#D3D3D3rgb(211, 211, 211)LightGreen#90EE90rgb(144, 238, 144)LightPink#FFB6C1rgb(255, 182, 193)LightSalmon#FFA07Argb(255, 160, 122)LightSeaGreen#20B2AArgb(32, 178, 170)LightSkyBlue#87CEFArgb(135, 206, 250)LightSlateBlue#8470FFrgb(132, 112, 255)LightSlateGray#778899rgb(119, 136, 153)LightSteelBlue#B0C4DErgb(176, 196, 222)LightYellow#FFFFE0rgb(255, 255, 224)Lime#00FF00rgb(0, 255, 0)LimeGreen#32CD32rgb(50, 205, 50)Linen#FAF0E6rgb(250, 240, 230)Magenta#FF00FFrgb(255, 0, 255)Maroon#800000rgb(128, 0, 0)MediumAquaMarine#66CDAArgb(102, 205, 170)MediumBlue#0000CDrgb(0, 0, 205)MediumOrchid#BA55D3rgb(186, 85, 211)MediumPurple#9370D8rgb(147, 112, 216)MediumSeaGreen#3CB371rgb(60, 179, 113)MediumSlateBlue#7B68EErgb(123, 104, 238)MediumSpringGreen#00FA9Argb(0, 250, 154)MediumTurquoise#48D1CCrgb(72, 209, 204)MediumVioletRed#C71585rgb(199, 21, 133)MidnightBlue#191970rgb(25, 25, 112)MintCream#F5FFFArgb(245, 255, 250)MistyRose#FFE4E1rgb(255, 228, 225)Moccasin#FFE4B5rgb(255, 228, 181)NavajoWhite#FFDEADrgb(255, 222, 173)Navy#000080rgb(0, 0, 128)OldLace#FDF5E6rgb(253, 245, 230)Olive#808000rgb(128, 128, 0)OliveDrab#6B8E23rgb(107, 142, 35)Orange#FFA500rgb(255, 165, 0)OrangeRed#FF4500rgb(255, 69, 0)Orchid#DA70D6rgb(218, 112, 214)PaleGoldenRod#EEE8AArgb(238, 232, 170)PaleGreen#98FB98rgb(152, 251, 152)PaleTurquoise#AFEEEErgb(175, 238, 238)PaleVioletRed#D87093rgb(216, 112, 147)PapayaWhip#FFEFD5rgb(255, 239, 213)PeachPuff#FFDAB9rgb(255, 218, 185)Peru#CD853Frgb(205, 133, 63)Pink#FFC0CBrgb(255, 192, 203)Plum#DDA0DDrgb(221, 160, 221)PowderBlue#B0E0E6rgb(176, 224, 230)Purple#800080rgb(128, 0, 128)Red#FF0000rgb(255, 0, 0)RosyBrown#BC8F8Frgb(188, 143, 143)RoyalBlue#4169E1rgb(65, 105, 225)SaddleBrown#8B4513rgb(139, 69, 19)Salmon#FA8072rgb(250, 128, 114)SandyBrown#F4A460rgb(244, 164, 96)SeaGreen#2E8B57rgb(46, 139, 87)SeaShell#FFF5EErgb(255, 245, 238)Sienna#A0522Drgb(160, 82, 45)Silver#C0C0C0rgb(192, 192, 192)SkyBlue#87CEEBrgb(135, 206, 235)SlateBlue#6A5ACDrgb(106, 90, 205)SlateGray#708090rgb(112, 128, 144)Snow#FFFAFArgb(255, 250, 250)SpringGreen#00FF7Frgb(0, 255, 127)SteelBlue#4682B4rgb(70, 130, 180)Tan#D2B48Crgb(210, 180, 140)Teal#008080rgb(0, 128, 128)Thistle#D8BFD8rgb(216, 191, 216)Tomato#FF6347rgb(255, 99, 71)Turquoise#40E0D0rgb(64, 224, 208)Violet#EE82EErgb(238, 130, 238)VioletRed#D02090rgb(208, 32, 144)Wheat#F5DEB3rgb(245, 222, 179)White#FFFFFFrgb(255, 255, 255)WhiteSmoke#F5F5F5rgb(245, 245, 245)Yellow#FFFF00rgb(255, 255, 0)YellowGreen#9ACD32rgb(154, 205, 50)]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Typora</tag>
        <tag>修改</tag>
        <tag>Markdown</tag>
        <tag>颜色</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书计划2019]]></title>
    <url>%2Fposts%2F10f46d57.html</url>
    <content type="text"><![CDATA[读书是一剂良药读书读来读去，读的都不是未来，而是过去。人为何要钟情于阅读？ 有些人，经历一些生活的打击，会怨恨，愤慨，绝望。而还有一些人，经历一些生活的打击，反而学会了宽恕，淡忘，释然。后者多半内心平静。从前有人说，现在静不下来读书了。另一人说，搞错了，不是静下来读书，是读书让你静下来。读书到底有没有用，我想说某种程度上没有用，但它能让人平静。平静这种心情， 在这样躁动的年代，书是一种精神药物。摆在书架上，它就像是一颗颗药丸，各有不同的功效，治各种不同的精神创伤。 读书计划2019职场管理类 小强升职记 - 邹鑫 搞定 - [美]戴维·艾伦 专业主义 - 大前研一 非暴力沟通 - [美] 马歇尔·卢森堡 原则 - [美]瑞·达利欧 每周工作4小时 - 蒂莫西·费里斯 高效演讲-胡维 把时间当作朋友-李笑来 经济类 穷爸爸富爸爸 - [美] 罗伯特·清崎 小狗钱钱 - [德] 博多·舍费尔 魔鬼经济学 - [美] 史蒂芬·列维特 互联网类 人人都是产品经理 - 苏杰 人人都是产品经理2.0 - 苏杰 新零售的未来 - 翁怡诺 重新定义公司 - [美]埃里克·施密特 参与感_小米口碑营销内部手册 从零开始做运营进阶篇-张亮 生活技能类 斯坦福完美睡眠法 - 西野精致 如何阅读一本书 - [美]莫提默·J.艾德勒 学会提问 - (美)尼尔.布朗 美国纽约摄影学院摄影教材（上） 美国纽约摄影学院摄影教材（下） 社会人文 激荡十年 - 吴晓波 激荡三十年 - 吴晓波 大败局 - 吴晓波 今日简史 - 尤瓦尔·赫拉利 未来简史 - 尤瓦尔·赫拉利 事实 - 汉斯·罗斯林 乌合之众 - (法)古斯塔夫.勒庞 巨婴国 - 武志红 显微镜下的大明 - 马伯庸 万万没想到 - 万维钢 洗澡 - 杨绛 小说 三体1-地球往事 - 刘慈欣 三体2-黑暗森林 - 刘慈欣 三体3-死神永生 -刘慈欣 流浪地球 - 刘慈欣 长安十二时辰 古董局中局- 马伯庸 历史 空王冠 玫瑰战争与都铎王朝的崛起 易中天 品三国 易中天 风流南宋]]></content>
      <categories>
        <category>书单</category>
      </categories>
      <tags>
        <tag>书单</tag>
        <tag>计划</tag>
        <tag>2019</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo nest文章置顶设置]]></title>
    <url>%2Fposts%2Fa12a1a77.html</url>
    <content type="text"><![CDATA[引言Hexo是一个快速、简洁且高效的博客框架，能够快速生成静态页面，只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站，支持 GitHub Flavored Markdown 的所有功能，同时还拥有强大的插件系统。 这次主要介绍 NexT 7.2.0 文章置顶的设置。 文章置顶关于主题文章置顶的功能，目前已经有修改后支持置顶的仓库，可以直接用以下命令安装。 12$ npm uninstall hexo-generator-index --save$ npm install hexo-generator-index-pin-top --save 然后在需要置顶的文章的 Front-matter 中加上 top: true 即可。比如下面这篇文章： 123456---title: hexo+GitHub博客搭建实战date: 2017-09-08 12:00:25categories: 博客搭建系列top: true--- 置顶功能已经可以实现，还需添加置顶标志 打开：/blog/themes/next/layout/_macro 目录下的 post.swig 文件，定位到 &lt;div class=&quot;post-meta&quot;&gt; 标签下,插入如下代码： 12345&#123;% if post.top %&#125; &lt;i class="fa fa-thumb-tack"&gt;&lt;/i&gt; &lt;font color=7D26CD&gt;置顶&lt;/font&gt; &lt;span class="post-meta-divider"&gt;|&lt;/span&gt;&#123;% endif %&#125; hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 即可本地预览效果。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>nest</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo nest点击头像回到首页设置]]></title>
    <url>%2Fposts%2Fa12a1a77.html</url>
    <content type="text"><![CDATA[引言Hexo是一个快速、简洁且高效的博客框架，能够快速生成静态页面，只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站，支持 GitHub Flavored Markdown 的所有功能，同时还拥有强大的插件系统。 这次主要介绍 NexT 7.2.0 点击头像回到首页的设置。 点击头像回到首页修改/themes/next/layout/_macro/sidebar.swig，找到如下代码： 123&lt;img class="site-author-image" itemprop="image" src="&#123;&#123; url_for( theme.avatar | default(theme.images + '/avatar.gif') ) &#125;&#125;" alt="&#123;&#123; theme.author &#125;&#125;" /&gt; 在其前后加上&lt;a href=&quot;/&quot;&gt;&lt;/a&gt;即可，如下： 12345&lt;a href="/"&gt; &lt;img class="site-author-image" itemprop="image" src="&#123;&#123; url_for( theme.avatar | default(theme.images + '/avatar.gif') ) &#125;&#125;" alt="&#123;&#123; theme.author &#125;&#125;" /&gt;&lt;/a&gt; hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 即可本地预览效果。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>nest</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Picgo GitHub自建图床]]></title>
    <url>%2Fposts%2F77f24ba4.html</url>
    <content type="text"><![CDATA[自建原因对于写博客的人来说，图裂是很让人然烦恼的一件事情。后来想到了自建图床，将所有图片上传云，并通过外联https连接用于博客或Markdownd的编写。正好自己用Hexo+Github搭建了博客，就想着用Github来做图片的云存储空间，电脑端使用Picgo传图软件。既使用Picgo+Github的方式自建图床。 GIthub仓库创建及获取token1.注册Github,新建仓库(此处略)。 2.新建仓库后，点击sitting—Developer settings—Personal access tokens—Generate new token—选择相关设置—按Generate token提交生成token码。 Picgo下载安装及设置1.开打Picgo项目站点，下拉页面选择自己对应系统的软件版本。我这边选择下载Windows版本。 2.打开Picgo，选择Github图床进行如下设置： 设置完成后，就可开始图片上传，动图gif（需要先下载到本地在上传）同时粘贴板也会自动粘贴上。 上传成功后，软件既根据选择的外联格式生成对应连接,直接黏贴到想要的地方。我这边选择了Markdown外联格式。]]></content>
      <categories>
        <category>Picgo</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>图床</tag>
        <tag>Picgo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Typora中文字体美化]]></title>
    <url>%2Fposts%2Fbb6a1532.html</url>
    <content type="text"><![CDATA[好字体带来好心情 “Typora”这款Markdown编译器，是自己目前使用率最高的在线编译软件，其所见即所得、离线编辑让我觉得十分得心应手。但软件默认所带的中文字体显示为“宋体”，对于有一定审美度的用户来说可能不太美观，考虑到长期使用的缘故，漂亮字体能带给编译者带来好的心情，一个好的编译开始。 那如何更换字体呢？思路如下： 下载使用一款主题在官网选择一款Typora主题，例如主题Catfish,进入主题介绍查看对应主题字体说明，并下载主题。 下载完成主题压缩包后将压缩包里边的几个文件解压到Typora的自定义主题目录，文件包括： catfish.css catfish.styl catfish（文件夹） 重启Typora，在主题选项里将原主题切换为catfish。 下载思源黑体、思源宋体好在官方主题catfish说明中刚好给了两个链接： source-han-sans（思源黑体） source-han-serif（思源宋体） 点击链接进入Github网站，将文件列表上方，将Branch选项由’master’切换为’release’， 对于source-han-sans项目，点击进入OTF文件夹，然后点击进入SourceHanSansSC.zip，再点击download下载这个压缩包，解压后在SourceHanSansSC文件夹下，得到7种不同粗细思源黑体的*.otf格式的字体文件： 对于source-han-serif项目，操作方法类似，进入OTF文件夹后，分别下载SourceHanSerifSC_SB-H.zip与SourceHanSerifSC_EL-M.zip两个压缩包，解压得到7种不同粗细的思源宋体的*.otf格式文件。 对于每个*.otf文件，右键-&gt;安装，或者双击文件打开后，亦有安装按钮。 至此，安装了思源字体，重启Typora，但如此设置在catfish主题下字体是不会呈现出来的。 修改catfish.css字体装好了，catfish主题也是从官网上下载的，打开catfish.css文件，其body部分显示如下： 12345body &#123; background: #fff; font-family: Source Han Sans SC, sans-serif; color: #555;&#125; “font-family”第一默认的字体是”Source Han Sans”，这个肯定是和思源黑体有关的，但貌似不是Windows字体文件夹Font下面的字体名称。 在css文件中搜索下”Source Han Sans”，文档显示如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344@font-face &#123; font-family: Source Han Sans SC; font-weight: normal; src: local('Source Han Sans SC Regular'), url("catfish/SourceHanSansSC-Regular.otf");&#125;@font-face &#123; font-family: Source Han Sans; font-weight: bold; src: local('Source Han Sans SC Bold'), url("catfish/SourceHanSansSC-Bold.otf");&#125;@font-face &#123; font-family: Source Han Serif; font-weight: normal; src: local('Source Han Serif SC Regular'), url("catfish/SourceHanSerifSC-Regular.otf");&#125;@font-face &#123; font-family: Source Han Serif; font-weight: bold; src: local('Source Han Serif SC Bold'), url("catfish/SourceHanSerifSC-Bold.otf");&#125;@font-face &#123; font-family: mononoki; font-style: normal; font-weight: normal; src: local('mononoki Regular'), url("catfish/mononoki-Regular.woff");&#125;@font-face &#123; font-family: mononoki; font-style: italic; font-weight: normal; src: local('mononoki Italic'), url("catfish/mononoki-Italic.woff");&#125;@font-face &#123; font-family: mononoki; font-style: normal; font-weight: bold; src: local('mononoki Bold'), url("catfish/mononoki-Bold.woff");&#125;@font-face &#123; font-family: mononoki; font-style: italic; font-weight: bold; src: local('mononoki Bold Italic'), url("catfish/mononoki-BoldItalic.woff");&#125; 对于第一段设置大胆猜测一下，”font-family: Source Han Sans”以及”font-weight: normal”的字体所在的位置url为”catfish/SourceHanSans-Regular.ttc”。刚好，在自定义主题路径themes中的catfish，找到了”SourceHanSans-Regular.ttc”与”SourceHanSans-Bold.ttc”，但是Windows貌似不识别这种格式。 于是，我把上面下载的思源字体copy到themes/catfish的文件夹下面，然后修改catfish.css文档，修改了’Source Han Sans’与’Source Han Serif’指向的四处url（以下url中是博主字体的安装的路径）： 1234567891011121314151617181920212223242526272829303132333435363738394041424344@font-face &#123; font-family: Source Han Sans SC; font-weight: normal; src: local('Source Han Sans SC Regular'), url("Users\Mayjor_Zmj\AppData\Roaming\Typora\themes\catfish/SourceHanSansSC-Regular.otf");&#125;@font-face &#123; font-family: Source Han Sans; font-weight: bold; src: local('Source Han Sans SC Bold'), url("Users\Mayjor_Zmj\AppData\Roaming\Typora\themes\catfish/SourceHanSansSC-Bold.otf");&#125;@font-face &#123; font-family: Source Han Serif; font-weight: normal; src: local('Source Han Serif SC Regular'), url("Users\Mayjor_Zmj\AppData\Roaming\Typora\themes\catfish/SourceHanSerifSC-Regular.otf");&#125;@font-face &#123; font-family: Source Han Serif; font-weight: bold; src: local('Source Han Serif SC Bold'), url("Users\Mayjor_Zmj\AppData\Roaming\Typora\themes\catfish/SourceHanSerifSC-Bold.otf");&#125;@font-face &#123; font-family: mononoki; font-style: normal; font-weight: normal; src: local('mononoki Regular'), url("Users\Mayjor_Zmj\AppData\Roaming\Typora\themes\catfish/mononoki-Regular.woff");&#125;@font-face &#123; font-family: mononoki; font-style: italic; font-weight: normal; src: local('mononoki Italic'), url("Users\Mayjor_Zmj\AppData\Roaming\Typora\themes\catfish/mononoki-Italic.woff");&#125;@font-face &#123; font-family: mononoki; font-style: normal; font-weight: bold; src: local('mononoki Bold'), url("Users\Mayjor_Zmj\AppData\Roaming\Typora\themes\catfish/mononoki-Bold.woff");&#125;@font-face &#123; font-family: mononoki; font-style: italic; font-weight: bold; src: local('mononoki Bold Italic'), url("Users\Mayjor_Zmj\AppData\Roaming\Typora\themes\catfish/mononoki-BoldItalic.woff");&#125; 保存并重启Typora，主题选择catfish，字体修改成功。]]></content>
      <categories>
        <category>Typora</category>
      </categories>
      <tags>
        <tag>Typora</tag>
        <tag>修改</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo aplayer播放器的使用]]></title>
    <url>%2Fposts%2Fc7c556d8.html</url>
    <content type="text"><![CDATA[APlayer HTML5 音乐播放器Hexo中安装hexo-tag-aplayer 是APlayer播放器在Hexo 标签插件（现已支持 MetingJS）在站点根目录下安装 1npm install --save hexo-tag-aplayer Aplayer使用方式简单介绍12-- 简单格式 --&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125; 标签参数 title : 曲目标题 author: 曲目作者 url: 音乐文件 URL 地址 picture_url: (可选) 音乐对应的图片地址 narrow: （可选）播放器袖珍风格 autoplay: (可选) 自动播放，移动端浏览器暂时不支持此功能 width:xxx: (可选) 播放器宽度 (默认: 100%) lrc:xxx: （可选）歌词文件 URL 地址 当开启 Hexo 的 文章资源文件夹 功能时，可以将图片、音乐文件、歌词文件放入与文章对应的资源文件夹中，然后直接引用： 1&#123;% aplayer "Caffeine" "Jeff Williams" "caffeine.mp3" "picture.jpg" "lrc:caffeine.txt" %&#125; 歌词标签除了使用标签 lrc 选项来设定歌词，你也可以直接使用 aplayerlrc 标签来直接插入歌词文本在博客中： 123&#123;% aplayerlrc "title" "author" "url" "autoplay" %&#125;[00:00.00]lrc here&#123;% endaplayerlrc %&#125; 播放列表123456789101112131415161718192021222324252627&#123;% aplayerlist %&#125;&#123; "narrow": false, // （可选）播放器袖珍风格 "autoplay": true, // （可选) 自动播放，移动端浏览器暂时不支持此功能 "mode": "random", // （可选）曲目循环类型，有 'random'（随机播放）, 'single' (单曲播放), 'circulation' (循环播放), 'order' (列表播放)， 默认：'circulation' "showlrc": 3, // （可选）歌词显示配置项，可选项有：1,2,3 "mutex": true, // （可选）该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停 "theme": "#e6d0b2", // （可选）播放器风格色彩设置，默认：#b7daff "preload": "metadata", // （可选）音乐文件预载入模式，可选项： 'none' 'metadata' 'auto', 默认: 'auto' "listmaxheight": "513px", // (可选) 该播放列表的最大长度 "music": [ &#123; "title": "CoCo", "author": "Jeff Williams", "url": "caffeine.mp3", "pic": "caffeine.jpeg", "lrc": "caffeine.txt" &#125;, &#123; "title": "アイロニ", "author": "鹿乃", "url": "irony.mp3", "pic": "irony.jpg" &#125; ]&#125;&#123;% endaplayerlist %&#125; MetingJShi使用方式简单介绍MetingJS 是基于Meting API 的 APlayer 衍生播放器，引入 MetingJS 后，播放器将支持对于 QQ音乐、网易云音乐、虾米、酷狗、百度等平台的音乐播放。 如果想在本插件中使用 MetingJS，请在 Hexo 站点配置文件 _config.yml 中设置： 12aplayer: meting: true 接着就可以在文章中使用 MetingJS 播放器了： 12345-- 简单示例 (id, server, type) --&#123;% meting "60198" "netease" "playlist" %&#125;&lt;!-- 进阶示例 --&gt;&#123;% meting "60198" "netease" "playlist" "autoplay" "mutex:false" "listmaxheight:340px" "preload:none" "theme:#ad7a86"%&#125; 有关参数选项注释列表如下: 选项 默认值 描述 id 必须值 歌曲 id / 播放列表 id / 相册 id / 搜索关键字 server 必须值 音乐平台: netease, tencent, kugou, xiami, baidu type 必须值 song, playlist, album, search, artist fixed false 开启固定模式 mini false 开启迷你模式 loop all 列表循环模式：all, one,none order list 列表播放模式： list, random volume 0.7 播放器音量 lrctype 0 歌词格式类型 listfolded false 指定音乐播放列表是否折叠 storagename metingjs LocalStorage 中存储播放器设定的键名 autoplay true 自动播放，移动端浏览器暂时不支持此功能 mutex true 该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停 listmaxheight 340px 播放列表的最大长度 preload auto 音乐文件预载入模式，可选项： none, metadata, auto theme #ad7a86 播放器风格色彩设置]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>aplayer</tag>
        <tag>Hexo</tag>
        <tag>nest</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo GitHub搭建博客]]></title>
    <url>%2Fposts%2Fccbc0313.html</url>
    <content type="text"><![CDATA[Hexo GitHub搭建博客的好处全是静态文件，访问速度快； 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台； 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于GitHub的； 数据绝对安全，基于GitHub的版本管理，想恢复到哪个历史版本都行； 博客内容可以轻松打包、转移、发布到其它平台； 准备工作有一个GitHub账号，没有的话去注册一个； 安装 node.js环境 安装 git环境 本次安装使用操作系统为：windows 10 搭建Hexo博客创建GitHub仓库注册的邮箱一定要验证，否则不会成功； 仓库名字必须是：username.github.io，其中username是你的用户名； 绑定域名我申请的是 iamzmj.top 域名，pin 域名地址 得到 ip 地址为 ：185.199.108.153 123C:\Users\x0468&gt;ping zmj2020.github.io正在 Ping zmj2020.github.io [185.199.108.153] 具有 32 字节的数据:来自 185.199.108.153 的回复: 字节=32 时间=143ms TTL=49 绑定域名分2种情况：带www和不带www的。 域名配置最常见有2种方式，CNAME和A记录，CNAME填写域名，A记录填写IP，由于不带www方式只能采用A记录，所以必须先ping一下你的用户名.github.io的IP，然后到你的域名DNS设置页，将A记录指向你ping出来的IP，将CNAME指向你的用户名.github.io，这样可以保证无论是否添加www都可以访问。最后在对应仓库内新建一个文档CNAME（无后缀），添加个人域名 保存即可。 本地部署Hexo在电脑的某个地方新建一个名为xxxxx的文件夹（名字可以随便取）,在该文件夹下打开Git Brush开始安装： 123456npm install -g hexo-cli #安装hexo的基础框架hexo init #初始化hexo框架 这个可能会比较慢npm install #安装所需要的组件hexo g #编译生成静态页面hexo s #启动本地服务浏览器上输入 http://localhost:4000/ #查看生成静态页面 本地部署完成 Hexo部署到Github主机中选择 Git Bash打开,输入 12345git config --global user.name "yourname" #注册用户名git config --global user.email "youremail" #注册邮箱可使用下面代码检查输入是否正确git config user.namegit config user.email 123创建SSHssh-keygen -t rsa -C "youremail@qq.com"一路回车，中会让你输入密码啥的，不需要管，一路回车即可，会生成你的ssh key。（如果重新生成的话会覆盖之前的ssh key。） 再ternimal下执行命令： 1234ssh -v git@github.com 最后两句会出现No more authentication methods to try. Permission denied (publickey). 再在ternimal下输入： 12345ssh-agent -s 然后会提示类似的信息：SSH_AUTH_SOCK=/tmp/ssh-GTpABX1a05qH/agent.404; export SSH_AUTH_SOCK; SSH_AGENT_PID=13144; export SSH_AGENT_PID; echo Agent pid 13144; 接着再输入： 1ssh-add ~/.ssh/id_rsa 这时候应该会提示：Identity added: …（这里是一些ssh key文件路径的信息）。如果出现错误提示：Could not open a connection to your authentication agent.。请执行命令： eval ssh-agent -s后继续执行命令ssh-add ~/.ssh/id_rsa ，这时候一般没问题。 再进入你的github账号，将刚刚生成的id_rsa.pub内容复制，在settings下，SSH and GPG keys下绑定。title随便取一个名字，然后将id_rsa.pub里的内容复制到Key中，完成后Add SSH Key。 最后一步，验证Key 12345在ternimal下输入命令：ssh -T git@github.com当出现Hi zmj2020! You've successfully authenticated, but GitHub does not provide shell access.表示验证成功 站点发布上传ssh key肯定要配置好 配置_config.yml中有关deploy的部分 最后站点根目录下安装deployer插件 1234npm install hexo-deployer-git --savehexo clean hexo g #生成hexo d #上传 至此Hexo+Github 个人博客搭建完成]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
</search>
